/* ========================================
   DONULAND MANAGEMENT SYSTEM - APP.JS ƒå√ÅST 3A (1/2)
   Vzd√°lenosti, UI zobrazen√≠
   ======================================== */

// ========================================
// VZD√ÅLENOSTI A MAPY
// ========================================

// Aktualizace vzd√°lenosti od Prahy
async function updateDistance() {
    const city = document.getElementById('city').value.trim();
    const distanceInput = document.getElementById('distance');
    
    if (!city || !distanceInput) return;
    
    try {
        distanceInput.value = 'Poƒç√≠t√°m...';
        const distance = await calculateDistance('Praha', city);
        distanceInput.value = distance ? `${distance} km` : 'Nezn√°m√°';
    } catch (error) {
        console.warn('Chyba p≈ôi v√Ωpoƒçtu vzd√°lenosti:', error);
        distanceInput.value = getFallbackDistance(city);
    }
}

// V√Ωpoƒçet vzd√°lenosti mezi mƒõsty
async function calculateDistance(from, to) {
    const cacheKey = `${from}-${to}`;
    
    // Kontrola cache
    if (globalData.distanceCache.has(cacheKey)) {
        return globalData.distanceCache.get(cacheKey);
    }
    
    // Fallback vzd√°lenosti pro ƒçesk√° mƒõsta od Prahy
    const fallbackDistances = {
        'praha': 0,
        'brno': 195,
        'ostrava': 350,
        'plze≈à': 90,
        'liberec': 100,
        'olomouc': 280,
        'hradec kr√°lov√©': 110,
        'pardubice': 100,
        'ƒçesk√© budƒõjovice': 150,
        '√∫st√≠ nad labem': 75,
        'karlovy vary': 130,
        'jihlava': 125,
        'hav√≠≈ôov': 365,
        'kladno': 25,
        'most': 80,
        'opava': 340,
        'fr√Ωdek-m√≠stek': 330,
        'karvin√°': 370,
        'teplice': 85,
        'dƒõƒç√≠n': 100
    };
    
    const cityNormalized = removeDiacritics(to.toLowerCase());
    
    // Hled√°n√≠ nejpodobnƒõj≈°√≠ho mƒõsta
    for (const [knownCity, distance] of Object.entries(fallbackDistances)) {
        if (cityNormalized.includes(knownCity) || knownCity.includes(cityNormalized)) {
            globalData.distanceCache.set(cacheKey, distance);
            return distance;
        }
    }
    
    // Pokus o Google Maps API
    try {
        const mapsKey = document.getElementById('mapsKey').value || CONFIG.MAPS_API_KEY;
        if (mapsKey && mapsKey !== 'demo') {
            const distance = await getDistanceFromMapsAPI(from, to, mapsKey);
            if (distance) {
                globalData.distanceCache.set(cacheKey, distance);
                return distance;
            }
        }
    } catch (error) {
        console.warn('Maps API selhal:', error);
    }
    
    // Default pro nezn√°m√° mƒõsta
    const estimatedDistance = 150;
    globalData.distanceCache.set(cacheKey, estimatedDistance);
    return estimatedDistance;
}

// Fallback vzd√°lenost podle n√°zvu mƒõsta
function getFallbackDistance(city) {
    const cityLower = removeDiacritics(city.toLowerCase());
    
    if (cityLower.includes('praha')) return '0 km';
    if (cityLower.includes('brno')) return '195 km';
    if (cityLower.includes('ostrava')) return '350 km';
    if (cityLower.includes('plze≈à') || cityLower.includes('plzen')) return '90 km';
    if (cityLower.includes('liberec')) return '100 km';
    if (cityLower.includes('olomouc')) return '280 km';
    
    return '150 km'; // Pr≈Ømƒõrn√° vzd√°lenost
}

// Google Maps Distance Matrix API
async function getDistanceFromMapsAPI(from, to, apiKey) {
    try {
        const url = `https://maps.googleapis.com/maps/api/distancematrix/json?origins=${encodeURIComponent(from)}&destinations=${encodeURIComponent(to)}&units=metric&language=cs&key=${apiKey}`;
        const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(url)}`;
        
        const response = await fetch(proxyUrl);
        const data = await response.json();
        const mapsData = JSON.parse(data.contents);
        
        if (mapsData.status === 'OK' && mapsData.rows[0]?.elements[0]?.status === 'OK') {
            const distanceMeters = mapsData.rows[0].elements[0].distance.value;
            return Math.round(distanceMeters / 1000); // P≈ôevod na km
        }
    } catch (error) {
        console.warn('Maps API chyba:', error);
    }
    
    return null;
}

// ========================================
// UI ZOBRAZEN√ç V√ùSLEDK≈Æ
// ========================================

// Zobrazen√≠ v√Ωsledk≈Ø predikce
function displayPredictionResults(prediction, businessResults, formData) {
    console.log('üìä Zobrazuji v√Ωsledky predikce...');
    
    const resultsDiv = document.getElementById('predictionResults');
    
    // Urƒçen√≠ barvy na z√°kladƒõ zisku
    let profitClass = 'positive';
    if (businessResults.profit < 0) profitClass = 'negative';
    else if (businessResults.profit < 5000) profitClass = 'warning';
    
    // Confidence styling
    let confidenceClass = 'positive';
    if (prediction.confidence < 60) confidenceClass = 'warning';
    if (prediction.confidence < 40) confidenceClass = 'negative';
    
    const html = `
        <div class="results-grid">
            <div class="result-item">
                <div class="result-value">${formatNumber(prediction.predictedSales)}</div>
                <div class="result-label">Predikovan√Ω prodej (ks)</div>
            </div>
            
            <div class="result-item">
                <div class="result-value">${formatCurrency(businessResults.revenue)}</div>
                <div class="result-label">Oƒçek√°van√Ω obrat</div>
            </div>
            
            <div class="result-item">
                <div class="result-value ${profitClass}">${formatCurrency(businessResults.profit)}</div>
                <div class="result-label">Oƒçek√°van√Ω zisk</div>
            </div>
            
            <div class="result-item">
                <div class="result-value ${confidenceClass}">${prediction.confidence}%</div>
                <div class="result-label">Spolehlivost predikce</div>
            </div>
        </div>
        
        <div class="costs-breakdown">
            <h4>üí∞ Rozpis n√°klad≈Ø a zisku</h4>
            
            <div class="cost-item">
                <span>Obrat (${prediction.predictedSales} √ó ${formatCurrency(formData.price)})</span>
                <span>${formatCurrency(businessResults.revenue)}</span>
            </div>
            
            <div class="cost-item">
                <span>V√Ωrobn√≠ n√°klady</span>
                <span>-${formatCurrency(businessResults.costs.production)}</span>
            </div>
            
            <div class="cost-item">
                <span>Dopravn√≠ n√°klady (${formData.distance} km)</span>
                <span>-${formatCurrency(businessResults.costs.transport)}</span>
            </div>
            
            <div class="cost-item">
                <span>Pracovn√≠ n√°klady</span>
                <span>-${formatCurrency(businessResults.costs.labor)}</span>
            </div>
            
            ${businessResults.costs.revenueShare > 0 ? `
            <div class="cost-item">
                <span>Pod√≠l z obratu (5%)</span>
                <span>-${formatCurrency(businessResults.costs.revenueShare)}</span>
            </div>
            ` : ''}
            
            <div class="cost-item">
                <span>N√°jem (${getRentTypeText(formData.rentType)})</span>
                <span>-${formatCurrency(businessResults.costs.rent)}</span>
            </div>
            
            <div class="cost-item">
                <span><strong>Celkov√Ω zisk</strong></span>
                <span><strong class="${profitClass}">${formatCurrency(businessResults.profit)}</strong></span>
            </div>
        </div>
        
        ${generateRecommendations(prediction, businessResults, formData)}
        
        ${displayPredictionFactors(prediction.factors)}
    `;
    
    resultsDiv.innerHTML = html;
}

// Z√≠sk√°n√≠ textu typu n√°jmu
function getRentTypeText(rentType) {
    switch (rentType) {
        case 'fixed': return 'fixn√≠';
        case 'percentage': return '% z obratu';
        case 'mixed': return 'fixn√≠ + %';
        case 'free': return 'zdarma';
        default: return 'nezn√°m√Ω';
    }
}

// Generov√°n√≠ doporuƒçen√≠
function generateRecommendations(prediction, businessResults, formData) {
    const recommendations = [];
    
    // Doporuƒçen√≠ na z√°kladƒõ zisku
    if (businessResults.profit < 0) {
        recommendations.push('‚ö†Ô∏è Akce by byla ztr√°tov√°! Zva≈æte zv√Ω≈°en√≠ ceny nebo sn√≠≈æen√≠ n√°klad≈Ø.');
        recommendations.push('üí° Zkuste vyjednat lep≈°√≠ podm√≠nky n√°jmu nebo naj√≠t levnƒõj≈°√≠ dopravu.');
    } else if (businessResults.profit < 5000) {
        recommendations.push('‚ö†Ô∏è N√≠zk√Ω zisk. Zva≈æte optimalizaci n√°klad≈Ø nebo vy≈°≈°√≠ cenu.');
    } else if (businessResults.profit > 20000) {
        recommendations.push('üéâ V√Ωborn√° p≈ô√≠le≈æitost! Vysok√Ω oƒçek√°van√Ω zisk.');
    }
    
    // Doporuƒçen√≠ na z√°kladƒõ confidence
    if (prediction.confidence < 50) {
        recommendations.push('üìä N√≠zk√° spolehlivost predikce. Buƒète opatrn√≠ a p≈ôipravte z√°lo≈æn√≠ pl√°n.');
    }
    
    // Doporuƒçen√≠ na z√°kladƒõ poƒças√≠
    if (formData.eventType === 'outdoor') {
        recommendations.push('üå§Ô∏è Venkovn√≠ akce - sledujte p≈ôedpovƒõƒè poƒças√≠ p≈ôed akc√≠.');
    }
    
    // Doporuƒçen√≠ na z√°kladƒõ vzd√°lenosti
    if (formData.distance > 200) {
        recommendations.push('üöó Dlouh√° doprava zvy≈°uje n√°klady. Zva≈æte ubytov√°n√≠ nebo jin√Ω zp≈Øsob dopravy.');
    }
    
    // Doporuƒçen√≠ na z√°kladƒõ business modelu
    if (formData.businessModel === 'franchise') {
        recommendations.push('ü§ù Fran≈°√≠za - ni≈æ≈°√≠ riziko, ale i ni≈æ≈°√≠ zisk. Hod√≠ se pro zaƒç√°teƒçn√≠ky.');
    }
    
    if (recommendations.length === 0) {
        recommendations.push('‚úÖ V≈°echny parametry vypadaj√≠ dob≈ôe!');
    }
    
    return `
        <div class="recommendations">
            <h4>üí° Doporuƒçen√≠</h4>
            <ul>
                ${recommendations.map(rec => `<li>${rec}</li>`).join('')}
            </ul>
        </div>
    `;
}

// Zobrazen√≠ predikƒçn√≠ch faktor≈Ø
function displayPredictionFactors(factors) {
    return `
        <div class="factors-display">
            <h4>üß† Predikƒçn√≠ faktory</h4>
            <div class="factors-grid">
                <div class="factor-item">
                    <span>Z√°kladn√≠ konverze:</span>
                    <span>${(factors.base * 100).toFixed(1)}%</span>
                </div>
                <div class="factor-item">
                    <span>Historick√Ω faktor:</span>
                    <span>${factors.historical.toFixed(2)}√ó</span>
                </div>
                <div class="factor-item">
                    <span>Poƒças√≠ faktor:</span>
                    <span>${factors.weather.toFixed(2)}√ó</span>
                </div>
                <div class="factor-item">
                    <span>Mƒõstsk√Ω faktor:</span>
                    <span>${factors.city.toFixed(2)}√ó</span>
                </div>
                <div class="factor-item">
                    <span>Konkurence:</span>
                    <span>${factors.competition.toFixed(2)}√ó</span>
                </div>
                <div class="factor-item">
                    <span>Sez√≥na:</span>
                    <span>${factors.seasonal.toFixed(2)}√ó</span>
                </div>
                <div class="factor-item">
                    <span>Velikost akce:</span>
                    <span>${factors.size.toFixed(2)}√ó</span>
                </div>
                <div class="factor-item" style="border-top: 2px solid #667eea; padding-top: 10px; margin-top: 10px;">
                    <span><strong>Celkov√° konverze:</strong></span>
                    <span><strong>${(factors.final * 100).toFixed(1)}%</strong></span>
                </div>
            </div>
        </div>
    `;
}

// Zobrazen√≠ historick√Ωch dat
function displayHistoricalData(formData) {
    const historicalData = getHistoricalData(formData.eventName, formData.city, formData.category);
    const historicalCard = document.getElementById('historicalCard');
    const historicalDiv = document.getElementById('historicalData');
    
    if (!historicalData.matches || historicalData.matches.length === 0) {
        historicalCard.style.display = 'none';
        return;
    }
    
    historicalCard.style.display = 'block';
    
    const topMatches = historicalData.matches.slice(0, 5);
    
    let html = '';
    
    if (historicalData.summary) {
        html += `
            <div class="historical-summary" style="background: #e3f2fd; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                <h4>üìä Shrnut√≠ podobn√Ωch akc√≠ (${historicalData.summary.count} akc√≠)</h4>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 15px; margin-top: 10px;">
                    <div style="text-align: center;">
                        <div style="font-size: 1.3em; font-weight: bold; color: #1976d2;">${Math.round(historicalData.summary.avgSales)}</div>
                        <div style="font-size: 0.9em; color: #666;">Pr≈Ømƒõrn√Ω prodej</div>
                    </div>
                    <div style="text-align: center;">
                        <div style="font-size: 1.3em; font-weight: bold; color: #388e3c;">${historicalData.summary.maxSales}</div>
                        <div style="font-size: 0.9em; color: #666;">Nejlep≈°√≠ v√Ωsledek</div>
                    </div>
                    <div style="text-align: center;">
                        <div style="font-size: 1.3em; font-weight: bold; color: #f57c00;">${historicalData.summary.minSales}</div>
                        <div style="font-size: 0.9em; color: #666;">Nejhor≈°√≠ v√Ωsledek</div>
                    </div>
                </div>
            </div>
        `;
    }
    
    html += '<h4>üîç Nejpodobnƒõj≈°√≠ akce:</h4>';
    
    topMatches.forEach((match, index) => {
        const sales = parseFloat(match.M || 0);
        const eventName = match.E || 'Nezn√°m√° akce';
        const city = match.D || 'Nezn√°m√© mƒõsto';
        const date = match.C || 'Nezn√°m√© datum';
        const visitors = parseFloat(match.K || 0);
        const conversion = visitors > 0 ? ((sales / visitors) * 100).toFixed(1) : '0';
        
        html += `
            <div class="historical-item">
                <div class="historical-info">
                    <h4>${escapeHtml(eventName)}</h4>
                    <p>${escapeHtml(city)} ‚Ä¢ ${formatDate(date)} ‚Ä¢ ${formatNumber(visitors)} n√°v≈°tƒõvn√≠k≈Ø</p>
                    <p style="color: #666; font-size: 0.8em;">Podobnost: ${'‚òÖ'.repeat(Math.min(5, Math.max(1, Math.round(match.similarityScore))))}${'‚òÜ'.repeat(5 - Math.min(5, Math.max(1, Math.round(match.similarityScore))))}</p>
                </div>
                <div class="historical-stats">
                    <div class="historical-sales">${formatNumber(sales)} ks</div>
                    <div style="font-size: 0.9em; color: #666;">${conversion}% konverze</div>
                </div>
            </div>
        `;
    });
    
    historicalDiv.innerHTML = html;
}

// Zobrazen√≠ poƒças√≠
function displayWeather(weather) {
    const weatherDisplay = document.getElementById('weatherDisplay');
    const weatherCard = document.getElementById('weatherCard');
    
    if (!weatherDisplay || !weatherCard) return;
    
    weatherCard.style.display = 'block';
    
    // Ikona podle podm√≠nek
    let icon = '‚òÄÔ∏è';
    if (weather.main === 'Clouds') icon = '‚òÅÔ∏è';
    else if (weather.main === 'Rain') icon = 'üåßÔ∏è';
    else if (weather.main === 'Drizzle') icon = 'üå¶Ô∏è';
    else if (weather.main === 'Snow') icon = '‚ùÑÔ∏è';
    else if (weather.main === 'Thunderstorm') icon = '‚õàÔ∏è';
    else if (weather.main === 'Clear') icon = '‚òÄÔ∏è';
    
    // V√Ωpoƒçet weather faktoru pro zobrazen√≠
    const impact = getWeatherImpactFactor(weather);
    let impactText = 'Neutr√°ln√≠ vliv';
    let impactColor = '#666';
    
    if (impact > 1.05) {
        impactText = 'Pozitivn√≠ vliv na prodej';
        impactColor = '#28a745';
    } else if (impact < 0.85) {
        impactText = 'Negativn√≠ vliv na prodej';
        impactColor = '#dc3545';
    }
    
    // Varov√°n√≠ p≈ôed ≈°patn√Ωm poƒças√≠m
    let warningHtml = '';
    if (weather.main === 'Rain' || weather.main === 'Thunderstorm' || weather.temp < 5) {
        warningHtml = `
            <div class="weather-warning">
                ‚ö†Ô∏è <strong>Varov√°n√≠:</strong> Nep≈ô√≠zniv√© poƒças√≠ m≈Ø≈æe v√Ωraznƒõ sn√≠≈æit n√°v≈°tƒõvnost venkovn√≠ch akc√≠. 
                Zva≈æte p≈ô√≠pravu zast≈ôe≈°en√≠ nebo p≈ôesun akce.
            </div>
        `;
    }
    
    const html = `
        <div class="weather-card">
            <div class="weather-icon">${icon}</div>
            <div class="weather-temp">${weather.temp}¬∞C</div>
            <div class="weather-desc">${weather.description}</div>
            
            <div class="weather-details">
                <div class="weather-detail">
                    <div class="weather-detail-value">${weather.humidity}%</div>
                    <div class="weather-detail-label">Vlhkost</div>
                </div>
                <div class="weather-detail">
                    <div class="weather-detail-value">${Math.round(weather.windSpeed)} m/s</div>
                    <div class="weather-detail-label">V√≠tr</div>
                </div>
                <div class="weather-detail">
                    <div class="weather-detail-value">${weather.pressure} hPa</div>
                    <div class="weather-detail-label">Tlak</div>
                </div>
                <div class="weather-detail">
                    <div class="weather-detail-value" style="color: ${impactColor};">${(impact * 100 - 100).toFixed(0)}%</div>
                    <div class="weather-detail-label">Vliv na prodej</div>
                </div>
            </div>
            
            <div style="text-align: center; margin-top: 15px; color: ${impactColor}; font-weight: 600;">
                ${impactText}
            </div>
            
            ${weather.isFallback ? '<div style="text-align: center; margin-top: 10px; font-size: 0.9em; opacity: 0.8;">‚ö†Ô∏è Odhad na z√°kladƒõ sez√≥ny</div>' : ''}
            
            ${warningHtml}
        </div>
    `;
    
    weatherDisplay.innerHTML = html;
}

// ========================================
// AKTUALIZACE UI FUNKC√ç
// ========================================

// Aktualizace weather karty podle typu akce
function updateWeatherCard() {
    const eventType = document.getElementById('eventType').value;
    const weatherCard = document.getElementById('weatherCard');
    
    if (eventType === 'outdoor') {
        weatherCard.style.display = 'block';
        updateWeather();
    } else {
        weatherCard.style.display = 'none';
    }
}

// Aktualizace business info
function updateBusinessInfo() {
    const businessModel = document.getElementById('businessModel').value;
    const businessInfo = document.getElementById('businessInfo');
    
    if (!businessModel) {
        businessInfo.style.display = 'none';
        return;
    }
    
    businessInfo.style.display = 'block';
    
    let html = '';
    
    switch (businessModel) {
        case 'owner':
            html = `
                <h4>üè™ Re≈æim majitele</h4>
                <ul>
                    <li>Vy jako majitel + 2 brig√°dn√≠ci</li>
                    <li>Mzda: ${CONFIG.HOURLY_WAGE} Kƒç/hodina na osobu</li>
                    <li>Cel√Ω zisk z≈Øst√°v√° v√°m</li>
                    <li>Nejvy≈°≈°√≠ riziko, ale i nejvy≈°≈°√≠ zisk</li>
                </ul>
            `;
            break;
        case 'employee':
            html = `
                <h4>üë®‚Äçüíº Re≈æim zamƒõstnance</h4>
                <ul>
                    <li>Vy jako zamƒõstnanec + 1 brig√°dn√≠k</li>
                    <li>Mzda: ${CONFIG.HOURLY_WAGE} Kƒç/hodina</li>
                    <li>Dodateƒçnƒõ 5% z celkov√©ho obratu</li>
                    <li>Ni≈æ≈°√≠ riziko, st≈ôedn√≠ zisk</li>
                </ul>
            `;
            break;
        case 'franchise':
            html = `
                <h4>ü§ù Fran≈°√≠zov√Ω re≈æim</h4>
                <ul>
                    <li>N√°kup donut≈Ø za ${CONFIG.FRANCHISE_PRICE} Kƒç/ks</li>
                    <li>Prodej za v√°mi stanovenou cenu</li>
                    <li>Bez mzdov√Ωch n√°klad≈Ø</li>
                    <li>Nejni≈æ≈°√≠ riziko, ale i nejni≈æ≈°√≠ zisk</li>
                </ul>
            `;
            break;
    }
    
    businessInfo.innerHTML = html;
}

// Aktualizace pol√≠ n√°jmu
function updateRentFields() {
    const rentType = document.getElementById('rentType').value;
    
    // Skryt√≠ v≈°ech pol√≠
    document.getElementById('fixedRentGroup').style.display = 'none';
    document.getElementById('percentageGroup').style.display = 'none';
    document.getElementById('mixedFixedGroup').style.display = 'none';
    document.getElementById('mixedPercentageGroup').style.display = 'none';
    
    // Zobrazen√≠ podle typu
    switch (rentType) {
        case 'fixed':
            document.getElementById('fixedRentGroup').style.display = 'block';
            break;
        case 'percentage':
            document.getElementById('percentageGroup').style.display = 'block';
            break;
        case 'mixed':
            document.getElementById('mixedFixedGroup').style.display = 'block';
            document.getElementById('mixedPercentageGroup').style.display = 'block';
            break;
    }
}

console.log('‚úÖ App.js ƒç√°st 3A naƒçtena - vzd√°lenosti a UI zobrazen√≠');
/* ========================================
   DONULAND MANAGEMENT SYSTEM - APP.JS ƒå√ÅST 3B (2/2)
   Export/save, nastaven√≠, utility funkce
   ======================================== */

// ========================================
// EXPORT A SAVE FUNKCE
// ========================================

// Ulo≈æen√≠ predikce
function savePrediction() {
    console.log('üíæ Ukl√°d√°m predikci...');
    
    try {
        // Sbƒõr aktu√°ln√≠ch dat
        const formData = gatherFormData();
        const errors = validateForm();
        
        if (errors.length > 0) {
            showNotification(`Nelze ulo≈æit: ${errors.join(', ')}`, 'error');
            return;
        }
        
        // Vytvo≈ôen√≠ z√°znamu
        const predictionRecord = {
            id: generateId(),
            timestamp: new Date().toISOString(),
            eventName: formData.eventName,
            category: formData.category,
            city: formData.city,
            eventDate: formData.eventDate,
            visitors: formData.visitors,
            competition: formData.competition,
            eventType: formData.eventType,
            businessModel: formData.businessModel,
            rentType: formData.rentType,
            rentData: {
                fixed: formData.fixedRent,
                percentage: formData.percentage,
                mixedFixed: formData.mixedFixed,
                mixedPercentage: formData.mixedPercentage
            },
            price: formData.price,
            distance: formData.distance,
            predictedSales: null, // Bude dopoƒç√≠t√°no
            actualSales: null,
            notes: '',
            status: 'planned'
        };
        
        // Ulo≈æen√≠ do localStorage
        const savedPredictions = JSON.parse(localStorage.getItem('donuland_predictions') || '[]');
        savedPredictions.push(predictionRecord);
        localStorage.setItem('donuland_predictions', JSON.stringify(savedPredictions));
        
        showNotification('‚úÖ Predikce byla √∫spƒõ≈°nƒõ ulo≈æena', 'success');
        
        // Refresh kalend√°≈ôe
        if (typeof updateCalendar === 'function') {
            updateCalendar();
        }
        
    } catch (error) {
        console.error('‚ùå Chyba p≈ôi ukl√°d√°n√≠:', error);
        showNotification('‚ùå Chyba p≈ôi ukl√°d√°n√≠ predikce', 'error');
    }
}

// Export predikce
function exportPrediction() {
    console.log('üìÑ Exportuji predikci...');
    
    try {
        const formData = gatherFormData();
        const errors = validateForm();
        
        if (errors.length > 0) {
            showNotification(`Nelze exportovat: ${errors.join(', ')}`, 'error');
            return;
        }
        
        // Vytvo≈ôen√≠ CSV dat
        const csvData = generateCSVExport(formData);
        
        // Download souboru
        downloadFile(csvData, `donuland_predikce_${formData.eventName.replace(/[^a-zA-Z0-9]/g, '_')}_${new Date().toISOString().split('T')[0]}.csv`, 'text/csv');
        
        showNotification('üìÑ Export dokonƒçen', 'success');
        
    } catch (error) {
        console.error('‚ùå Chyba p≈ôi exportu:', error);
        showNotification('‚ùå Chyba p≈ôi exportu', 'error');
    }
}

// Generov√°n√≠ CSV exportu
function generateCSVExport(formData) {
    const headers = [
        'Datum exportu',
        'N√°zev akce',
        'Kategorie',
        'Mƒõsto',
        'Datum akce',
        'N√°v≈°tƒõvnost',
        'Konkurence',
        'Typ akce',
        'Business model',
        'Typ n√°jmu',
        'Cena donuts',
        'Vzd√°lenost',
        'Predikovan√Ω prodej',
        'Oƒçek√°van√Ω obrat',
        'Oƒçek√°van√Ω zisk'
    ];
    
    // P≈ôepoƒç√≠t√°n√≠ aktu√°ln√≠ch v√Ωsledk≈Ø
    const prediction = { predictedSales: 0, confidence: 0 }; // Zjednodu≈°eno pro export
    const businessResults = calculateBusinessMetrics(formData, prediction);
    
    const values = [
        new Date().toLocaleDateString('cs-CZ'),
        formData.eventName,
        formData.category,
        formData.city,
        formatDate(formData.eventDate),
        formData.visitors,
        formData.competition,
        formData.eventType,
        formData.businessModel,
        formData.rentType,
        formData.price,
        formData.distance,
        prediction.predictedSales,
        businessResults.revenue,
        businessResults.profit
    ];
    
    // Vytvo≈ôen√≠ CSV
    const csvRows = [
        headers.join(';'),
        values.map(value => `"${value}"`).join(';')
    ];
    
    return csvRows.join('\n');
}

// Download souboru
function downloadFile(content, filename, contentType) {
    const blob = new Blob([content], { type: contentType });
    const url = window.URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
}

// Generov√°n√≠ unik√°tn√≠ho ID
function generateId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

// ========================================
// NASTAVEN√ç A KONFIGURACE
// ========================================

// Ulo≈æen√≠ nastaven√≠
function saveSettings() {
    console.log('‚öôÔ∏è Ukl√°d√°m nastaven√≠...');
    
    try {
        const settings = {
            // API nastaven√≠
            sheetsUrl: document.getElementById('sheetsUrl').value,
            weatherKey: document.getElementById('weatherKey').value,
            mapsKey: document.getElementById('mapsKey').value,
            
            // Business parametry
            donutCost: parseFloat(document.getElementById('donutCost').value) || CONFIG.DONUT_COST,
            franchisePrice: parseFloat(document.getElementById('franchisePrice').value) || CONFIG.FRANCHISE_PRICE,
            hourlyWage: parseFloat(document.getElementById('hourlyWage').value) || CONFIG.HOURLY_WAGE,
            workHours: parseFloat(document.getElementById('workHours').value) || CONFIG.WORK_HOURS,
            fuelCost: parseFloat(document.getElementById('fuelCost').value) || CONFIG.FUEL_COST,
            
            // Predikƒçn√≠ faktory
            categoryFactors: {
                'food festival': parseFloat(document.getElementById('factorFood').value) || 0.15,
                'veletrh': parseFloat(document.getElementById('factorVeletrh').value) || 0.18,
                'koncert': parseFloat(document.getElementById('factorKoncert').value) || 0.08
            },
            
            cityFactors: {
                'praha': parseFloat(document.getElementById('factorPraha').value) || 1.3,
                'brno': parseFloat(document.getElementById('factorBrno').value) || 1.2,
                'default': parseFloat(document.getElementById('factorOther').value) || 0.85
            }
        };
        
        // Ulo≈æen√≠ do localStorage
        localStorage.setItem('donuland_settings', JSON.stringify(settings));
        
        // Aktualizace glob√°ln√≠ konfigurace
        updateGlobalConfig(settings);
        
        showNotification('‚úÖ Nastaven√≠ ulo≈æeno', 'success');
        
    } catch (error) {
        console.error('‚ùå Chyba p≈ôi ukl√°d√°n√≠ nastaven√≠:', error);
        showNotification('‚ùå Chyba p≈ôi ukl√°d√°n√≠ nastaven√≠', 'error');
    }
}

// Naƒçten√≠ nastaven√≠
function loadSettings() {
    try {
        const saved = localStorage.getItem('donuland_settings');
        if (!saved) return;
        
        const settings = JSON.parse(saved);
        
        // Naƒçten√≠ API nastaven√≠
        if (settings.sheetsUrl) document.getElementById('sheetsUrl').value = settings.sheetsUrl;
        if (settings.weatherKey) document.getElementById('weatherKey').value = settings.weatherKey;
        if (settings.mapsKey) document.getElementById('mapsKey').value = settings.mapsKey;
        
        // Naƒçten√≠ business parametr≈Ø
        if (settings.donutCost) document.getElementById('donutCost').value = settings.donutCost;
        if (settings.franchisePrice) document.getElementById('franchisePrice').value = settings.franchisePrice;
        if (settings.hourlyWage) document.getElementById('hourlyWage').value = settings.hourlyWage;
        if (settings.workHours) document.getElementById('workHours').value = settings.workHours;
        if (settings.fuelCost) document.getElementById('fuelCost').value = settings.fuelCost;
        
        // Naƒçten√≠ faktor≈Ø
        if (settings.categoryFactors) {
            const factors = settings.categoryFactors;
            if (factors['food festival']) document.getElementById('factorFood').value = factors['food festival'];
            if (factors['veletrh']) document.getElementById('factorVeletrh').value = factors['veletrh'];
            if (factors['koncert']) document.getElementById('factorKoncert').value = factors['koncert'];
        }
        
        if (settings.cityFactors) {
            const factors = settings.cityFactors;
            if (factors['praha']) document.getElementById('factorPraha').value = factors['praha'];
            if (factors['brno']) document.getElementById('factorBrno').value = factors['brno'];
            if (factors['default']) document.getElementById('factorOther').value = factors['default'];
        }
        
        // Aktualizace glob√°ln√≠ konfigurace
        updateGlobalConfig(settings);
        
        console.log('‚úÖ Nastaven√≠ naƒçteno');
        
    } catch (error) {
        console.error('‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ nastaven√≠:', error);
    }
}

// Aktualizace glob√°ln√≠ konfigurace
function updateGlobalConfig(settings) {
    if (settings.donutCost) CONFIG.DONUT_COST = settings.donutCost;
    if (settings.franchisePrice) CONFIG.FRANCHISE_PRICE = settings.franchisePrice;
    if (settings.hourlyWage) CONFIG.HOURLY_WAGE = settings.hourlyWage;
    if (settings.workHours) CONFIG.WORK_HOURS = settings.workHours;
    if (settings.fuelCost) CONFIG.FUEL_COST = settings.fuelCost;
    
    if (settings.categoryFactors) {
        Object.assign(CONFIG.CATEGORY_FACTORS, settings.categoryFactors);
    }
    
    if (settings.cityFactors) {
        Object.assign(CONFIG.CITY_FACTORS, settings.cityFactors);
    }
}

// Reset nastaven√≠
function resetSettings() {
    if (!confirm('Opravdu chcete obnovit v√Ωchoz√≠ nastaven√≠? V≈°echny zmƒõny budou ztraceny.')) {
        return;
    }
    
    try {
        // Smaz√°n√≠ ulo≈æen√Ωch nastaven√≠
        localStorage.removeItem('donuland_settings');
        
        // Obnoven√≠ v√Ωchoz√≠ch hodnot v UI
        document.getElementById('sheetsUrl').value = CONFIG.SHEETS_URL;
        document.getElementById('weatherKey').value = CONFIG.WEATHER_API_KEY;
        document.getElementById('mapsKey').value = CONFIG.MAPS_API_KEY;
        
        document.getElementById('donutCost').value = 32;
        document.getElementById('franchisePrice').value = 52;
        document.getElementById('hourlyWage').value = 150;
        document.getElementById('workHours').value = 10;
        document.getElementById('fuelCost').value = 15;
        
        resetFactors();
        
        showNotification('‚úÖ Nastaven√≠ obnoveno na v√Ωchoz√≠ hodnoty', 'success');
        
    } catch (error) {
        console.error('‚ùå Chyba p≈ôi resetu nastaven√≠:', error);
        showNotification('‚ùå Chyba p≈ôi resetu nastaven√≠', 'error');
    }
}

// Reset faktor≈Ø
function resetFactors() {
    document.getElementById('factorFood').value = 0.15;
    document.getElementById('factorVeletrh').value = 0.18;
    document.getElementById('factorKoncert').value = 0.08;
    document.getElementById('factorPraha').value = 1.3;
    document.getElementById('factorBrno').value = 1.2;
    document.getElementById('factorOther').value = 0.85;
}

// Test p≈ôipojen√≠
async function testConnections() {
    console.log('üîß Testuji p≈ôipojen√≠...');
    
    const testResults = {
        sheets: false,
        weather: false,
        maps: false
    };
    
    showNotification('üîß Testuji p≈ôipojen√≠...', 'info', 0);
    
    // Test Google Sheets
    try {
        const sheetsUrl = document.getElementById('sheetsUrl').value;
        const sheetId = extractSheetId(sheetsUrl);
        if (sheetId) {
            const csvUrl = `https://docs.google.com/spreadsheets/d/${sheetId}/export?format=csv&gid=0`;
            const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(csvUrl)}`;
            const response = await fetch(proxyUrl);
            if (response.ok) {
                testResults.sheets = true;
            }
        }
    } catch (error) {
        console.warn('Sheets test failed:', error);
    }
    
    // Test Weather API
    try {
        const weatherKey = document.getElementById('weatherKey').value;
        if (weatherKey && weatherKey !== 'demo') {
            const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=Praha&appid=${weatherKey}`;
            const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(weatherUrl)}`;
            const response = await fetch(proxyUrl);
            if (response.ok) {
                const data = await response.json();
                const weatherData = JSON.parse(data.contents);
                if (weatherData.cod === 200) {
                    testResults.weather = true;
                }
            }
        }
    } catch (error) {
        console.warn('Weather test failed:', error);
    }
    
    // Test Maps API
    try {
        const mapsKey = document.getElementById('mapsKey').value;
        if (mapsKey && mapsKey !== 'demo') {
            const mapsUrl = `https://maps.googleapis.com/maps/api/distancematrix/json?origins=Praha&destinations=Brno&key=${mapsKey}`;
            const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(mapsUrl)}`;
            const response = await fetch(proxyUrl);
            if (response.ok) {
                const data = await response.json();
                const mapsData = JSON.parse(data.contents);
                if (mapsData.status === 'OK') {
                    testResults.maps = true;
                }
            }
        }
    } catch (error) {
        console.warn('Maps test failed:', error);
    }
    
    // Zobrazen√≠ v√Ωsledk≈Ø
    let message = 'V√Ωsledky test≈Ø p≈ôipojen√≠:\n';
    message += `üìä Google Sheets: ${testResults.sheets ? '‚úÖ OK' : '‚ùå Chyba'}\n`;
    message += `üå§Ô∏è Weather API: ${testResults.weather ? '‚úÖ OK' : '‚ùå Chyba'}\n`;
    message += `üó∫Ô∏è Maps API: ${testResults.maps ? '‚úÖ OK' : '‚ùå Chyba'}`;
    
    const allOk = testResults.sheets && testResults.weather && testResults.maps;
    showNotification(message, allOk ? 'success' : 'warning', 8000);
}

// ========================================
// KALEND√Å≈ò A ANAL√ùZY
// ========================================

// Aktualizace kalend√°≈ôe (zjednodu≈°en√° implementace)
function updateCalendar() {
    console.log('üìÖ Aktualizuji kalend√°≈ô...');
    
    // Z√≠sk√°n√≠ ulo≈æen√Ωch predikc√≠
    const savedPredictions = JSON.parse(localStorage.getItem('donuland_predictions') || '[]');
    
    // Vytvo≈ôen√≠ kalend√°≈ôn√≠ho zobrazen√≠ by zde bylo implementov√°no
    // Pro uk√°zku pouze logov√°n√≠
    console.log(`üìÖ Nalezeno ${savedPredictions.length} ulo≈æen√Ωch predikc√≠`);
}

// Anal√Ωza dat (zjednodu≈°en√° implementace)
function updateAnalytics() {
    console.log('üìä Aktualizuji anal√Ωzy...');
    
    if (!globalData.historicalData || globalData.historicalData.length === 0) {
        console.log('üìä ≈Ω√°dn√° data pro anal√Ωzu');
        return;
    }
    
    // Z√°kladn√≠ statistiky
    const totalEvents = globalData.historicalData.length;
    const totalSales = globalData.historicalData
        .map(row => parseFloat(row.M || 0))
        .reduce((sum, sales) => sum + sales, 0);
    
    const avgSales = totalEvents > 0 ? totalSales / totalEvents : 0;
    
    console.log(`üìä Anal√Ωza: ${totalEvents} akc√≠, ${Math.round(totalSales)} prodej≈Ø celkem, ${Math.round(avgSales)} pr≈Ømƒõrnƒõ`);
    
    // Aktualizace UI by zde byla implementov√°na
    const overallStats = document.getElementById('overallStats');
    if (overallStats) {
        overallStats.innerHTML = `
            <div class="stat-item">
                <div class="stat-value">${totalEvents}</div>
                <div class="stat-label">Celkem akc√≠</div>
            </div>
            <div class="stat-item">
                <div class="stat-value">${formatNumber(Math.round(totalSales))}</div>
                <div class="stat-label">Celkem prodej≈Ø</div>
            </div>
            <div class="stat-item">
                <div class="stat-value">${formatNumber(Math.round(avgSales))}</div>
                <div class="stat-label">Pr≈Ømƒõrn√Ω prodej</div>
            </div>
            <div class="stat-item">
                <div class="stat-value">${formatCurrency(Math.round(totalSales * CONFIG.DONUT_PRICE))}</div>
                <div class="stat-label">Celkov√Ω obrat</div>
            </div>
        `;
    }
}

// ========================================
// HELPER FUNKCE PRO UI
// ========================================

// P≈ôep√≠n√°n√≠ sekc√≠ s animac√≠
function switchSection(sectionId) {
    // Skryt√≠ v≈°ech sekc√≠
    document.querySelectorAll('.section').forEach(section => {
        section.classList.remove('active');
        section.style.opacity = '0';
    });
    
    // Zobrazen√≠ vybran√© sekce s animac√≠
    setTimeout(() => {
        const targetSection = document.getElementById(sectionId);
        if (targetSection) {
            targetSection.classList.add('active');
            targetSection.style.opacity = '1';
            targetSection.classList.add('fade-in');
        }
    }, 150);
    
    // Speci√°ln√≠ akce pro jednotliv√© sekce
    switch (sectionId) {
        case 'calendar':
            updateCalendar();
            break;
        case 'analytics':
            updateAnalytics();
            break;
    }
}

// Roz≈°√≠≈ôen√≠ showSection funkce
const originalShowSection = showSection;
showSection = function(sectionId) {
    switchSection(sectionId);
};

// Modal pro editaci akc√≠
function openEventModal(eventId) {
    const modal = document.getElementById('eventModal');
    if (modal) {
        modal.style.display = 'flex';
        
        // Naƒçten√≠ dat akce pokud existuje
        if (eventId) {
            const savedPredictions = JSON.parse(localStorage.getItem('donuland_predictions') || '[]');
            const event = savedPredictions.find(p => p.id === eventId);
            
            if (event) {
                document.getElementById('modalEventName').value = event.eventName;
                document.getElementById('modalSales').value = event.actualSales || '';
                document.getElementById('modalNotes').value = event.notes || '';
            }
        }
    }
}

function closeModal() {
    const modal = document.getElementById('eventModal');
    if (modal) {
        modal.style.display = 'none';
    }
}

function saveEventEdit() {
    // Implementace ulo≈æen√≠ zmƒõn
    console.log('üíæ Ukl√°d√°m zmƒõny ud√°losti...');
    closeModal();
}

function deleteEvent() {
    if (confirm('Opravdu chcete smazat tuto akci?')) {
        console.log('üóëÔ∏è Ma≈æu ud√°lost...');
        closeModal();
    }
}

// ========================================
// ROZ≈†√ç≈òEN√â EVENT LISTENERY
// ========================================

// Posluchaƒçe pro pokroƒçil√© funkce
document.addEventListener('DOMContentLoaded', function() {
    // Automatick√© ulo≈æen√≠ p≈ôi zmƒõn√°ch (s debounce)
    let saveTimeout;
    
    function debouncedSave() {
        clearTimeout(saveTimeout);
        saveTimeout = setTimeout(() => {
            if (validateForm().length === 0) {
                console.log('üîÑ Auto-save...');
                // Auto-save logika by zde byla implementov√°na
            }
        }, 2000);
    }
    
    // P≈ôid√°n√≠ event listener≈Ø na v≈°echny formul√°≈ôov√© prvky
    document.querySelectorAll('input, select, textarea').forEach(element => {
        element.addEventListener('change', debouncedSave);
    });
    
    // Kl√°vesov√© zkratky
    document.addEventListener('keydown', function(e) {
        // Ctrl+S pro ulo≈æen√≠
        if (e.ctrlKey && e.key === 's') {
            e.preventDefault();
            savePrediction();
        }
        
        // Ctrl+E pro export
        if (e.ctrlKey && e.key === 'e') {
            e.preventDefault();
            exportPrediction();
        }
        
        // Escape pro zav≈ôen√≠ modalu
        if (e.key === 'Escape') {
            closeModal();
        }
    });
    
    // Kliknut√≠ mimo modal pro zav≈ôen√≠
    document.getElementById('eventModal')?.addEventListener('click', function(e) {
        if (e.target === this) {
            closeModal();
        }
    });
});

// ========================================
// UTILITY FUNKCE
// ========================================

// Validace API kl√≠ƒç≈Ø
function validateApiKey(key, type) {
    if (!key || key === 'demo') return false;
    
    switch (type) {
        case 'weather':
            return /^[a-f0-9]{32}$/i.test(key);
        case 'maps':
            return /^[A-Za-z0-9_-]{39}$/.test(key);
        default:
            return key.length > 10;
    }
}

// Form√°tov√°n√≠ ƒçasu
function formatTime(date) {
    if (typeof date === 'string') {
        date = new Date(date);
    }
    return date.toLocaleTimeString('cs-CZ', { 
        hour: '2-digit', 
        minute: '2-digit' 
    });
}

// Form√°tov√°n√≠ relativn√≠ho ƒçasu
function formatRelativeTime(date) {
    const now = new Date();
    const diff = now - new Date(date);
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    
    if (days === 0) return 'Dnes';
    if (days === 1) return 'Vƒçera';
    if (days === -1) return 'Z√≠tra';
    if (days > 0) return `P≈ôed ${days} dny`;
    return `Za ${Math.abs(days)} dn√≠`;
}

// Kontrola s√≠≈•ov√©ho p≈ôipojen√≠
function checkNetworkStatus() {
    if (!navigator.onLine) {
        showNotification('üîå Jste offline. Nƒõkter√© funkce nemus√≠ fungovat.', 'warning');
        updateStatus('offline', 'Offline re≈æim');
    }
}

// Event listenery pro s√≠≈•
window.addEventListener('online', function() {
    showNotification('üåê P≈ôipojen√≠ obnoveno', 'success');
    updateStatus('online', 'Online');
});

window.addEventListener('offline', function() {
    showNotification('üîå Ztraceno internetov√© p≈ôipojen√≠', 'warning');
    updateStatus('offline', 'Offline');
});

// ========================================
// FINALIZACE A INICIALIZACE
// ========================================

// Roz≈°√≠≈ôen√≠ inicializace UI
const originalInitializeUI = initializeUI;
initializeUI = function() {
    originalInitializeUI();
    
    // Dodateƒçn√° inicializace
    console.log('üîß Roz≈°√≠≈ôen√° inicializace UI...');
    
    // Kontrola s√≠≈•ov√©ho stavu
    checkNetworkStatus();
    
    // Naƒçten√≠ ulo≈æen√Ωch predikc√≠ pro kalend√°≈ô
    updateCalendar();
    
    // Prvotn√≠ anal√Ωza dat
    setTimeout(() => {
        if (globalData.historicalData.length > 0) {
            updateAnalytics();
        }
    }, 1000);
};

// Debug funkcionalita (pouze pro v√Ωvoj)
window.donulandDebug = {
    showConfig: () => console.table(CONFIG),
    showData: () => console.log(globalData),
    clearCache: () => {
        globalData.weatherCache.clear();
        globalData.distanceCache.clear();
        console.log('üßπ Cache vymaz√°na');
    },
    exportLogs: () => {
        const logs = {
            config: CONFIG,
            data: globalData,
            timestamp: new Date().toISOString()
        };
        downloadFile(JSON.stringify(logs, null, 2), 'donuland_debug.json', 'application/json');
    }
};

// Posledn√≠ kontrola p≈ôi naƒçten√≠
document.addEventListener('DOMContentLoaded', function() {
    console.log('üéâ Donuland Management System - Kompletnƒõ naƒçten');
    console.log('üìö Pro debug pou≈æijte: window.donulandDebug');
    
    // Validace HTML struktury
    const requiredElements = [
        'loadingScreen', 'mainApp', 'status', 'predictionResults',
        'eventName', 'category', 'city', 'eventDate'
    ];
    
    const missing = requiredElements.filter(id => !document.getElementById(id));
    if (missing.length > 0) {
        console.warn('‚ö†Ô∏è Chybƒõj√≠c√≠ HTML elementy:', missing);
    }
});

console.log('‚úÖ App.js ƒç√°st 3B naƒçtena - export/save a nastaven√≠');
