/* ========================================
   DONULAND PART 4A - Z√°kladn√≠ kalend√°≈ô CLEAN
   Opraven√° verze bez duplikac√≠
   ======================================== */

console.log('üç© Donuland Part 4A CLEAN loading...');

// ========================================
// GLOB√ÅLN√ç STAV A KONTROLA INICIALIZACE
// ========================================

// Kontroln√≠ flagy pro prevenci duplikac√≠ - OPRAVENO
if (typeof window.calendarInitialized === 'undefined') {
    window.calendarInitialized = false;
}

// Glob√°ln√≠ stav kalend√°≈ôe
const calendarState = {
    currentMonth: new Date().getMonth(),
    currentYear: new Date().getFullYear(),
    events: []
};

// Paleta barev pro ud√°losti
const EVENT_COLORS = [
    '#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#ffeaa7', '#dda0dd', 
    '#ff9ff3', '#feca57', '#ff7675', '#74b9ff', '#a29bfe', '#fd79a8'
];

let eventColorIndex = 0;

// ========================================
// UTILITY FUNKCE
// ========================================

// Parsov√°n√≠ data z r≈Øzn√Ωch form√°t≈Ø
function parseDate(dateStr) {
    if (!dateStr) return null;
    if (dateStr instanceof Date) return dateStr;
    
    // YYYY-MM-DD form√°t
    if (dateStr.match(/^\d{4}-\d{2}-\d{2}$/)) {
        return new Date(dateStr + 'T12:00:00');
    }
    
    // DD.MM.YYYY form√°t
    if (dateStr.match(/^\d{1,2}\.\d{1,2}\.\d{4}$/)) {
        const [day, month, year] = dateStr.split('.');
        return new Date(year, month - 1, day, 12, 0, 0);
    }
    
    return new Date(dateStr);
}

// Form√°tov√°n√≠ data na YYYY-MM-DD
function formatDateKey(date) {
    if (!date) return '';
    return date.getFullYear() + '-' + 
           String(date.getMonth() + 1).padStart(2, '0') + '-' + 
           String(date.getDate()).padStart(2, '0');
}

// Z√≠sk√°n√≠ unik√°tn√≠ barvy pro ud√°lost
function getUniqueEventColor() {
    const color = EVENT_COLORS[eventColorIndex % EVENT_COLORS.length];
    eventColorIndex++;
    return color;
}

// ========================================
// BLACKLIST SMAZAN√ùCH UD√ÅLOST√ç
// ========================================

// Spr√°va blacklistu smazan√Ωch ud√°lost√≠
const deletedEventsManager = {
    // Z√≠sk√°n√≠ blacklistu z localStorage
    getDeletedEvents() {
        try {
            return JSON.parse(localStorage.getItem('donuland_deleted_events') || '[]');
        } catch (error) {
            console.warn('Error loading deleted events blacklist:', error);
            return [];
        }
    },
    
    // P≈ôid√°n√≠ ud√°losti do blacklistu
    addToBlacklist(eventId) {
        const deletedEvents = this.getDeletedEvents();
        if (!deletedEvents.includes(eventId)) {
            deletedEvents.push(eventId);
            localStorage.setItem('donuland_deleted_events', JSON.stringify(deletedEvents));
            console.log(`üóëÔ∏è Added to blacklist: ${eventId}`);
        }
    },
    
    // Kontrola, zda je ud√°lost v blacklistu
    isDeleted(eventId) {
        return this.getDeletedEvents().includes(eventId);
    },
    
    // Odstranƒõn√≠ z blacklistu (pro p≈ô√≠pad pot≈ôeby obnoven√≠)
    removeFromBlacklist(eventId) {
        const deletedEvents = this.getDeletedEvents();
        const index = deletedEvents.indexOf(eventId);
        if (index > -1) {
            deletedEvents.splice(index, 1);
            localStorage.setItem('donuland_deleted_events', JSON.stringify(deletedEvents));
            console.log(`‚ôªÔ∏è Removed from blacklist: ${eventId}`);
        }
    },
    
    // Vyƒçi≈°tƒõn√≠ star√Ωch z√°znam≈Ø (voliteln√©)
    cleanupOldEntries() {
        // M≈Ø≈æeme pozdƒõji implementovat ƒçi≈°tƒõn√≠ star≈°√≠ch ne≈æ X dn≈Ø
    }
};

// ========================================
// NAƒå√çT√ÅN√ç UD√ÅLOST√ç S PODPOROU SLUƒåOV√ÅN√ç A BLACKLISTU
// ========================================

// Hlavn√≠ funkce pro naƒçten√≠ v≈°ech ud√°lost√≠ s inteligentn√≠m sluƒçov√°n√≠m a blacklist kontrolou
function loadCalendarEvents() {
    console.log('üìÖ Loading calendar events with smart merging and blacklist...');
    
    calendarState.events = [];
    eventColorIndex = 0;
    
    // Z√≠sk√°n√≠ blacklistu smazan√Ωch ud√°lost√≠
    const deletedEvents = deletedEventsManager.getDeletedEvents();
    console.log(`üóëÔ∏è Blacklist contains ${deletedEvents.length} deleted events`);
    
    // 1. Historick√° data ze Sheets (z√°kladn√≠ ud√°losti) - kontrola blacklistu
    if (typeof globalState !== 'undefined' && globalState.historicalData) {
        globalState.historicalData.forEach((record, index) => {
            const eventId = 'historical_' + index;
            
            // KONTROLA BLACKLISTU - p≈ôeskoƒçit smazan√© ud√°losti
            if (deletedEventsManager.isDeleted(eventId)) {
                console.log(`‚è≠Ô∏è Skipping deleted historical event: ${eventId}`);
                return;
            }
            
            const startDate = parseDate(record.dateFrom);
            const endDate = parseDate(record.dateTo || record.dateFrom);
            
            if (startDate) {
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                
                calendarState.events.push({
                    id: eventId,
                    title: record.eventName || 'Nezn√°m√° akce',
                    startDate: startDate,
                    endDate: endDate,
                    category: record.category || 'ostatn√≠',
                    city: record.city || '',
                    status: endDate < today ? 'completed' : 'planned',
                    source: 'historical',
                    color: getUniqueEventColor(),
                    hasRealData: true,
                    hasPrediction: false,
                    data: {
                        visitors: record.visitors || 0,
                        sales: record.sales || 0,
                        competition: record.competition || 2,
                        rating: record.rating || 0,
                        notes: record.notes || '',
                        businessModel: record.businessModel || '',
                        price: record.price || 110
                    },
                    prediction: null // Bude naplnƒõno p≈ôi sluƒçov√°n√≠
                });
            }
        });
    }
    
    // 2. Sluƒçov√°n√≠ ulo≈æen√Ωch predikc√≠ s existuj√≠c√≠mi akcemi - kontrola blacklistu
    try {
        const savedPredictions = JSON.parse(localStorage.getItem('donuland_predictions') || '[]');
        savedPredictions.forEach((prediction, index) => {
            const predictionId = 'prediction_' + index;
            
            // KONTROLA BLACKLISTU - p≈ôeskoƒçit smazan√© predikce
            if (deletedEventsManager.isDeleted(predictionId)) {
                console.log(`‚è≠Ô∏è Skipping deleted prediction: ${predictionId}`);
                return;
            }
            
            if (prediction.formData) {
                mergePredictionWithEvents(prediction, predictionId);
            }
        });
    } catch (error) {
        console.warn('‚ö†Ô∏è Error loading predictions:', error);
    }
    
    // 3. Sluƒçov√°n√≠ aktu√°ln√≠ predikce - kontrola blacklistu
    if (typeof globalState !== 'undefined' && globalState.lastPrediction && 
        !globalState.lastPrediction.saved && globalState.lastPrediction.formData) {
        
        const currentPredictionId = 'current_prediction';
        
        // KONTROLA BLACKLISTU - p≈ôeskoƒçit smazanou aktu√°ln√≠ predikci
        if (!deletedEventsManager.isDeleted(currentPredictionId)) {
            mergePredictionWithEvents(globalState.lastPrediction, currentPredictionId);
        } else {
            console.log(`‚è≠Ô∏è Skipping deleted current prediction: ${currentPredictionId}`);
        }
    }
    
    console.log(`‚úÖ Loaded ${calendarState.events.length} calendar events (with smart merging and blacklist filtering)`);
    console.log(`üóëÔ∏è Filtered out ${deletedEvents.length} deleted events`);
}

// Funkce pro sluƒçov√°n√≠ predikce s existuj√≠c√≠ akc√≠ nebo vytvo≈ôen√≠ nov√©
function mergePredictionWithEvents(prediction, predictionId) {
    const formData = prediction.formData;
    const startDate = parseDate(formData.eventDateFrom);
    const endDate = parseDate(formData.eventDateTo);
    
    if (!startDate) return;
    
    // Hled√°n√≠ existuj√≠c√≠ akce se stejn√Ωm n√°zvem a p≈ôekr√Ωvaj√≠c√≠m se datem
    const existingEvent = calendarState.events.find(event => {
        const nameMatch = normalizeEventName(event.title) === normalizeEventName(formData.eventName);
        const dateOverlap = datesOverlap(event.startDate, event.endDate, startDate, endDate);
        return nameMatch && dateOverlap;
    });
    
    if (existingEvent) {
        // SLOUƒåIT s existuj√≠c√≠ akc√≠
        console.log(`üîÑ Merging prediction with existing event: ${existingEvent.title}`);
        
        existingEvent.hasPrediction = true;
        existingEvent.source = 'merged'; // Oznaƒçit jako slouƒçenou
        existingEvent.prediction = {
            id: predictionId,
            predictedSales: prediction.prediction?.predictedSales || 0,
            confidence: prediction.prediction?.confidence || 0,
            expectedRevenue: prediction.businessResults?.revenue || 0,
            expectedProfit: prediction.businessResults?.profit || 0,
            businessModel: formData.businessModel || '',
            createdAt: prediction.timestamp || new Date().toISOString(),
            formData: formData
        };
        
        // Aktualizovat nƒõkter√© √∫daje z predikce pokud nejsou v historick√Ωch datech
        if (!existingEvent.data.visitors && formData.visitors) {
            existingEvent.data.visitors = formData.visitors;
        }
        if (!existingEvent.data.businessModel && formData.businessModel) {
            existingEvent.data.businessModel = formData.businessModel;
        }
        
    } else {
        // VYTVO≈òIT novou akci (pouze predikce)
        console.log(`‚ûï Creating new prediction event: ${formData.eventName}`);
        
        calendarState.events.push({
            id: predictionId,
            title: formData.eventName || 'Predikce',
            startDate: startDate,
            endDate: endDate,
            category: formData.category || 'ostatn√≠',
            city: formData.city || '',
            status: 'planned',
            source: 'prediction',
            color: getUniqueEventColor(),
            hasRealData: false,
            hasPrediction: true,
            data: {
                visitors: formData.visitors || 0,
                predictedSales: prediction.prediction?.predictedSales || 0,
                confidence: prediction.prediction?.confidence || 0,
                expectedRevenue: prediction.businessResults?.revenue || 0,
                expectedProfit: prediction.businessResults?.profit || 0,
                businessModel: formData.businessModel || '',
                price: formData.price || 110,
                notes: ''
            },
            prediction: {
                id: predictionId,
                predictedSales: prediction.prediction?.predictedSales || 0,
                confidence: prediction.prediction?.confidence || 0,
                expectedRevenue: prediction.businessResults?.revenue || 0,
                expectedProfit: prediction.businessResults?.profit || 0,
                businessModel: formData.businessModel || '',
                createdAt: prediction.timestamp || new Date().toISOString(),
                formData: formData
            }
        });
    }
}

// Pomocn√© funkce pro sluƒçov√°n√≠
function normalizeEventName(name) {
    if (!name) return '';
    return name.toLowerCase()
        .replace(/[^\w\s]/g, '') // Odstranit speci√°ln√≠ znaky
        .replace(/\s+/g, ' ')    // Normalizovat mezery
        .trim();
}

function datesOverlap(start1, end1, start2, end2) {
    return start1 <= end2 && start2 <= end1;
}

// ========================================
// GENEROV√ÅN√ç KALEND√Å≈òE
// ========================================

// Aktualizace zobrazen√≠ aktu√°ln√≠ho mƒõs√≠ce
function updateCurrentMonthDisplay() {
    const monthNames = [
        'Leden', '√önor', 'B≈ôezen', 'Duben', 'Kvƒõten', 'ƒåerven',
        'ƒåervenec', 'Srpen', 'Z√°≈ô√≠', '≈ò√≠jen', 'Listopad', 'Prosinec'
    ];
    
    const currentMonthElement = document.getElementById('currentMonth');
    if (currentMonthElement) {
        currentMonthElement.textContent = `${monthNames[calendarState.currentMonth]} ${calendarState.currentYear}`;
    }
}

// Generov√°n√≠ kalend√°≈ôov√© m≈ô√≠≈æky
function generateCalendarGrid() {
    const calendarGrid = document.getElementById('calendarGrid');
    if (!calendarGrid) return;
    
    calendarGrid.innerHTML = '';
    
    // Hlaviƒçka s n√°zvy dn≈Ø
    const dayNames = ['Po', '√öt', 'St', 'ƒåt', 'P√°', 'So', 'Ne'];
    dayNames.forEach(dayName => {
        const header = document.createElement('div');
        header.className = 'calendar-header';
        header.textContent = dayName;
        calendarGrid.appendChild(header);
    });
    
    // Prvn√≠ den mƒõs√≠ce
    const firstDay = new Date(calendarState.currentYear, calendarState.currentMonth, 1);
    const lastDay = new Date(calendarState.currentYear, calendarState.currentMonth + 1, 0);
    const daysInMonth = lastDay.getDate();
    
    // Kolik pr√°zdn√Ωch bunƒõk na zaƒç√°tku (pondƒõl√≠ = 0)
    let startEmpty = firstDay.getDay() - 1;
    if (startEmpty < 0) startEmpty = 6; // Nedƒõle
    
    // P≈ôedchoz√≠ mƒõs√≠c
    const prevMonth = new Date(calendarState.currentYear, calendarState.currentMonth, 0);
    for (let i = startEmpty - 1; i >= 0; i--) {
        const dayNumber = prevMonth.getDate() - i;
        const dayCell = createDayCell(dayNumber, true, calendarState.currentMonth - 1);
        calendarGrid.appendChild(dayCell);
    }
    
    // Aktu√°ln√≠ mƒõs√≠c
    for (let day = 1; day <= daysInMonth; day++) {
        const dayCell = createDayCell(day, false, calendarState.currentMonth);
        calendarGrid.appendChild(dayCell);
    }
    
    // N√°sleduj√≠c√≠ mƒõs√≠c (do 42 bunƒõk)
    const totalCells = calendarGrid.children.length - 7; // -7 pro hlaviƒçku
    const remainingCells = 42 - totalCells;
    for (let day = 1; day <= remainingCells; day++) {
        const dayCell = createDayCell(day, true, calendarState.currentMonth + 1);
        calendarGrid.appendChild(dayCell);
    }
    
    displayEventsInCalendar();
}

// Vytvo≈ôen√≠ bu≈àky dne
function createDayCell(dayNumber, isOtherMonth, month) {
    const dayCell = document.createElement('div');
    dayCell.className = 'calendar-day';
    
    if (isOtherMonth) {
        dayCell.classList.add('other-month');
    }
    
    // Datum bu≈àky
    const cellDate = new Date(calendarState.currentYear, month, dayNumber);
    const dateKey = formatDateKey(cellDate);
    dayCell.dataset.date = dateKey;
    
    // Dnes
    const today = new Date();
    if (formatDateKey(cellDate) === formatDateKey(today)) {
        dayCell.classList.add('today');
    }
    
    // ƒå√≠slo dne
    const dayNumberEl = document.createElement('div');
    dayNumberEl.className = 'day-number';
    dayNumberEl.textContent = dayNumber;
    dayCell.appendChild(dayNumberEl);
    
    // Kontejner pro ud√°losti
    const eventsContainer = document.createElement('div');
    eventsContainer.className = 'day-events';
    dayCell.appendChild(eventsContainer);
    
    // Klik na den
    dayCell.addEventListener('click', () => {
        showDayModal(cellDate);
    });
    
    return dayCell;
}

// Zobrazen√≠ ud√°lost√≠ v kalend√°≈ôi
function displayEventsInCalendar() {
    // Vyƒçi≈°tƒõn√≠ v≈°ech ud√°lost√≠
    document.querySelectorAll('.day-events').forEach(container => {
        container.innerHTML = '';
    });
    
    document.querySelectorAll('.calendar-day').forEach(day => {
        day.classList.remove('has-events');
    });
    
    // Seskupen√≠ ud√°lost√≠ podle datum≈Ø
    const eventsByDate = {};
    
    calendarState.events.forEach(event => {
        const startDate = event.startDate;
        const endDate = event.endDate;
        
        // Pro v√≠cedenn√≠ ud√°losti
        const currentDate = new Date(startDate);
        while (currentDate <= endDate) {
            const dateKey = formatDateKey(currentDate);
            
            if (!eventsByDate[dateKey]) {
                eventsByDate[dateKey] = [];
            }
            
            eventsByDate[dateKey].push(event);
            currentDate.setDate(currentDate.getDate() + 1);
        }
    });
    
    // Zobrazen√≠ v kalend√°≈ôi
    Object.entries(eventsByDate).forEach(([dateKey, events]) => {
        const dayCell = document.querySelector(`[data-date="${dateKey}"]`);
        if (!dayCell) return;
        
        const eventsContainer = dayCell.querySelector('.day-events');
        if (!eventsContainer) return;
        
        dayCell.classList.add('has-events');
        
        // Zobrazit max 3 ud√°losti + poƒçet zb√Ωvaj√≠c√≠ch
        const visibleEvents = events.slice(0, 3);
        const hiddenCount = events.length - visibleEvents.length;
        
        visibleEvents.forEach(event => {
            const eventElement = document.createElement('div');
            eventElement.className = 'event-item';
            eventElement.style.backgroundColor = event.color;
            eventElement.style.color = '#fff';
            eventElement.textContent = event.title;
            eventElement.title = `${event.title} - ${event.city}`;
            
            // Ikona pro dokonƒçen√© akce
            if (event.status === 'completed') {
                eventElement.textContent = '‚úì ' + event.title;
            }
            
            eventsContainer.appendChild(eventElement);
        });
        
        // Poƒçet dal≈°√≠ch akc√≠
        if (hiddenCount > 0) {
            const moreElement = document.createElement('div');
            moreElement.className = 'event-item more-events';
            moreElement.style.backgroundColor = '#6c757d';
            moreElement.style.color = '#fff';
            moreElement.textContent = `+${hiddenCount} dal≈°√≠`;
            eventsContainer.appendChild(moreElement);
        }
    });
}

// ========================================
// NAVIGACE KALEND√Å≈òE
// ========================================

// Zmƒõna mƒõs√≠ce
function changeMonth(direction) {
    calendarState.currentMonth += direction;
    
    if (calendarState.currentMonth > 11) {
        calendarState.currentMonth = 0;
        calendarState.currentYear++;
    } else if (calendarState.currentMonth < 0) {
        calendarState.currentMonth = 11;
        calendarState.currentYear--;
    }
    
    updateCurrentMonthDisplay();
    generateCalendarGrid();
    
    console.log(`üìÖ Calendar changed to: ${calendarState.currentMonth + 1}/${calendarState.currentYear}`);
}

// P≈ôechod na dne≈°n√≠ mƒõs√≠c
function goToToday() {
    const today = new Date();
    calendarState.currentMonth = today.getMonth();
    calendarState.currentYear = today.getFullYear();
    
    updateCurrentMonthDisplay();
    generateCalendarGrid();
    
    if (typeof showNotification === 'function') {
        showNotification('üìÖ P≈ôe≈°li jste na aktu√°ln√≠ mƒõs√≠c', 'info', 2000);
    }
}

// ========================================
// MODAL FUNKCIONALITA
// ========================================

// Modal se v≈°emi akcemi dan√©ho dne
function showDayModal(date) {
    const dateKey = formatDateKey(date);
    const dayEvents = calendarState.events.filter(event => {
        const startKey = formatDateKey(event.startDate);
        const endKey = formatDateKey(event.endDate);
        return dateKey >= startKey && dateKey <= endKey;
    });
    
    if (dayEvents.length === 0) {
        if (typeof showNotification === 'function') {
            showNotification('üìÖ ≈Ω√°dn√© ud√°losti v tomto dni', 'info', 2000);
        }
        return;
    }
    
    // Vytvo≈ôen√≠ modalu
    const modal = document.createElement('div');
    modal.className = 'modal day-modal';
    modal.style.display = 'flex';
    
    const modalContent = document.createElement('div');
    modalContent.className = 'modal-content';
    
    modalContent.innerHTML = `
        <div class="modal-header">
            <h3>üìÖ ${date.toLocaleDateString('cs-CZ', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
            })} (${dayEvents.length} akc√≠)</h3>
            <button class="modal-close" onclick="this.closest('.modal').remove()">&times;</button>
        </div>
        <div class="modal-body">
            <div class="day-events-list"></div>
        </div>
    `;
    
    const eventsList = modalContent.querySelector('.day-events-list');
    
    dayEvents.forEach(event => {
        const eventItem = document.createElement('div');
        eventItem.className = 'day-event-item';
        eventItem.style.borderLeft = `4px solid ${event.color}`;
        
        const statusIcon = event.status === 'completed' ? '‚úÖ' : 'üìÖ';
        const sourceIcon = event.source === 'historical' ? 'üìà' : event.source === 'prediction' ? 'üíæ' : 'üéØ';
        
        eventItem.innerHTML = `
            <div class="event-header">
                <h4>${escapeHtml(event.title)}</h4>
                <div class="event-meta">
                    ${statusIcon} ${event.status === 'completed' ? 'Dokonƒçeno' : 'Napl√°nov√°no'} ‚Ä¢ 
                    ${sourceIcon} ${event.source === 'historical' ? 'Historick√° data' : 'Predikce'} ‚Ä¢ 
                    üìç ${escapeHtml(event.city)} ‚Ä¢ üìã ${escapeHtml(event.category)}
                </div>
            </div>
            <div class="event-stats">
                ${event.data.visitors ? `<span>üë• ${formatNumber(event.data.visitors)} n√°v≈°tƒõvn√≠k≈Ø</span>` : ''}
                ${event.data.sales ? `<span>üç© ${formatNumber(event.data.sales)} ks prod√°no</span>` : ''}
                ${event.data.predictedSales ? `<span>üéØ ${formatNumber(event.data.predictedSales)} ks predikce</span>` : ''}
                ${event.prediction?.predictedSales ? `<span>ü§ñ ${formatNumber(event.prediction.predictedSales)} ks AI predikce</span>` : ''}
            </div>
            <div class="event-actions">
                <button class="btn btn-detail" onclick="showEventDetail('${event.id}')">üìã Detail</button>
                ${event.hasPrediction ? `<button class="btn btn-export" onclick="exportEventToSheets('${event.id}')">üì§ Do Sheets</button>` : ''}
            </div>
        `;
        
        eventsList.appendChild(eventItem);
    });
    
    modal.appendChild(modalContent);
    document.body.appendChild(modal);
    
    // Zav≈ôen√≠ modalu
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.remove();
        }
    });
    
    const escHandler = (e) => {
        if (e.key === 'Escape') {
            modal.remove();
            document.removeEventListener('keydown', escHandler);
        }
    };
    document.addEventListener('keydown', escHandler);
}

// Detail konkr√©tn√≠ akce s mo≈ænost√≠ editace
function showEventDetail(eventId) {
    const event = calendarState.events.find(e => e.id === eventId);
    if (!event) return;
    
    // Zav≈ô√≠t p≈ôedchoz√≠ modal
    document.querySelectorAll('.day-modal').forEach(modal => modal.remove());
    
    const modal = document.createElement('div');
    modal.className = 'modal event-detail-modal';
    modal.style.display = 'flex';
    
    const isCompleted = event.status === 'completed';
    const hasPrediction = event.hasPrediction;
    const hasRealData = event.hasRealData;
    
    // Urƒçen√≠ zdroj≈Ø dat
    let sourceInfo = '';
    if (hasRealData && hasPrediction) {
        sourceInfo = 'üìä Historick√° data + ü§ñ AI predikce';
    } else if (hasRealData) {
        sourceInfo = 'üìä Historick√° data ze Sheets';
    } else if (hasPrediction) {
        sourceInfo = 'ü§ñ AI predikce';
    }
    
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>üìã ${escapeHtml(event.title)}</h3>
                <button class="modal-close" onclick="this.closest('.modal').remove()">&times;</button>
            </div>
            <div class="modal-body">
                <div class="event-source-info">
                    <p><strong>Zdroj dat:</strong> ${sourceInfo}</p>
                    ${hasPrediction ? `<p><small>AI predikce vytvo≈ôena: ${new Date(event.prediction.createdAt).toLocaleString('cs-CZ')}</small></p>` : ''}
                </div>
                
                <div class="event-detail-grid">
                    <div class="detail-item">
                        <label>N√°zev akce:</label>
                        <span>${escapeHtml(event.title)}</span>
                    </div>
                    <div class="detail-item">
                        <label>Kategorie:</label>
                        <span>${escapeHtml(event.category)}</span>
                    </div>
                    <div class="detail-item">
                        <label>Mƒõsto:</label>
                        <span>${escapeHtml(event.city)}</span>
                    </div>
                    <div class="detail-item">
                        <label>Datum:</label>
                        <span>${event.startDate.toLocaleDateString('cs-CZ')} - ${event.endDate.toLocaleDateString('cs-CZ')}</span>
                    </div>
                    <div class="detail-item">
                        <label>N√°v≈°tƒõvn√≠ci:</label>
                        <span>${formatNumber(event.data.visitors)}</span>
                    </div>
                    
                    ${hasRealData && event.data.sales ? `
                        <div class="detail-item historical-data">
                            <label>üìä Re√°lnƒõ prod√°no:</label>
                            <span><strong>${formatNumber(event.data.sales)} ks</strong></span>
                        </div>
                        <div class="detail-item historical-data">
                            <label>üìä Re√°ln√° konverze:</label>
                            <span><strong>${event.data.visitors > 0 ? ((event.data.sales / event.data.visitors) * 100).toFixed(1) : '0'}%</strong></span>
                        </div>
                    ` : ''}
                    
                    ${hasPrediction ? `
                        <div class="detail-item prediction-data">
                            <label>ü§ñ AI predikce prodeje:</label>
                            <span><strong>${formatNumber(event.prediction.predictedSales)} ks</strong></span>
                        </div>
                        <div class="detail-item prediction-data">
                            <label>ü§ñ Confidence predikce:</label>
                            <span><strong>${event.prediction.confidence}%</strong></span>
                        </div>
                        <div class="detail-item prediction-data">
                            <label>ü§ñ Oƒçek√°van√Ω obrat:</label>
                            <span><strong>${formatCurrency(event.prediction.expectedRevenue)}</strong></span>
                        </div>
                        <div class="detail-item prediction-data">
                            <label>ü§ñ Oƒçek√°van√Ω zisk:</label>
                            <span><strong>${formatCurrency(event.prediction.expectedProfit)}</strong></span></span>
                        </div>
                    ` : ''}
                    
                    ${hasRealData && hasPrediction && event.data.sales > 0 ? `
                        <div class="detail-item comparison-data">
                            <label>üìà P≈ôesnost predikce:</label>
                            <span><strong>${calculatePredictionAccuracy(event.prediction.predictedSales, event.data.sales)}%</strong></span>
                        </div>
                    ` : ''}
                    
                    <div class="detail-item full-width">
                        <label>Pozn√°mky:</label>
                        <textarea id="eventNotes" rows="3" placeholder="P≈ôidat pozn√°mku k akci...">${escapeHtml(event.data.notes || '')}</textarea>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-save" onclick="saveEventChanges('${event.id}')">üíæ Ulo≈æit zmƒõny</button>
                ${hasPrediction ? `<button class="btn btn-export" onclick="exportEventToSheets('${event.id}')">üì§ Export do Sheets</button>` : ''}
                <button class="btn btn-delete" onclick="deleteEvent('${event.id}')">üóëÔ∏è Smazat akci</button>
                <button class="btn" onclick="this.closest('.modal').remove()">Zav≈ô√≠t</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
}

// V√Ωpoƒçet p≈ôesnosti predikce
function calculatePredictionAccuracy(predicted, actual) {
    if (!predicted || !actual) return 0;
    const accuracy = 100 - Math.abs((predicted - actual) / actual) * 100;
    return Math.max(0, Math.round(accuracy));
}

// Ulo≈æen√≠ zmƒõn akce
function saveEventChanges(eventId) {
    const event = calendarState.events.find(e => e.id === eventId);
    if (!event) return;
    
    const modal = document.querySelector('.event-detail-modal');
    const notesTextarea = modal.querySelector('#eventNotes');
    
    if (notesTextarea) {
        event.data.notes = notesTextarea.value.trim();
        
        // Aktualizovat v localStorage pokud je to predikce
        if (event.hasPrediction && event.prediction.id.startsWith('prediction_')) {
            updatePredictionInStorage(event);
        }
        
        if (typeof showNotification === 'function') {
            showNotification('‚úÖ Zmƒõny ulo≈æeny', 'success', 2000);
        }
        
        modal.remove();
    }
}

// Aktualizace predikce v localStorage
function updatePredictionInStorage(event) {
    try {
        const savedPredictions = JSON.parse(localStorage.getItem('donuland_predictions') || '[]');
        const predictionIndex = parseInt(event.prediction.id.replace('prediction_', ''));
        
        if (savedPredictions[predictionIndex]) {
            savedPredictions[predictionIndex].notes = event.data.notes;
            savedPredictions[predictionIndex].updatedAt = new Date().toISOString();
            localStorage.setItem('donuland_predictions', JSON.stringify(savedPredictions));
        }
    } catch (error) {
        console.error('Error updating prediction in storage:', error);
    }
}

// Smaz√°n√≠ akce s blacklist podporou
function deleteEvent(eventId) {
    const event = calendarState.events.find(e => e.id === eventId);
    if (!event) return;
    
    const confirmMessage = `Opravdu chcete smazat akci "${event.title}"?` +
        (event.hasPrediction ? '\n\nT√≠m se sma≈æe i souvisej√≠c√≠ AI predikce.' : '') +
        (event.hasRealData ? '\n\nHistorick√° data ze Sheets z≈Østanou zachov√°na, ale akce se ji≈æ nebude zobrazovat v kalend√°≈ôi.' : '') +
        '\n\nPozor: Smazan√° akce se ji≈æ neobnov√≠ ani po refresh str√°nky.';
    
    if (!confirm(confirmMessage)) return;
    
    // üóëÔ∏è P≈òIDAT DO BLACKLISTU - toto je kl√≠ƒçov√° zmƒõna
    deletedEventsManager.addToBlacklist(eventId);
    
    // Pokud je to slouƒçen√° akce, p≈ôidat do blacklistu i souvisej√≠c√≠ predikci
    if (event.hasPrediction && event.prediction && event.prediction.id !== eventId) {
        deletedEventsManager.addToBlacklist(event.prediction.id);
        console.log(`üóëÔ∏è Also blacklisted related prediction: ${event.prediction.id}`);
    }
    
    // Odstranit z kalend√°≈ôe (aktu√°ln√≠ zobrazen√≠)
    calendarState.events = calendarState.events.filter(e => e.id !== eventId);
    
    // Smazat z localStorage pokud je to predikce
    if (event.hasPrediction && event.prediction.id.startsWith('prediction_')) {
        deletePredictionFromStorage(event.prediction.id);
    }
    
    // Smazat aktu√°ln√≠ predikci z globalState pokud je to current_prediction
    if (eventId === 'current_prediction' && typeof globalState !== 'undefined' && globalState.lastPrediction) {
        globalState.lastPrediction = null;
        console.log('üóëÔ∏è Cleared current prediction from globalState');
    }
    
    // Refresh kalend√°≈ô
    generateCalendarGrid();
    
    // Zav≈ô√≠t modal
    document.querySelector('.event-detail-modal')?.remove();
    
    if (typeof showNotification === 'function') {
        showNotification(`üóëÔ∏è Akce "${event.title}" byla trvale smaz√°na`, 'success', 4000);
    }
    
    console.log(`üóëÔ∏è Event permanently deleted and blacklisted: ${event.title} (${eventId})`);
    
    // Emit event pro ostatn√≠ ƒç√°sti syst√©mu
    if (typeof eventBus !== 'undefined') {
        eventBus.emit('eventDeleted', { 
            eventId: eventId, 
            eventTitle: event.title,
            timestamp: Date.now()
        });
    }
}

// Smaz√°n√≠ predikce z localStorage
function deletePredictionFromStorage(predictionId) {
    try {
        const savedPredictions = JSON.parse(localStorage.getItem('donuland_predictions') || '[]');
        const predictionIndex = parseInt(predictionId.replace('prediction_', ''));
        
        if (savedPredictions[predictionIndex]) {
            savedPredictions.splice(predictionIndex, 1);
            localStorage.setItem('donuland_predictions', JSON.stringify(savedPredictions));
        }
    } catch (error) {
        console.error('Error deleting prediction from storage:', error);
    }
}

// Export akce do Google Sheets (placeholder funkce)
function exportEventToSheets(eventId) {
    const event = calendarState.events.find(e => e.id === eventId);
    if (!event || !event.hasPrediction) return;
    
    // TODO: Implementovat skuteƒçn√Ω export do Google Sheets
    console.log('üì§ Exporting to Sheets:', event);
    
    if (typeof showNotification === 'function') {
        showNotification('üì§ Export do Sheets - funkce bude implementov√°na pozdƒõji', 'info', 4000);
    }
    
    // Placeholder pro budouc√≠ implementaci
    // exportPredictionToGoogleSheets(event.prediction, event);
}

// ========================================
// HLAVN√ç INICIALIZACE
// ========================================

// Hlavn√≠ inicializaƒçn√≠ funkce - OPRAVENO
function initializeCalendar() {
    if (window.calendarInitialized) {
        console.log('‚ö†Ô∏è Calendar already initialized, skipping...');
        return;
    }
    
    console.log('üîß Initializing calendar...');
    
    loadCalendarEvents();
    updateCurrentMonthDisplay();
    generateCalendarGrid();
    
    window.calendarInitialized = true;
    console.log('‚úÖ Calendar initialization complete');
}

// ========================================
// EVENT LISTENERS
// ========================================

// Event listenery pro extern√≠ syst√©my
if (typeof eventBus !== 'undefined') {
    
    eventBus.on('dataLoaded', () => {
        console.log('üìä Data loaded, updating calendar');
        setTimeout(() => {
            if (window.calendarInitialized) {
                loadCalendarEvents();
                generateCalendarGrid();
            } else {
                initializeCalendar();
            }
        }, 500);
    });
    
    eventBus.on('predictionSaved', () => {
        console.log('üíæ Prediction saved, updating calendar');
        setTimeout(() => {
            loadCalendarEvents();
            if (window.calendarInitialized) {
                generateCalendarGrid();
            }
        }, 500);
    });
    
    eventBus.on('calendarRequested', () => {
        console.log('üìÖ Calendar section requested');
        if (!window.calendarInitialized) {
            initializeCalendar();
        }
    });
}

// DOM ready listener
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
        if (document.getElementById('calendar') && !window.calendarInitialized) {
            console.log('üìÖ DOM ready - calendar section found');
            initializeCalendar();
        }
    }, 2000);
});

// ========================================
// GLOB√ÅLN√ç EXPORT
// ========================================

// Export funkc√≠ pro HTML onclick handlery
if (typeof window !== 'undefined') {
    window.changeMonth = changeMonth;
    window.goToToday = goToToday;
    window.showEventDetail = showEventDetail;
    window.initializeCalendar = initializeCalendar;
    window.saveEventChanges = saveEventChanges;
    window.deleteEvent = deleteEvent;
    window.exportEventToSheets = exportEventToSheets;
    
    // Debug - roz≈°√≠≈ôen√Ω
    window.calendarDebug = {
        state: calendarState,
        initialized: () => window.calendarInitialized,
        reinit: () => {
            window.calendarInitialized = false;
            initializeCalendar();
        },
        findDuplicates: () => {
            // Debug funkce pro nalezen√≠ duplicit
            const duplicates = [];
            calendarState.events.forEach((event, index) => {
                const duplicateEvents = calendarState.events.filter((e, i) => 
                    i !== index && 
                    normalizeEventName(e.title) === normalizeEventName(event.title) &&
                    datesOverlap(e.startDate, e.endDate, event.startDate, event.endDate)
                );
                if (duplicateEvents.length > 0) {
                    duplicates.push({ original: event, duplicates: duplicateEvents });
                }
            });
            return duplicates;
        },
        // Nov√© debug funkce pro blacklist
        blacklist: {
            getAll: () => deletedEventsManager.getDeletedEvents(),
            add: (eventId) => deletedEventsManager.addToBlacklist(eventId),
            remove: (eventId) => deletedEventsManager.removeFromBlacklist(eventId),
            clear: () => {
                localStorage.removeItem('donuland_deleted_events');
                console.log('üßπ Blacklist cleared');
            },
            restore: (eventId) => {
                deletedEventsManager.removeFromBlacklist(eventId);
                loadCalendarEvents();
                generateCalendarGrid();
                console.log(`‚ôªÔ∏è Event restored: ${eventId}`);
            }
        }
    };
}

console.log('‚úÖ Donuland Part 4A CLEAN loaded successfully');
console.log('üìÖ Basic calendar features: Events display, Navigation, Modal details');
console.log('üîÑ Smart merging: Automatic merging of predictions with historical events');
console.log('üóëÔ∏è Persistent deletion: Deleted events stay deleted after page refresh');
console.log('üîß Debug: window.calendarDebug available with blacklist management');
/* ========================================
   DONULAND PART 4B - Filtry a mƒõs√≠ƒçn√≠ p≈ôehled
   Pokraƒçov√°n√≠ Part 4A - bez duplikac√≠
   ======================================== */

console.log('üç© Donuland Part 4B loading...');

// ========================================
// STAV FILTR≈Æ A VYHLED√ÅV√ÅN√ç
// ========================================

// Stav filtr≈Ø - roz≈°√≠≈ôen√Ω pro sluƒçovan√© akce
const calendarFilters = {
    category: '',
    status: '',
    source: '',
    searchText: '',
    hasRealData: '', // nov√Ω filtr
    hasPrediction: '' // nov√Ω filtr
};

// Filtrovan√© ud√°losti
let filteredEvents = [];

// ========================================
// INICIALIZACE FILTR≈Æ
// ========================================

// Inicializace dropdown filtr≈Ø s podporou sluƒçovan√Ωch akc√≠
function initializeCalendarFilters() {
    console.log('üîç Initializing calendar filters...');
    
    // Kategorie filter
    const categoryFilter = document.getElementById('categoryFilter');
    if (categoryFilter) {
        categoryFilter.innerHTML = '<option value="">üìã V≈°echny kategorie</option>';
        
        // Dynamick√© kategorie z aktu√°ln√≠ch ud√°lost√≠
        const eventCategories = [...new Set(calendarState.events.map(e => e.category))].sort();
        eventCategories.forEach(category => {
            const option = document.createElement('option');
            option.value = category;
            option.textContent = category;
            categoryFilter.appendChild(option);
        });
    }
    
    // Status filter
    const statusFilter = document.getElementById('statusFilter');
    if (statusFilter) {
        statusFilter.innerHTML = `
            <option value="">üìä V≈°echny stavy</option>
            <option value="completed">‚úÖ Dokonƒçen√©</option>
            <option value="planned">üîÆ Napl√°novan√©</option>
        `;
    }
    
    // Source filter - roz≈°√≠≈ôen√Ω pro sluƒçovan√© akce
    const sourceFilter = document.getElementById('sourceFilter');
    if (sourceFilter) {
        sourceFilter.innerHTML = `
            <option value="">üîó V≈°echny zdroje</option>
            <option value="historical">üìä Pouze historick√° data</option>
            <option value="prediction">ü§ñ Pouze AI predikce</option>
            <option value="merged">üîÑ Slouƒçen√© (data + predikce)</option>
        `;
    }
    
    // Nov√Ω filtr - typ dat
    const dataTypeFilter = document.getElementById('dataTypeFilter');
    if (dataTypeFilter) {
        dataTypeFilter.innerHTML = `
            <option value="">üíæ V≈°echny typy dat</option>
            <option value="hasRealData">üìä S re√°ln√Ωmi daty</option>
            <option value="hasPrediction">ü§ñ S AI predikc√≠</option>
            <option value="both">üîÑ S obƒõma typy</option>
        `;
    }
    
    console.log('‚úÖ Calendar filters initialized');
}

// ========================================
// FILTROVAC√ç LOGIKA
// ========================================

// Hlavn√≠ filtrovac√≠ funkce - roz≈°√≠≈ôen√°
function filterCalendar() {
    console.log('üîç Filtering calendar events...');
    
    // Naƒçten√≠ hodnot z filtr≈Ø
    const categoryFilter = document.getElementById('categoryFilter');
    const statusFilter = document.getElementById('statusFilter');
    const sourceFilter = document.getElementById('sourceFilter');
    const dataTypeFilter = document.getElementById('dataTypeFilter');
    
    if (categoryFilter) calendarFilters.category = categoryFilter.value;
    if (statusFilter) calendarFilters.status = statusFilter.value;
    if (sourceFilter) calendarFilters.source = sourceFilter.value;
    if (dataTypeFilter) calendarFilters.hasRealData = dataTypeFilter.value;
    
    // Aplikace filtr≈Ø
    filteredEvents = calendarState.events.filter(event => {
        // Kategorie filter
        if (calendarFilters.category && event.category !== calendarFilters.category) {
            return false;
        }
        
        // Status filter
        if (calendarFilters.status && event.status !== calendarFilters.status) {
            return false;
        }
        
        // Source filter - roz≈°√≠≈ôen√Ω pro sluƒçovan√© akce
        if (calendarFilters.source) {
            switch (calendarFilters.source) {
                case 'historical':
                    if (!event.hasRealData || event.hasPrediction) return false;
                    break;
                case 'prediction':
                    if (!event.hasPrediction || event.hasRealData) return false;
                    break;
                case 'merged':
                    if (!(event.hasRealData && event.hasPrediction)) return false;
                    break;
            }
        }
        
        // Data type filter
        if (calendarFilters.hasRealData) {
            switch (calendarFilters.hasRealData) {
                case 'hasRealData':
                    if (!event.hasRealData) return false;
                    break;
                case 'hasPrediction':
                    if (!event.hasPrediction) return false;
                    break;
                case 'both':
                    if (!(event.hasRealData && event.hasPrediction)) return false;
                    break;
            }
        }
        
        // Text search filter
        if (calendarFilters.searchText) {
            const searchableText = [
                event.title,
                event.category,
                event.city,
                event.data.notes || '',
                event.prediction?.formData?.businessModel || ''
            ].join(' ').toLowerCase();
            
            if (!searchableText.includes(calendarFilters.searchText.toLowerCase())) {
                return false;
            }
        }
        
        return true;
    });
    
    // Zobrazen√≠ filtrovan√Ωch ud√°lost√≠
    displayFilteredEventsInCalendar();
    updateMonthEventsList();
    
    console.log(`üîç Filtered ${filteredEvents.length} events from ${calendarState.events.length} total`);
}

// Zobrazen√≠ filtrovan√Ωch ud√°lost√≠ v kalend√°≈ôi - upraveno pro sluƒçovan√© akce
function displayFilteredEventsInCalendar() {
    // Vyƒçi≈°tƒõn√≠ v≈°ech ud√°lost√≠
    document.querySelectorAll('.day-events').forEach(container => {
        container.innerHTML = '';
    });
    
    document.querySelectorAll('.calendar-day').forEach(day => {
        day.classList.remove('has-events');
    });
    
    // Seskupen√≠ filtrovan√Ωch ud√°lost√≠ podle datum≈Ø
    const eventsByDate = {};
    
    filteredEvents.forEach(event => {
        const startDate = event.startDate;
        const endDate = event.endDate;
        
        // Pro v√≠cedenn√≠ ud√°losti
        const currentDate = new Date(startDate);
        while (currentDate <= endDate) {
            const dateKey = formatDateKey(currentDate);
            
            if (!eventsByDate[dateKey]) {
                eventsByDate[dateKey] = [];
            }
            
            eventsByDate[dateKey].push(event);
            currentDate.setDate(currentDate.getDate() + 1);
        }
    });
    
    // Zobrazen√≠ v kalend√°≈ôi s roz≈°√≠≈ôen√Ωmi indik√°tory
    Object.entries(eventsByDate).forEach(([dateKey, events]) => {
        const dayCell = document.querySelector(`[data-date="${dateKey}"]`);
        if (!dayCell) return;
        
        const eventsContainer = dayCell.querySelector('.day-events');
        if (!eventsContainer) return;
        
        dayCell.classList.add('has-events');
        
        // Zobrazit max 3 ud√°losti + poƒçet zb√Ωvaj√≠c√≠ch
        const visibleEvents = events.slice(0, 3);
        const hiddenCount = events.length - visibleEvents.length;
        
        visibleEvents.forEach(event => {
            const eventElement = document.createElement('div');
            eventElement.className = 'event-item';
            eventElement.style.backgroundColor = event.color;
            eventElement.style.color = '#fff';
            
            // Roz≈°√≠≈ôen√© oznaƒçen√≠ podle typu dat
            let prefix = '';
            if (event.hasRealData && event.hasPrediction) {
                prefix = 'üîÑ '; // Slouƒçen√©
            } else if (event.hasRealData) {
                prefix = 'üìä '; // Pouze historick√° data
            } else if (event.hasPrediction) {
                prefix = 'ü§ñ '; // Pouze predikce
            }
            
            // Ikona pro dokonƒçen√© akce
            if (event.status === 'completed') {
                prefix = '‚úÖ ' + prefix;
            }
            
            eventElement.textContent = prefix + event.title;
            eventElement.title = `${event.title} - ${event.city}` +
                (event.hasRealData && event.hasPrediction ? ' (Historick√° data + AI predikce)' : 
                 event.hasRealData ? ' (Historick√° data)' : 
                 event.hasPrediction ? ' (AI predikce)' : '');
            
            eventsContainer.appendChild(eventElement);
        });
        
        // Poƒçet dal≈°√≠ch akc√≠
        if (hiddenCount > 0) {
            const moreElement = document.createElement('div');
            moreElement.className = 'event-item more-events';
            moreElement.style.backgroundColor = '#6c757d';
            moreElement.style.color = '#fff';
            moreElement.textContent = `+${hiddenCount} dal≈°√≠`;
            eventsContainer.appendChild(moreElement);
        }
    });
}

// Reset v≈°ech filtr≈Ø
function resetCalendarFilters() {
    console.log('üîÑ Resetting calendar filters...');
    
    calendarFilters.category = '';
    calendarFilters.status = '';
    calendarFilters.source = '';
    calendarFilters.searchText = '';
    calendarFilters.hasRealData = '';
    calendarFilters.hasPrediction = '';
    
    // Reset UI element≈Ø
    const categoryFilter = document.getElementById('categoryFilter');
    const statusFilter = document.getElementById('statusFilter');
    const sourceFilter = document.getElementById('sourceFilter');
    const dataTypeFilter = document.getElementById('dataTypeFilter');
    const searchInput = document.getElementById('eventSearch');
    
    if (categoryFilter) categoryFilter.value = '';
    if (statusFilter) statusFilter.value = '';
    if (sourceFilter) sourceFilter.value = '';
    if (dataTypeFilter) dataTypeFilter.value = '';
    if (searchInput) searchInput.value = '';
    
    // Zobrazit v≈°echny ud√°losti
    filteredEvents = [...calendarState.events];
    displayFilteredEventsInCalendar();
    updateMonthEventsList();
    
    // Skr√Ωt search stats
    const searchStats = document.getElementById('searchStats');
    if (searchStats) {
        searchStats.style.display = 'none';
    }
    
    if (typeof showNotification === 'function') {
        showNotification('üîç Filtry resetov√°ny', 'info', 2000);
    }
}

// ========================================
// VYHLED√ÅV√ÅN√ç
// ========================================

// Inicializace vyhled√°v√°n√≠
function initializeEventSearch() {
    const searchInput = document.getElementById('eventSearch');
    if (!searchInput) return;
    
    let searchTimeout;
    
    searchInput.addEventListener('input', (e) => {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
            searchEvents(e.target.value);
        }, 300);
    });
    
    // Clear search button
    const clearSearch = document.getElementById('clearSearch');
    if (clearSearch) {
        clearSearch.addEventListener('click', () => {
            searchInput.value = '';
            searchEvents('');
        });
    }
    
    console.log('üîç Event search initialized');
}

// Vyhled√°v√°n√≠ v ud√°lostech - roz≈°√≠≈ôen√©
function searchEvents(query) {
    const trimmedQuery = query.trim();
    
    calendarFilters.searchText = trimmedQuery;
    
    // Aplikovat v≈°echny filtry vƒçetnƒõ vyhled√°v√°n√≠
    filterCalendar();
    
    // Update search stats
    const searchStats = document.getElementById('searchStats');
    if (searchStats) {
        if (trimmedQuery) {
            const mergedCount = filteredEvents.filter(e => e.hasRealData && e.hasPrediction).length;
            const historicalOnlyCount = filteredEvents.filter(e => e.hasRealData && !e.hasPrediction).length;
            const predictionOnlyCount = filteredEvents.filter(e => !e.hasRealData && e.hasPrediction).length;
            
            let statsText = `üîç Nalezeno ${filteredEvents.length} v√Ωsledk≈Ø pro "${query}"`;
            if (mergedCount > 0 || historicalOnlyCount > 0 || predictionOnlyCount > 0) {
                statsText += ` (üîÑ${mergedCount} slouƒçen√Ωch, üìä${historicalOnlyCount} historick√Ωch, ü§ñ${predictionOnlyCount} predikc√≠)`;
            }
            
            searchStats.textContent = statsText;
            searchStats.style.display = 'block';
        } else {
            searchStats.style.display = 'none';
        }
    }
    
    console.log(`üîç Search for "${query}": ${filteredEvents.length} results`);
}

// ========================================
// MƒöS√çƒåN√ç P≈òEHLED - ROZ≈†√ç≈òEN√ù
// ========================================

// Aktualizace seznamu ud√°lost√≠ mƒõs√≠ce
function updateMonthEventsList() {
    const monthEvents = document.getElementById('monthEvents');
    if (!monthEvents) return;
    
    console.log('üìã Updating month events list...');
    
    // Filtrov√°n√≠ ud√°lost√≠ pro aktu√°ln√≠ mƒõs√≠c
    const monthStart = new Date(calendarState.currentYear, calendarState.currentMonth, 1);
    const monthEnd = new Date(calendarState.currentYear, calendarState.currentMonth + 1, 0);
    
    const currentMonthEvents = filteredEvents.filter(event => {
        const eventStart = event.startDate;
        const eventEnd = event.endDate;
        return (eventStart <= monthEnd && eventEnd >= monthStart);
    });
    
    if (currentMonthEvents.length === 0) {
        monthEvents.innerHTML = `
            <div class="events-placeholder">
                <p>üìÖ ≈Ω√°dn√© ud√°losti v tomto mƒõs√≠ci</p>
                <p><small>Zkuste zmƒõnit filtry nebo p≈ôidat novou akci</small></p>
                <button class="btn btn-small" onclick="resetCalendarFilters()">üîÑ Reset filtr≈Ø</button>
            </div>
        `;
        return;
    }
    
    // Se≈ôazen√≠ podle data
    currentMonthEvents.sort((a, b) => a.startDate - b.startDate);
    
    // Vytvo≈ôen√≠ seznamu
    let html = `
        <div class="month-events-header">
            <h4>üìã Akce v mƒõs√≠ci (${currentMonthEvents.length})</h4>
            <div class="month-events-controls">
                <button class="btn btn-small" onclick="resetCalendarFilters()">üîÑ Reset filtr≈Ø</button>
                <button class="btn btn-small" onclick="exportMonthEvents()">üìÑ Export mƒõs√≠ce</button>
            </div>
        </div>
        <div class="month-events-list">
    `;
    
    currentMonthEvents.forEach(event => {
        html += createMonthEventItem(event);
    });
    
    html += '</div>';
    
    // Statistiky mƒõs√≠ce - roz≈°√≠≈ôen√©
    html += createEnhancedMonthStats(currentMonthEvents);
    
    monthEvents.innerHTML = html;
}

// Vytvo≈ôen√≠ polo≈æky ud√°losti v mƒõs√≠ƒçn√≠m seznamu - roz≈°√≠≈ôen√©
function createMonthEventItem(event) {
    const startDate = event.startDate.toLocaleDateString('cs-CZ', { day: '2-digit', month: '2-digit' });
    const endDate = event.endDate.toLocaleDateString('cs-CZ', { day: '2-digit', month: '2-digit' });
    const dateText = startDate === endDate ? startDate : `${startDate} - ${endDate}`;
    
    // Roz≈°√≠≈ôen√© ikony podle typu dat
    let statusIcon = event.status === 'completed' ? '‚úÖ' : 'üìÖ';
    let sourceIcon = '';
    if (event.hasRealData && event.hasPrediction) {
        sourceIcon = 'üîÑ'; // Slouƒçen√©
    } else if (event.hasRealData) {
        sourceIcon = 'üìä'; // Historick√° data
    } else if (event.hasPrediction) {
        sourceIcon = 'ü§ñ'; // Predikce
    }
    
    // Statistiky - roz≈°√≠≈ôen√© pro sluƒçovan√© akce
    const visitors = event.data.visitors || 0;
    const realSales = event.data.sales || 0;
    const predictedSales = event.prediction?.predictedSales || event.data.predictedSales || 0;
    
    // Urƒçen√≠ hlavn√≠ho ƒç√≠sla prodeje pro zobrazen√≠
    const displaySales = realSales > 0 ? realSales : predictedSales;
    const salesType = realSales > 0 ? 'prod√°no' : 'predikce';
    
    const conversion = visitors > 0 && displaySales > 0 ? ((displaySales / visitors) * 100).toFixed(1) : '0';
    
    // Business data
    const revenue = event.prediction?.expectedRevenue || (displaySales * (event.data.price || 110));
    const profit = event.prediction?.expectedProfit || 0;
    
    // Accuracy indicator pokud m√°me oboje
    let accuracyHtml = '';
    if (event.hasRealData && event.hasPrediction && realSales > 0 && predictedSales > 0) {
        const accuracy = calculatePredictionAccuracy(predictedSales, realSales);
        const accuracyColor = accuracy >= 80 ? '#28a745' : accuracy >= 60 ? '#ffc107' : '#dc3545';
        accuracyHtml = `
            <div class="stat-group">
                <span class="stat-value" style="color: ${accuracyColor};">${accuracy}%</span>
                <span class="stat-label">p≈ôesnost</span>
            </div>
        `;
    }
    
    return `
        <div class="month-event-item ${event.hasRealData && event.hasPrediction ? 'merged-event' : ''}" 
             onclick="showEventDetail('${event.id}')" style="cursor: pointer;">
            <div class="event-color-bar" style="background-color: ${event.color};"></div>
            <div class="event-info">
                <div class="event-title">${escapeHtml(event.title)}</div>
                <div class="event-meta">
                    ${statusIcon} ${dateText} ‚Ä¢ ${sourceIcon} ${escapeHtml(event.category)} ‚Ä¢ üìç ${escapeHtml(event.city)}
                    ${event.hasRealData && event.hasPrediction ? ' ‚Ä¢ üîÑ Slouƒçen√° akce' : ''}
                </div>
            </div>
            <div class="event-stats">
                <div class="stat-group">
                    <span class="stat-value">${formatNumber(visitors)}</span>
                    <span class="stat-label">n√°v≈°tƒõvn√≠k≈Ø</span>
                </div>
                <div class="stat-group">
                    <span class="stat-value">${formatNumber(displaySales)}</span>
                    <span class="stat-label">${salesType}</span>
                </div>
                <div class="stat-group">
                    <span class="stat-value">${conversion}%</span>
                    <span class="stat-label">konverze</span>
                </div>
                <div class="stat-group">
                    <span class="stat-value">${formatCurrency(revenue)}</span>
                    <span class="stat-label">obrat</span>
                </div>
                ${accuracyHtml}
                ${profit > 0 ? `
                <div class="stat-group">
                    <span class="stat-value">${formatCurrency(profit)}</span>
                    <span class="stat-label">zisk</span>
                </div>
                ` : ''}
            </div>
        </div>
    `;
}

// Roz≈°√≠≈ôen√© statistiky mƒõs√≠ce
function createEnhancedMonthStats(events) {
    const stats = {
        totalEvents: events.length,
        completedEvents: events.filter(e => e.status === 'completed').length,
        mergedEvents: events.filter(e => e.hasRealData && e.hasPrediction).length,
        historicalOnlyEvents: events.filter(e => e.hasRealData && !e.hasPrediction).length,
        predictionOnlyEvents: events.filter(e => !e.hasRealData && e.hasPrediction).length,
        totalVisitors: 0,
        totalRealSales: 0,
        totalPredictedSales: 0,
        totalRevenue: 0,
        totalProfit: 0,
        accuracySum: 0,
        accuracyCount: 0
    };
    
    let validConversions = [];
    
    events.forEach(event => {
        const visitors = event.data.visitors || 0;
        const realSales = event.data.sales || 0;
        const predictedSales = event.prediction?.predictedSales || event.data.predictedSales || 0;
        const revenue = event.prediction?.expectedRevenue || (Math.max(realSales, predictedSales) * (event.data.price || 110));
        const profit = event.prediction?.expectedProfit || 0;
        
        stats.totalVisitors += visitors;
        stats.totalRealSales += realSales;
        stats.totalPredictedSales += predictedSales;
        stats.totalRevenue += revenue;
        stats.totalProfit += profit;
        
        // P≈ôesnost predikce
        if (event.hasRealData && event.hasPrediction && realSales > 0 && predictedSales > 0) {
            const accuracy = calculatePredictionAccuracy(predictedSales, realSales);
            stats.accuracySum += accuracy;
            stats.accuracyCount++;
        }
        
        // Konverze
        const displaySales = realSales > 0 ? realSales : predictedSales;
        if (visitors > 0 && displaySales > 0) {
            validConversions.push((displaySales / visitors) * 100);
        }
    });
    
    const avgConversion = validConversions.length > 0 
        ? validConversions.reduce((sum, conv) => sum + conv, 0) / validConversions.length 
        : 0;
    
    const avgMargin = stats.totalRevenue > 0 ? (stats.totalProfit / stats.totalRevenue) * 100 : 0;
    const avgAccuracy = stats.accuracyCount > 0 ? stats.accuracySum / stats.accuracyCount : 0;
    
    return `
        <div class="month-stats enhanced">
            <h4>üìä Roz≈°√≠≈ôen√© statistiky mƒõs√≠ce</h4>
            
            <!-- P≈ôehled typ≈Ø akc√≠ -->
            <div class="stats-breakdown">
                <h5>üîó Typy akc√≠</h5>
                <div class="breakdown-grid">
                    <div class="breakdown-item">
                        <span>üîÑ Slouƒçen√© akce (data + predikce)</span>
                        <span>${stats.mergedEvents}</span>
                    </div>
                    <div class="breakdown-item">
                        <span>üìä Pouze historick√° data</span>
                        <span>${stats.historicalOnlyEvents}</span>
                    </div>
                    <div class="breakdown-item">
                        <span>ü§ñ Pouze AI predikce</span>
                        <span>${stats.predictionOnlyEvents}</span>
                    </div>
                    <div class="breakdown-item">
                        <span>‚úÖ Dokonƒçen√© akce</span>
                        <span>${stats.completedEvents} z ${stats.totalEvents}</span>
                    </div>
                </div>
            </div>
            
            <!-- Hlavn√≠ metriky -->
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number">${formatNumber(stats.totalVisitors)}</div>
                    <div class="stat-label">Celkem n√°v≈°tƒõvn√≠k≈Ø</div>
                    <div class="stat-sublabel">${stats.totalEvents > 0 ? Math.round(stats.totalVisitors / stats.totalEvents) : 0} pr≈Ømƒõr/akci</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${formatNumber(Math.max(stats.totalRealSales, stats.totalPredictedSales))}</div>
                    <div class="stat-label">Celkem prodej/predikce</div>
                    <div class="stat-sublabel">${avgConversion.toFixed(1)}% pr≈Ømƒõrn√° konverze</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${formatCurrency(stats.totalRevenue)}</div>
                    <div class="stat-label">Celkov√Ω obrat</div>
                    <div class="stat-sublabel">${avgMargin.toFixed(1)}% pr≈Ømƒõrn√° mar≈æe</div>
                </div>
                <div class="stat-card ${stats.totalProfit >= 0 ? 'positive' : 'negative'}">
                    <div class="stat-number">${formatCurrency(stats.totalProfit)}</div>
                    <div class="stat-label">Celkov√Ω zisk</div>
                    <div class="stat-sublabel">${stats.totalEvents > 0 ? formatCurrency(stats.totalProfit / stats.totalEvents) : '0 Kƒç'} pr≈Ømƒõr/akci</div>
                </div>
                ${avgAccuracy > 0 ? `
                <div class="stat-card accuracy">
                    <div class="stat-number">${avgAccuracy.toFixed(1)}%</div>
                    <div class="stat-label">Pr≈Ømƒõrn√° p≈ôesnost AI</div>
                    <div class="stat-sublabel">${stats.accuracyCount} porovn√°n√≠</div>
                </div>
                ` : ''}
            </div>
            
            <!-- Srovn√°n√≠ re√°ln√Ωch dat vs predikc√≠ -->
            ${stats.totalRealSales > 0 && stats.totalPredictedSales > 0 ? `
            <div class="comparison-section">
                <h5>‚öñÔ∏è Srovn√°n√≠ re√°ln√Ωch dat vs AI predikc√≠</h5>
                <div class="comparison-grid">
                    <div class="comparison-item">
                        <span>üìä Celkem re√°lnƒõ prod√°no</span>
                        <span>${formatNumber(stats.totalRealSales)} ks</span>
                    </div>
                    <div class="comparison-item">
                        <span>ü§ñ Celkem AI predikce</span>
                        <span>${formatNumber(stats.totalPredictedSales)} ks</span>
                    </div>
                    <div class="comparison-item ${stats.totalPredictedSales >= stats.totalRealSales ? 'positive' : 'negative'}">
                        <span>üìà Rozd√≠l predikce</span>
                        <span>${stats.totalPredictedSales >= stats.totalRealSales ? '+' : ''}${formatNumber(stats.totalPredictedSales - stats.totalRealSales)} ks</span>
                    </div>
                </div>
            </div>
            ` : ''}
        </div>
    `;
}

// Export ud√°lost√≠ mƒõs√≠ce do CSV
function exportMonthEvents() {
    const monthStart = new Date(calendarState.currentYear, calendarState.currentMonth, 1);
    const monthEnd = new Date(calendarState.currentYear, calendarState.currentMonth + 1, 0);
    
    const monthEvents = filteredEvents.filter(event => {
        const eventStart = event.startDate;
        const eventEnd = event.endDate;
        return (eventStart <= monthEnd && eventEnd >= monthStart);
    });
    
    if (monthEvents.length === 0) {
        if (typeof showNotification === 'function') {
            showNotification('‚ùå ≈Ω√°dn√© ud√°losti k exportu v tomto mƒõs√≠ci', 'error');
        }
        return;
    }
    
    const monthName = new Date(calendarState.currentYear, calendarState.currentMonth, 1)
        .toLocaleDateString('cs-CZ', { month: 'long', year: 'numeric' });
    
    exportEventsToCSV(monthEvents, `donuland_kalendar_${monthName.replace(' ', '_')}.csv`);
    
    if (typeof showNotification === 'function') {
        showNotification(`üìÑ ${monthEvents.length} ud√°lost√≠ exportov√°no pro ${monthName}`, 'success');
    }
}

// ========================================
// ROZ≈†√ç≈òEN√ç P≈ÆVODN√çCH FUNKC√ç
// ========================================

// Roz≈°√≠≈ôen√≠ originalLoadCalendarEvents z Part 4A
const originalLoadCalendarEventsB = typeof loadCalendarEvents !== 'undefined' ? loadCalendarEvents : function() {};

// Override loadCalendarEvents s inicializac√≠ filtr≈Ø
if (typeof window.loadCalendarEvents_Part4B_Loaded === 'undefined') {
    window.loadCalendarEvents_Part4B_Loaded = true;
    
    const originalLoadCalendarEvents_Part4A = loadCalendarEvents;
    loadCalendarEvents = function() {
        originalLoadCalendarEvents_Part4A();
        
        // Po naƒçten√≠ ud√°lost√≠ inicializovat filtry
        setTimeout(() => {
            initializeCalendarFilters();
            // Nastavit v≈°echny ud√°losti jako filtrovan√© na zaƒç√°tku
            filteredEvents = [...calendarState.events];
        }, 100);
    };
}

// ========================================
// GLOB√ÅLN√ç EXPORT
// ========================================

// Export nov√Ωch funkc√≠ pro HTML
if (typeof window !== 'undefined') {
    window.filterCalendar = filterCalendar;
    window.resetCalendarFilters = resetCalendarFilters;
    window.searchEvents = searchEvents;
    window.exportMonthEvents = exportMonthEvents;
    
    // Roz≈°√≠≈ôen√≠ debug objektu
    if (window.calendarDebug) {
        window.calendarDebug.filters = calendarFilters;
        window.calendarDebug.filteredEvents = () => filteredEvents;
        window.calendarDebug.resetFilters = resetCalendarFilters;
        window.calendarDebug.getMonthStats = () => {
            const monthStart = new Date(calendarState.currentYear, calendarState.currentMonth, 1);
            const monthEnd = new Date(calendarState.currentYear, calendarState.currentMonth + 1, 0);
            
            const monthEvents = filteredEvents.filter(event => {
                const eventStart = event.startDate;
                const eventEnd = event.endDate;
                return (eventStart <= monthEnd && eventEnd >= monthStart);
            });
            
            return {
                total: monthEvents.length,
                merged: monthEvents.filter(e => e.hasRealData && e.hasPrediction).length,
                historicalOnly: monthEvents.filter(e => e.hasRealData && !e.hasPrediction).length,
                predictionOnly: monthEvents.filter(e => !e.hasRealData && e.hasPrediction).length,
                completed: monthEvents.filter(e => e.status === 'completed').length
            };
        };
    }
}

// ========================================
// CSV EXPORT FUNKCE
// ========================================

// Export ud√°lost√≠ do CSV - roz≈°√≠≈ôen√Ω pro sluƒçovan√© akce
function exportEventsToCSV(events = calendarState.events, filename = null) {
    if (!events || events.length === 0) {
        if (typeof showNotification === 'function') {
            showNotification('‚ùå ≈Ω√°dn√© ud√°losti k exportu', 'error');
        }
        return;
    }
    
    console.log(`üìÑ Exporting ${events.length} events to CSV...`);
    
    // CSV hlaviƒçka - roz≈°√≠≈ôen√°
    const csvHeaders = [
        'N√°zev akce',
        'Kategorie', 
        'Mƒõsto',
        'Datum od',
        'Datum do',
        'N√°v≈°tƒõvn√≠ci',
        'Re√°ln√Ω prodej',
        'AI predikce',
        'Re√°ln√° konverze %',
        'Predikovan√° konverze %',
        'P≈ôesnost AI %',
        'Typ dat',
        'Stav',
        'Oƒçek√°van√Ω obrat',
        'Oƒçek√°van√Ω zisk',
        'Business model',
        'Pozn√°mky'
    ];
    
    // CSV ≈ô√°dky - roz≈°√≠≈ôen√©
    const csvRows = events.map(event => {
        const visitors = event.data.visitors || 0;
        const realSales = event.data.sales || 0;
        const predictedSales = event.prediction?.predictedSales || event.data.predictedSales || 0;
        
        const realConversion = visitors > 0 && realSales > 0 ? ((realSales / visitors) * 100).toFixed(2) : '';
        const predictedConversion = visitors > 0 && predictedSales > 0 ? ((predictedSales / visitors) * 100).toFixed(2) : '';
        
        const accuracy = event.hasRealData && event.hasPrediction && realSales > 0 && predictedSales > 0 
            ? calculatePredictionAccuracy(predictedSales, realSales) 
            : '';
        
        let dataType = '';
        if (event.hasRealData && event.hasPrediction) {
            dataType = 'Slouƒçen√© (data + predikce)';
        } else if (event.hasRealData) {
            dataType = 'Historick√° data';
        } else if (event.hasPrediction) {
            dataType = 'AI predikce';
        }
        
        return [
            escapeCSVValue(event.title),
            escapeCSVValue(event.category),
            escapeCSVValue(event.city),
            event.startDate.toLocaleDateString('cs-CZ'),
            event.endDate.toLocaleDateString('cs-CZ'),
            visitors,
            realSales || '',
            predictedSales || '',
            realConversion,
            predictedConversion,
            accuracy,
            dataType,
            event.status === 'completed' ? 'Dokonƒçeno' : 'Napl√°nov√°no',
            event.prediction?.expectedRevenue || '',
            event.prediction?.expectedProfit || '',
            escapeCSVValue(event.prediction?.businessModel || event.data.businessModel || ''),
            escapeCSVValue(event.data.notes || '')
        ].join(',');
    });
    
    const csvContent = [csvHeaders.join(','), ...csvRows].join('\n');
    
    // Download CSV
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    
    const defaultFilename = filename || `donuland_kalendar_${new Date().toISOString().split('T')[0]}.csv`;
    
    link.href = URL.createObjectURL(blob);
    link.download = defaultFilename;
    link.click();
    
    URL.revokeObjectURL(link.href);
    
    console.log(`‚úÖ Events exported to CSV: ${defaultFilename}`);
}

// Helper pro escapov√°n√≠ CSV hodnot
function escapeCSVValue(value) {
    if (!value) return '';
    
    const stringValue = value.toString();
    
    // Pokud obsahuje ƒç√°rku, uvozovky nebo nov√Ω ≈ô√°dek, obalit uvozovkami
    if (stringValue.includes(',') || stringValue.includes('"') || stringValue.includes('\n')) {
        // Escapovat uvozovky zdvojen√≠m
        return '"' + stringValue.replace(/"/g, '""') + '"';
    }
    
    return stringValue;
}

// ========================================
// EVENT LISTENERS PRO PART 4B
// ========================================

// Event listeners pro filtry a mƒõs√≠ƒçn√≠ p≈ôehled
if (typeof eventBus !== 'undefined') {
    
    eventBus.on('dataLoaded', () => {
        setTimeout(() => {
            if (typeof globalState !== 'undefined' && globalState.currentSection === 'calendar') {
                loadCalendarEvents();
                filteredEvents = [...calendarState.events];
                displayFilteredEventsInCalendar();
                updateMonthEventsList();
            }
        }, 500);
    });
    
    eventBus.on('predictionSaved', () => {
        setTimeout(() => {
            if (typeof globalState !== 'undefined' && globalState.currentSection === 'calendar') {
                loadCalendarEvents();
                filteredEvents = [...calendarState.events];
                displayFilteredEventsInCalendar();
                updateMonthEventsList();
            }
        }, 500);
    });
    
    eventBus.on('calendarRequested', () => {
        setTimeout(() => {
            if (!window.calendarInitialized) {
                initializeCalendar();
            } else {
                loadCalendarEvents();
                initializeCalendarFilters();
                filteredEvents = [...calendarState.events];
                displayFilteredEventsInCalendar();
                updateMonthEventsList();
            }
        }, 500);
    });
    
    // Nov√Ω event pro aktualizaci po slouƒçen√≠ predikce
    eventBus.on('predictionMerged', (data) => {
        setTimeout(() => {
            loadCalendarEvents();
            filteredEvents = [...calendarState.events];
            displayFilteredEventsInCalendar();
            updateMonthEventsList();
            
            if (typeof showNotification === 'function') {
                showNotification(`üîÑ Predikce byla slouƒçena s akc√≠ "${data.eventName}"`, 'success', 4000);
            }
        }, 500);
    });
}

// ========================================
// ROZ≈†√ç≈òEN√ç CHANGEMONTH A GOTOTODAY
// ========================================

// Roz≈°√≠≈ôen√≠ changeMonth z Part 4A pro aktualizaci filtr≈Ø
if (typeof window.changeMonth_Part4B_Extended === 'undefined') {
    window.changeMonth_Part4B_Extended = true;
    
    const originalChangeMonth = window.changeMonth;
    window.changeMonth = function(direction) {
        originalChangeMonth(direction);
        
        // Po zmƒõnƒõ mƒõs√≠ce aktualizovat filtrovan√© zobrazen√≠
        setTimeout(() => {
            displayFilteredEventsInCalendar();
            updateMonthEventsList();
        }, 100);
    };
}

// Roz≈°√≠≈ôen√≠ goToToday z Part 4A pro aktualizaci filtr≈Ø
if (typeof window.goToToday_Part4B_Extended === 'undefined') {
    window.goToToday_Part4B_Extended = true;
    
    const originalGoToToday = window.goToToday;
    window.goToToday = function() {
        originalGoToToday();
        
        // Po p≈ôechodu na dnes aktualizovat filtrovan√© zobrazen√≠
        setTimeout(() => {
            displayFilteredEventsInCalendar();
            updateMonthEventsList();
        }, 100);
    };
}

// ========================================
// ROZ≈†√ç≈òEN√ç SHOWDAYMODAL PRO FILTRY
// ========================================

// Roz≈°√≠≈ôen√≠ showDayModal z Part 4A pro filtrovan√© ud√°losti
if (typeof window.showDayModal_Part4B_Extended === 'undefined') {
    window.showDayModal_Part4B_Extended = true;
    
    const originalShowDayModal = window.showDayModal;
    window.showDayModal = function(date) {
        const dateKey = formatDateKey(date);
        const dayEvents = filteredEvents.filter(event => {
            const startKey = formatDateKey(event.startDate);
            const endKey = formatDateKey(event.endDate);
            return dateKey >= startKey && dateKey <= endKey;
        });
        
        if (dayEvents.length === 0) {
            if (typeof showNotification === 'function') {
                showNotification('üìÖ ≈Ω√°dn√© ud√°losti v tomto dni (po filtrov√°n√≠)', 'info', 2000);
            }
            return;
        }
        
        // Vytvo≈ôen√≠ modalu s roz≈°√≠≈ôen√Ωmi informacemi
        const modal = document.createElement('div');
        modal.className = 'modal day-modal';
        modal.style.display = 'flex';
        
        const modalContent = document.createElement('div');
        modalContent.className = 'modal-content';
        
        // Statistiky pro den
        const mergedCount = dayEvents.filter(e => e.hasRealData && e.hasPrediction).length;
        const historicalCount = dayEvents.filter(e => e.hasRealData && !e.hasPrediction).length;
        const predictionCount = dayEvents.filter(e => !e.hasRealData && e.hasPrediction).length;
        
        let dayStatsText = '';
        if (mergedCount > 0 || historicalCount > 0 || predictionCount > 0) {
            dayStatsText = `<small>(üîÑ${mergedCount} slouƒçen√Ωch, üìä${historicalCount} historick√Ωch, ü§ñ${predictionCount} predikc√≠)</small>`;
        }
        
        modalContent.innerHTML = `
            <div class="modal-header">
                <h3>üìÖ ${date.toLocaleDateString('cs-CZ', { 
                    weekday: 'long', 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                })} (${dayEvents.length} akc√≠)</h3>
                <button class="modal-close" onclick="this.closest('.modal').remove()">&times;</button>
            </div>
            <div class="modal-body">
                ${dayStatsText ? `<div class="day-stats">${dayStatsText}</div>` : ''}
                <div class="day-events-list"></div>
            </div>
        `;
        
        const eventsList = modalContent.querySelector('.day-events-list');
        
        dayEvents.forEach(event => {
            const eventItem = document.createElement('div');
            eventItem.className = 'day-event-item';
            eventItem.style.borderLeft = `4px solid ${event.color}`;
            
            const statusIcon = event.status === 'completed' ? '‚úÖ' : 'üìÖ';
            let sourceIcon = '';
            let sourceText = '';
            
            if (event.hasRealData && event.hasPrediction) {
                sourceIcon = 'üîÑ';
                sourceText = 'Slouƒçen√° akce (historick√° data + AI predikce)';
            } else if (event.hasRealData) {
                sourceIcon = 'üìä';
                sourceText = 'Historick√° data ze Sheets';
            } else if (event.hasPrediction) {
                sourceIcon = 'ü§ñ';
                sourceText = 'AI predikce';
            }
            
            eventItem.innerHTML = `
                <div class="event-header">
                    <h4>${escapeHtml(event.title)}</h4>
                    <div class="event-meta">
                        ${statusIcon} ${event.status === 'completed' ? 'Dokonƒçeno' : 'Napl√°nov√°no'} ‚Ä¢ 
                        ${sourceIcon} ${sourceText} ‚Ä¢ 
                        üìç ${escapeHtml(event.city)} ‚Ä¢ üìã ${escapeHtml(event.category)}
                    </div>
                </div>
                <div class="event-stats">
                    ${event.data.visitors ? `<span>üë• ${formatNumber(event.data.visitors)} n√°v≈°tƒõvn√≠k≈Ø</span>` : ''}
                    ${event.data.sales ? `<span>üç© ${formatNumber(event.data.sales)} ks prod√°no</span>` : ''}
                    ${event.prediction?.predictedSales ? `<span>ü§ñ ${formatNumber(event.prediction.predictedSales)} ks predikce</span>` : ''}
                    ${event.prediction?.expectedProfit ? `<span>üí∞ ${formatCurrency(event.prediction.expectedProfit)} zisk</span>` : ''}
                    ${event.hasPrediction ? `<span>üì§ <button class="btn btn-small" onclick="exportEventToSheets('${event.id}')">Do Sheets</button></span>` : ''}
                </div>
                <div class="event-actions">
                    <button class="btn btn-detail" onclick="showEventDetail('${event.id}')">üìã Detail</button>
                </div>
            `;
            
            eventsList.appendChild(eventItem);
        });
        
        modal.appendChild(modalContent);
        document.body.appendChild(modal);
        
        // Zav≈ôen√≠ modalu
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.remove();
            }
        });
        
        const escHandler = (e) => {
            if (e.key === 'Escape') {
                modal.remove();
                document.removeEventListener('keydown', escHandler);
            }
        };
        document.addEventListener('keydown', escHandler);
    };
}

console.log('‚úÖ Donuland Part 4B loaded successfully');
console.log('üîç Filter features: Category, Status, Source (including merged), Data type, Text search');
console.log('üìã Enhanced monthly overview: Event list with merge indicators, Enhanced statistics, Accuracy tracking');
console.log('üìÑ CSV Export: Enhanced with prediction accuracy and merge status');
console.log('üîÑ Smart integration: All Part 4A functions now work with enhanced filters and merged events');

// Event pro signalizaci dokonƒçen√≠ ƒç√°sti 4B
if (typeof eventBus !== 'undefined') {
    eventBus.emit('part4BLoaded', { 
        timestamp: Date.now(),
        version: '1.0.0',
        features: [
            'enhanced-filters-for-merged-events',
            'smart-search-with-prediction-data', 
            'enhanced-monthly-overview-with-accuracy',
            'csv-export-with-merge-status',
            'prediction-accuracy-tracking',
            'merged-events-indicators',
            'enhanced-statistics'
        ]
    });
}
/* ========================================
   DONULAND PART 4C - Pokroƒçil√© funkce kalend√°≈ôe
   Pokraƒçov√°n√≠ Part 4A + 4B - bez duplikac√≠
   ======================================== */

console.log('üç© Donuland Part 4C loading...');

// ========================================
// BULK OPERATIONS (Hromadn√© operace)
// ========================================

// Stav bulk operac√≠ - roz≈°√≠≈ôen√Ω pro sluƒçovan√© akce
const bulkOperations = {
    selectedEvents: new Set(),
    
    // Toggle v√Ωbƒõr ud√°losti
    toggleEventSelection(eventId) {
        if (this.selectedEvents.has(eventId)) {
            this.selectedEvents.delete(eventId);
        } else {
            this.selectedEvents.add(eventId);
        }
        this.updateSelectionUI();
    },
    
    // V√Ωbƒõr v≈°ech filtrovan√Ωch ud√°lost√≠
    selectAll() {
        this.selectedEvents.clear();
        filteredEvents.forEach(event => {
            this.selectedEvents.add(event.id);
        });
        this.updateSelectionUI();
    },
    
    // V√Ωbƒõr jen slouƒçen√Ωch akc√≠
    selectMerged() {
        this.selectedEvents.clear();
        filteredEvents.forEach(event => {
            if (event.hasRealData && event.hasPrediction) {
                this.selectedEvents.add(event.id);
            }
        });
        this.updateSelectionUI();
        
        if (typeof showNotification === 'function') {
            showNotification(`‚úÖ Vybr√°no ${this.selectedEvents.size} slouƒçen√Ωch akc√≠`, 'success', 2000);
        }
    },
    
    // V√Ωbƒõr jen predikc√≠
    selectPredictions() {
        this.selectedEvents.clear();
        filteredEvents.forEach(event => {
            if (event.hasPrediction) {
                this.selectedEvents.add(event.id);
            }
        });
        this.updateSelectionUI();
        
        if (typeof showNotification === 'function') {
            showNotification(`ü§ñ Vybr√°no ${this.selectedEvents.size} akc√≠ s predikc√≠`, 'success', 2000);
        }
    },
    
    // Zru≈°it v≈°echny v√Ωbƒõry
    clearSelection() {
        this.selectedEvents.clear();
        this.updateSelectionUI();
    },
    
    // Aktualizace UI v√Ωbƒõru
    updateSelectionUI() {
        const bulkActions = document.getElementById('bulkActions');
        const selectedCount = document.getElementById('selectedCount');
        
        if (bulkActions && selectedCount) {
            if (this.selectedEvents.size > 0) {
                bulkActions.style.display = 'flex';
                selectedCount.textContent = this.selectedEvents.size;
                
                // Aktualizace informac√≠ o typech vybran√Ωch akc√≠
                this.updateSelectionInfo();
            } else {
                bulkActions.style.display = 'none';
            }
        }
        
        // Aktualizace checkbox≈Ø v UI
        document.querySelectorAll('.event-checkbox').forEach(checkbox => {
            const eventId = checkbox.dataset.eventId;
            checkbox.checked = this.selectedEvents.has(eventId);
        });
    },
    
    // Aktualizace info o vybran√Ωch akc√≠ch
    updateSelectionInfo() {
        const selectedEventsData = calendarState.events.filter(event => 
            this.selectedEvents.has(event.id)
        );
        
        const mergedCount = selectedEventsData.filter(e => e.hasRealData && e.hasPrediction).length;
        const historicalCount = selectedEventsData.filter(e => e.hasRealData && !e.hasPrediction).length;
        const predictionCount = selectedEventsData.filter(e => !e.hasRealData && e.hasPrediction).length;
        
        const selectionInfo = document.getElementById('selectionInfo');
        if (selectionInfo) {
            selectionInfo.innerHTML = `
                <small>üîÑ${mergedCount} slouƒçen√Ωch, üìä${historicalCount} historick√Ωch, ü§ñ${predictionCount} predikc√≠</small>
            `;
        }
    },
    
    // Export vybran√Ωch ud√°lost√≠
    exportSelected() {
        if (this.selectedEvents.size === 0) {
            if (typeof showNotification === 'function') {
                showNotification('‚ùå Nejsou vybr√°ny ≈æ√°dn√© ud√°losti', 'error');
            }
            return;
        }
        
        const selectedEventData = calendarState.events.filter(event => 
            this.selectedEvents.has(event.id)
        );
        
        exportEventsToCSV(selectedEventData, `donuland_vybrane_akce_${new Date().toISOString().split('T')[0]}.csv`);
        this.clearSelection();
        
        if (typeof showNotification === 'function') {
            showNotification(`üìÑ ${selectedEventData.length} vybran√Ωch ud√°lost√≠ exportov√°no`, 'success');
        }
    },
    
    // Export jen predikc√≠ k vlo≈æen√≠ do Sheets
    exportPredictionsToSheets() {
        const predictionsToExport = calendarState.events.filter(event => 
            this.selectedEvents.has(event.id) && event.hasPrediction
        );
        
        if (predictionsToExport.length === 0) {
            if (typeof showNotification === 'function') {
                showNotification('‚ùå ≈Ω√°dn√© vybran√© akce s predikc√≠', 'error');
            }
            return;
        }
        
        // CSV speci√°lnƒõ pro vlo≈æen√≠ do Google Sheets predikƒçn√≠ho listu
        const csvHeaders = [
            'N√°zev akce',
            'Kategorie',
            'Mƒõsto', 
            'Datum od',
            'Datum do',
            'N√°v≈°tƒõvn√≠ci',
            'Predikovan√Ω prodej',
            'Confidence %',
            'Oƒçek√°van√Ω obrat',
            'Oƒçek√°van√Ω zisk',
            'Business model',
            'Datum vytvo≈ôen√≠ predikce'
        ];
        
        const csvRows = predictionsToExport.map(event => [
            escapeCSVValue(event.title),
            escapeCSVValue(event.category),
            escapeCSVValue(event.city),
            event.startDate.toLocaleDateString('cs-CZ'),
            event.endDate.toLocaleDateString('cs-CZ'),
            event.data.visitors || 0,
            event.prediction?.predictedSales || 0,
            event.prediction?.confidence || 0,
            event.prediction?.expectedRevenue || 0,
            event.prediction?.expectedProfit || 0,
            escapeCSVValue(event.prediction?.businessModel || ''),
            new Date(event.prediction?.createdAt || Date.now()).toLocaleDateString('cs-CZ')
        ].join(','));
        
        const csvContent = [csvHeaders.join(','), ...csvRows].join('\n');
        
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = `donuland_predikce_pro_sheets_${new Date().toISOString().split('T')[0]}.csv`;
        link.click();
        URL.revokeObjectURL(link.href);
        
        this.clearSelection();
        
        if (typeof showNotification === 'function') {
            showNotification(`üì§ ${predictionsToExport.length} predikc√≠ p≈ôipraveno pro Sheets`, 'success', 4000);
        }
    },
    
    // Hromadn√© smaz√°n√≠ vybran√Ωch ud√°lost√≠
    deleteSelected() {
        if (this.selectedEvents.size === 0) {
            if (typeof showNotification === 'function') {
                showNotification('‚ùå Nejsou vybr√°ny ≈æ√°dn√© ud√°losti', 'error');
            }
            return;
        }
        
        const selectedEventsData = calendarState.events.filter(event => 
            this.selectedEvents.has(event.id)
        );
        
        const mergedCount = selectedEventsData.filter(e => e.hasRealData && e.hasPrediction).length;
        const historicalCount = selectedEventsData.filter(e => e.hasRealData && !e.hasPrediction).length;
        const predictionCount = selectedEventsData.filter(e => !e.hasRealData && e.hasPrediction).length;
        
        let confirmMessage = `Opravdu chcete smazat ${this.selectedEvents.size} vybran√Ωch ud√°lost√≠?\n\n`;
        confirmMessage += `üîÑ ${mergedCount} slouƒçen√Ωch akc√≠\n`;
        confirmMessage += `üìä ${historicalCount} historick√Ωch akc√≠\n`;
        confirmMessage += `ü§ñ ${predictionCount} predikc√≠\n\n`;
        confirmMessage += `Pozor: Smazan√© akce se ji≈æ neobnov√≠ ani po refresh str√°nky!`;
        
        if (!confirm(confirmMessage)) {
            return;
        }
        
        // Smazat ka≈ædou ud√°lost (vyu≈æ√≠v√° blacklist z Part 4A)
        const eventIds = Array.from(this.selectedEvents);
        eventIds.forEach(eventId => {
            const event = calendarState.events.find(e => e.id === eventId);
            if (event) {
                // Pou≈æij deleteEvent funkci z Part 4A (bez potvrzovac√≠ho dialogu)
                deletedEventsManager.addToBlacklist(eventId);
                
                // Pokud je to slouƒçen√° akce, p≈ôidat do blacklistu i souvisej√≠c√≠ predikci
                if (event.hasPrediction && event.prediction && event.prediction.id !== eventId) {
                    deletedEventsManager.addToBlacklist(event.prediction.id);
                }
                
                // Smazat z localStorage pokud je to predikce
                if (event.hasPrediction && event.prediction.id.startsWith('prediction_')) {
                    deletePredictionFromStorage(event.prediction.id);
                }
            }
        });
        
        const deletedCount = this.selectedEvents.size;
        this.clearSelection();
        
        // Refresh kalend√°≈ô
        loadCalendarEvents();
        generateCalendarGrid();
        displayFilteredEventsInCalendar();
        updateMonthEventsList();
        
        if (typeof showNotification === 'function') {
            showNotification(`üóëÔ∏è ${deletedCount} ud√°lost√≠ trvale smaz√°no`, 'success', 4000);
        }
    }
};

// ========================================
// QUICK ADD EVENT (Rychl√© p≈ôid√°n√≠ akce)
// ========================================

// Zobrazen√≠ modalu pro rychl√© p≈ôid√°n√≠ akce
function showQuickAddModal(date = null) {
    console.log('‚ö° Opening quick add modal...');
    
    const modal = document.createElement('div');
    modal.className = 'modal quick-add-modal';
    modal.style.display = 'flex';
    
    const defaultDate = date || new Date();
    const dateString = defaultDate.toISOString().split('T')[0];
    
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>‚ö° Rychl√© p≈ôid√°n√≠ akce</h3>
                <button class="modal-close" onclick="this.closest('.modal').remove()">&times;</button>
            </div>
            <div class="modal-body">
                <div class="quick-form">
                    <div class="form-group">
                        <label>N√°zev akce *</label>
                        <input type="text" id="quickEventName" placeholder="N√°zev akce..." required>
                    </div>
                    
                    <div class="form-group">
                        <label>Kategorie *</label>
                        <select id="quickCategory" required>
                            <option value="">Vyberte kategorii</option>
                            <option value="food festival">Food festival</option>
                            <option value="veletrh">Veletrh</option>
                            <option value="koncert">Koncert</option>
                            <option value="kulturn√≠ akce">Kulturn√≠ akce</option>
                            <option value="sportovn√≠">Sportovn√≠ akce</option>
                            <option value="ostatn√≠">Ostatn√≠</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>Mƒõsto *</label>
                        <input type="text" id="quickCity" placeholder="Mƒõsto..." required>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label>Datum od *</label>
                            <input type="date" id="quickDateFrom" value="${dateString}" required>
                        </div>
                        <div class="form-group">
                            <label>Datum do *</label>
                            <input type="date" id="quickDateTo" value="${dateString}" required>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label>N√°v≈°tƒõvn√≠ci</label>
                            <input type="number" id="quickVisitors" placeholder="1000" min="50">
                        </div>
                        <div class="form-group">
                            <label>Oƒçek√°van√Ω prodej</label>
                            <input type="number" id="quickSales" placeholder="150" min="0">
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>Pozn√°mka</label>
                        <textarea id="quickNotes" rows="2" placeholder="Voliteln√° pozn√°mka..."></textarea>
                    </div>
                    
                    <div class="quick-add-info">
                        <small>üí° Rychle p≈ôidan√° akce bude oznaƒçena jako pl√°novan√° predikce. M≈Ø≈æete ji pozdƒõji upravit nebo smazat.</small>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-save" onclick="saveQuickEvent()">‚ö° P≈ôidat akci</button>
                <button class="btn" onclick="this.closest('.modal').remove()">Zru≈°it</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // Focus na prvn√≠ input
    const nameInput = document.getElementById('quickEventName');
    if (nameInput) {
        setTimeout(() => nameInput.focus(), 100);
    }
    
    // Zav≈ôen√≠ na ESC
    const escHandler = (e) => {
        if (e.key === 'Escape') {
            modal.remove();
            document.removeEventListener('keydown', escHandler);
        }
    };
    document.addEventListener('keydown', escHandler);
    
    // Zav≈ôen√≠ na click mimo
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.remove();
        }
    });
}

// Ulo≈æen√≠ rychl√© ud√°losti
function saveQuickEvent() {
    const modal = document.querySelector('.quick-add-modal');
    if (!modal) return;
    
    console.log('üíæ Saving quick event...');
    
    // Sbƒõr dat z formul√°≈ôe
    const eventName = document.getElementById('quickEventName').value.trim();
    const category = document.getElementById('quickCategory').value;
    const city = document.getElementById('quickCity').value.trim();
    const dateFrom = document.getElementById('quickDateFrom').value;
    const dateTo = document.getElementById('quickDateTo').value;
    const visitors = parseInt(document.getElementById('quickVisitors').value) || 0;
    const sales = parseInt(document.getElementById('quickSales').value) || 0;
    const notes = document.getElementById('quickNotes').value.trim();
    
    // Validace
    if (!eventName || !category || !city || !dateFrom || !dateTo) {
        if (typeof showNotification === 'function') {
            showNotification('‚ùå Vypl≈àte v≈°echna povinn√° pole', 'error');
        }
        return;
    }
    
    if (new Date(dateTo) < new Date(dateFrom)) {
        if (typeof showNotification === 'function') {
            showNotification('‚ùå Datum do mus√≠ b√Ωt stejn√© nebo pozdƒõj≈°√≠ ne≈æ datum od', 'error');
        }
        return;
    }
    
    // Kontrola duplicit - zkontroluj zda u≈æ existuje podobn√° akce
    const startDate = parseDate(dateFrom);
    const endDate = parseDate(dateTo);
    
    const existingEvent = calendarState.events.find(event => {
        const nameMatch = normalizeEventName(event.title) === normalizeEventName(eventName);
        const dateOverlap = datesOverlap(event.startDate, event.endDate, startDate, endDate);
        return nameMatch && dateOverlap;
    });
    
    if (existingEvent) {
        const shouldMerge = confirm(`Akce "${eventName}" u≈æ existuje v podobn√©m term√≠nu.\n\nChcete slouƒçit informace s existuj√≠c√≠ akc√≠?`);
        
        if (shouldMerge) {
            // Slouƒçit s existuj√≠c√≠ akc√≠
            if (!existingEvent.hasPrediction) {
                existingEvent.hasPrediction = true;
                existingEvent.source = 'merged';
                existingEvent.prediction = {
                    id: 'quick_' + Date.now(),
                    predictedSales: sales,
                    confidence: 75, // Default confidence pro rychl√© akce
                    expectedRevenue: sales * 110,
                    expectedProfit: sales * 30,
                    businessModel: 'owner',
                    createdAt: new Date().toISOString(),
                    notes: notes
                };
                
                // Aktualizovat data pokud nejsou vyplnƒõna
                if (!existingEvent.data.visitors && visitors > 0) {
                    existingEvent.data.visitors = visitors;
                }
                if (notes && !existingEvent.data.notes) {
                    existingEvent.data.notes = notes;
                }
            }
            
            modal.remove();
            
            // Refresh zobrazen√≠
            generateCalendarGrid();
            displayFilteredEventsInCalendar();
            updateMonthEventsList();
            
            if (typeof showNotification === 'function') {
                showNotification(`üîÑ Informace slouƒçeny s existuj√≠c√≠ akc√≠ "${eventName}"`, 'success');
            }
            
            return;
        } else {
            // Pokraƒçovat s vytvo≈ôen√≠m nov√© akce i p≈ôes duplicitu
        }
    }
    
    // Vytvo≈ôen√≠ nov√© ud√°losti
    const quickEventId = 'quick_' + Date.now();
    const newEvent = {
        id: quickEventId,
        title: eventName,
        startDate: startDate,
        endDate: endDate,
        category: category,
        city: city,
        status: 'planned',
        source: 'manual',
        color: getUniqueEventColor(),
        hasRealData: false,
        hasPrediction: true,
        data: {
            visitors: visitors,
            predictedSales: sales,
            notes: notes,
            confidence: 75, // Default confidence pro rychl√© akce
            businessModel: 'owner',
            price: 110
        },
        prediction: {
            id: quickEventId,
            predictedSales: sales,
            confidence: 75,
            expectedRevenue: sales * 110,
            expectedProfit: sales * 30,
            businessModel: 'owner',
            createdAt: new Date().toISOString(),
            formData: {
                eventName: eventName,
                category: category,
                city: city,
                eventDateFrom: dateFrom,
                eventDateTo: dateTo,
                visitors: visitors
            }
        }
    };
    
    // P≈ôid√°n√≠ do kalend√°≈ôe
    calendarState.events.push(newEvent);
    filteredEvents.push(newEvent);
    
    // Ulo≈æit do localStorage jako rychlou predikci
    try {
        const savedPredictions = JSON.parse(localStorage.getItem('donuland_predictions') || '[]');
        savedPredictions.push({
            formData: newEvent.prediction.formData,
            prediction: {
                predictedSales: sales,
                confidence: 75
            },
            businessResults: {
                revenue: sales * 110,
                profit: sales * 30
            },
            timestamp: new Date().toISOString(),
            isQuickAdd: true
        });
        localStorage.setItem('donuland_predictions', JSON.stringify(savedPredictions));
    } catch (error) {
        console.warn('Error saving quick event to localStorage:', error);
    }
    
    // Refresh UI
    generateCalendarGrid();
    displayFilteredEventsInCalendar();
    updateMonthEventsList();
    
    // Zav≈ôen√≠ modalu
    modal.remove();
    
    if (typeof showNotification === 'function') {
        showNotification(`‚úÖ Akce "${eventName}" byla rychle p≈ôid√°na`, 'success');
    }
    
    console.log('‚úÖ Quick event added:', newEvent);
}

// ========================================
// MONTH SELECTOR (V√Ωbƒõr mƒõs√≠ce/roku)
// ========================================

// Zobrazen√≠ selektoru mƒõs√≠ce
function showMonthSelector() {
    console.log('üìÖ Opening month selector...');
    
    const modal = document.createElement('div');
    modal.className = 'modal month-selector-modal';
    modal.style.display = 'flex';
    
    const currentYear = calendarState.currentYear;
    const currentMonth = calendarState.currentMonth;
    
    const monthNames = [
        'Leden', '√önor', 'B≈ôezen', 'Duben', 'Kvƒõten', 'ƒåerven',
        'ƒåervenec', 'Srpen', 'Z√°≈ô√≠', '≈ò√≠jen', 'Listopad', 'Prosinec'
    ];
    
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>üìÖ P≈ôej√≠t na mƒõs√≠c</h3>
                <button class="modal-close" onclick="this.closest('.modal').remove()">&times;</button>
            </div>
            <div class="modal-body">
                <div class="month-year-selector">
                    <div class="year-selector">
                        <h4>Rok</h4>
                        <div class="year-buttons">
                            ${[currentYear - 1, currentYear, currentYear + 1].map(year => `
                                <button class="year-btn ${year === currentYear ? 'active' : ''}" 
                                        data-year="${year}">${year}</button>
                            `).join('')}
                        </div>
                    </div>
                    
                    <div class="month-selector">
                        <h4>Mƒõs√≠c</h4>
                        <div class="months-grid">
                            ${monthNames.map((name, index) => `
                                <button class="month-btn ${index === currentMonth ? 'active' : ''}" 
                                        data-month="${index}">${name}</button>
                            `).join('')}
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-save" onclick="applyMonthSelection()">üìÖ P≈ôej√≠t</button>
                <button class="btn" onclick="this.closest('.modal').remove()">Zru≈°it</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // Event listenery pro v√Ωbƒõr
    modal.querySelectorAll('.year-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            modal.querySelectorAll('.year-btn').forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
        });
    });
    
    modal.querySelectorAll('.month-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            modal.querySelectorAll('.month-btn').forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
        });
    });
    
    // Zav≈ôen√≠ na click mimo
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.remove();
        }
    });
}

// Aplikace v√Ωbƒõru mƒõs√≠ce
function applyMonthSelection() {
    const modal = document.querySelector('.month-selector-modal');
    if (!modal) return;
    
    const activeYear = modal.querySelector('.year-btn.active');
    const activeMonth = modal.querySelector('.month-btn.active');
    
    if (activeYear && activeMonth) {
        const year = parseInt(activeYear.dataset.year);
        const month = parseInt(activeMonth.dataset.month);
        
        calendarState.currentYear = year;
        calendarState.currentMonth = month;
        
        updateCurrentMonthDisplay();
        generateCalendarGrid();
        displayFilteredEventsInCalendar();
        updateMonthEventsList();
        
        modal.remove();
        
        if (typeof showNotification === 'function') {
            showNotification(`üìÖ P≈ôe≈°li jste na ${activeMonth.textContent} ${year}`, 'success', 2000);
        }
    }
}

// ========================================
// UI INJECTION (Vlo≈æen√≠ UI komponent)
// ========================================

// Vytvo≈ôen√≠ action bar pro kalend√°≈ô
function createCalendarActionBar() {
    if (document.querySelector('.calendar-action-bar')) {
        return; // U≈æ existuje
    }
    
    const actionBar = document.createElement('div');
    actionBar.className = 'calendar-action-bar';
    
    actionBar.innerHTML = `
        <div class="action-bar-left">
            <button class="btn btn-small" onclick="showQuickAddModal()">
                ‚ö° Rychl√° akce
            </button>
            <button class="btn btn-small" onclick="showMonthSelector()">
                üìÖ P≈ôej√≠t na mƒõs√≠c
            </button>
        </div>
        
        <div class="action-bar-center">
            <div class="calendar-search">
                <div class="search-input-container">
                    <input type="text" id="eventSearch" placeholder="üîç Hledat ud√°losti..." 
                           autocomplete="off" spellcheck="false">
                    <button id="clearSearch" class="clear-search-btn" title="Vymazat vyhled√°v√°n√≠">&times;</button>
                </div>
                <div id="searchStats" class="search-stats" style="display: none;"></div>
            </div>
        </div>
        
        <div class="action-bar-right">
            <button class="btn btn-small" onclick="exportEventsToCSV(filteredEvents)">
                üìÑ Export
            </button>
            <button class="btn btn-small" onclick="bulkOperations.selectAll()">
                ‚òëÔ∏è Vybrat v≈°e
            </button>
            <button class="btn btn-small" onclick="bulkOperations.selectMerged()">
                üîÑ Slouƒçen√©
            </button>
        </div>
    `;
    
    return actionBar;
}

// Vytvo≈ôen√≠ bulk actions toolbar
function createBulkActionsToolbar() {
    if (document.getElementById('bulkActions')) {
        return; // U≈æ existuje
    }
    
    const toolbar = document.createElement('div');
    toolbar.id = 'bulkActions';
    toolbar.className = 'bulk-actions-toolbar';
    toolbar.style.display = 'none';
    
    toolbar.innerHTML = `
        <div class="bulk-info">
            <span id="selectedCount">0</span> vybran√Ωch ud√°lost√≠
            <div id="selectionInfo"></div>
        </div>
        <div class="bulk-buttons">
            <button class="btn btn-small" onclick="bulkOperations.exportSelected()">
                üìÑ Export vybran√Ωch
            </button>
            <button class="btn btn-small btn-export" onclick="bulkOperations.exportPredictionsToSheets()">
                üì§ Predikce ‚Üí Sheets
            </button>
            <button class="btn btn-small btn-delete" onclick="bulkOperations.deleteSelected()">
                üóëÔ∏è Smazat vybran√©
            </button>
            <button class="btn btn-small" onclick="bulkOperations.clearSelection()">
                ‚ùå Zru≈°it v√Ωbƒõr
            </button>
        </div>
    `;
    
    return toolbar;
}

// Vlo≈æen√≠ roz≈°√≠≈ôen√Ωch UI komponent
function injectEnhancedCalendarUI() {
    const calendarSection = document.getElementById('calendar');
    if (!calendarSection) {
        console.log('‚ö†Ô∏è Calendar section not found');
        return;
    }
    
    console.log('üé® Injecting enhanced calendar UI...');
    
    // Naj√≠t kalend√°≈ôovou kartu
    const calendarCards = calendarSection.querySelectorAll('.card');
    const calendarCard = calendarCards[1]; // Druh√° karta (prvn√≠ je controls)
    
    if (calendarCard) {
        // P≈ôidat action bar jako prvn√≠ element v kartƒõ
        if (!document.querySelector('.calendar-action-bar')) {
            const actionBar = createCalendarActionBar();
            const firstChild = calendarCard.firstElementChild;
            calendarCard.insertBefore(actionBar, firstChild);
            console.log('‚úÖ Action bar injected');
        }
        
        // P≈ôidat bulk actions toolbar na konec karty
        if (!document.getElementById('bulkActions')) {
            const bulkActions = createBulkActionsToolbar();
            calendarCard.appendChild(bulkActions);
            console.log('‚úÖ Bulk actions toolbar injected');
        }
    }
    
    console.log('‚úÖ Enhanced calendar UI injected');
}

// ========================================
// ROZ≈†√ç≈òEN√ç INICIALIZACE
// ========================================

// Roz≈°√≠≈ôen√≠ hlavn√≠ inicializace o Part 4C
if (typeof window.initializeCalendar_Part4C_Extended === 'undefined') {
    window.initializeCalendar_Part4C_Extended = true;
    
    const originalInitializeCalendar = window.initializeCalendar;
    window.initializeCalendar = function() {
        if (window.calendarInitialized) {
            console.log('‚ö†Ô∏è Calendar already initialized, skipping...');
            return;
        }
        
        console.log('üîß Initializing calendar with advanced features...');
        
        // P≈Øvodn√≠ inicializace (Part 4A + 4B)
        originalInitializeCalendar();
        
        // Part 4C roz≈°√≠≈ôen√≠
        setTimeout(() => {
            // Inject UI komponenty
            injectEnhancedCalendarUI();
            
            // Initialize search (from Part 4B)
            if (typeof initializeEventSearch === 'function') {
                initializeEventSearch();
            }
            
            console.log('‚úÖ Calendar Part 4C enhancements loaded');
            
            // Show welcome notification
            if (typeof showNotification === 'function') {
                showNotification('üéâ Pokroƒçil√Ω kalend√°≈ô je p≈ôipraven!', 'success', 3000);
            }
        }, 1000);
    };
}

// ========================================
// EVENT LISTENERS PRO PART 4C
// ========================================

// Event listeners pro pokroƒçil√© funkce
if (typeof eventBus !== 'undefined') {
    
    eventBus.on('calendarRequested', () => {
        setTimeout(() => {
            if (!window.calendarInitialized) {
                initializeCalendar();
            } else {
                // Zajistit, ≈æe UI komponenty jsou p≈ô√≠tomny
                injectEnhancedCalendarUI();
            }
        }, 500);
    });
    
    eventBus.on('dataLoaded', () => {
        setTimeout(() => {
            if (typeof globalState !== 'undefined' && globalState.currentSection === 'calendar') {
                loadCalendarEvents();
                filteredEvents = [...calendarState.events];
                displayFilteredEventsInCalendar();
                updateMonthEventsList();
                bulkOperations.clearSelection();
            }
        }, 500);
    });
    
    eventBus.on('predictionSaved', () => {
        setTimeout(() => {
            if (typeof globalState !== 'undefined' && globalState.currentSection === 'calendar') {
                loadCalendarEvents();
                filteredEvents = [...calendarState.events];
                displayFilteredEventsInCalendar();
                updateMonthEventsList();
                bulkOperations.clearSelection();
            }
        }, 500);
    });
    
    // Event po slouƒçen√≠ predikce
    eventBus.on('predictionMerged', (data) => {
        setTimeout(() => {
            loadCalendarEvents();
            filteredEvents = [...calendarState.events];
            displayFilteredEventsInCalendar();
            updateMonthEventsList();
            
            if (typeof showNotification === 'function') {
                showNotification(`üîÑ Predikce byla slouƒçena s akc√≠ "${data.eventName}"`, 'success', 4000);
            }
        }, 500);
    });
    
    // Event po smaz√°n√≠ ud√°losti
    eventBus.on('eventDeleted', (data) => {
        // Odstranit ze selection pokud byla vybr√°na
        bulkOperations.selectedEvents.delete(data.eventId);
        bulkOperations.updateSelectionUI();
    });
}

// ========================================
// ROZ≈†√ç≈òEN√ç SHOWDAYMODAL PRO QUICK ADD
// ========================================

// Roz≈°√≠≈ôen√≠ showDayModal z Part 4B pro quick add mo≈ænost
if (typeof window.showDayModal_Part4C_Extended === 'undefined') {
    window.showDayModal_Part4C_Extended = true;
    
    const originalShowDayModal_Part4B = window.showDayModal;
    window.showDayModal = function(date) {
        const dateKey = formatDateKey(date);
        const dayEvents = filteredEvents.filter(event => {
            const startKey = formatDateKey(event.startDate);
            const endKey = formatDateKey(event.endDate);
            return dateKey >= startKey && dateKey <= endKey;
        });
        
        // Pokud nejsou ≈æ√°dn√© ud√°losti, nab√≠dnout quick add
        if (dayEvents.length === 0) {
            const shouldAddEvent = confirm(`≈Ω√°dn√© ud√°losti v tomto dni.\n\nChcete rychle p≈ôidat novou akci pro ${date.toLocaleDateString('cs-CZ')}?`);
            if (shouldAddEvent) {
                showQuickAddModal(date);
            }
            return;
        }
        
        // Pokraƒçovat s p≈Øvodn√≠ funkc√≠
        originalShowDayModal_Part4B(date);
    };
}

// ========================================
// ROZ≈†√ç≈òEN√ç CALENDAR GRID PRO BULK SELECTION
// ========================================

// Roz≈°√≠≈ôen√≠ createDayCell z Part 4A pro bulk selection
if (typeof window.createDayCell_Part4C_Extended === 'undefined') {
    window.createDayCell_Part4C_Extended = true;
    
    // Override zobrazen√≠ ud√°lost√≠ pro p≈ôid√°n√≠ checkbox≈Ø
    const originalDisplayEventsInCalendar_Part4B = window.displayFilteredEventsInCalendar || displayFilteredEventsInCalendar;
    
    window.displayFilteredEventsInCalendar = function() {
        originalDisplayEventsInCalendar_Part4B();
        
        // P≈ôidat checkboxy k ud√°lostem
        document.querySelectorAll('.event-item').forEach(eventElement => {
            if (!eventElement.classList.contains('more-events') && !eventElement.querySelector('.event-checkbox')) {
                // Naj√≠t souvisej√≠c√≠ ud√°lost podle n√°zvu a data
                const dayCell = eventElement.closest('.calendar-day');
                const dateKey = dayCell?.dataset.date;
                
                if (dateKey) {
                    const dayEvents = filteredEvents.filter(event => {
                        const startKey = formatDateKey(event.startDate);
                        const endKey = formatDateKey(event.endDate);
                        return dateKey >= startKey && dateKey <= endKey;
                    });
                    
                    // Pro jednoduchost p≈ôidat checkbox jen na prvn√≠ ud√°lost v dni
                    const isFirstEvent = eventElement === dayCell.querySelector('.event-item:not(.more-events)');
                    
                    if (isFirstEvent && dayEvents.length > 0) {
                        const event = dayEvents[0]; // Prvn√≠ ud√°lost
                        
                        const checkbox = document.createElement('input');
                        checkbox.type = 'checkbox';
                        checkbox.className = 'event-checkbox';
                        checkbox.dataset.eventId = event.id;
                        checkbox.checked = bulkOperations.selectedEvents.has(event.id);
                        
                        checkbox.addEventListener('change', (e) => {
                            e.stopPropagation();
                            bulkOperations.toggleEventSelection(event.id);
                        });
                        
                        checkbox.addEventListener('click', (e) => {
                            e.stopPropagation();
                        });
                        
                        eventElement.style.position = 'relative';
                        eventElement.appendChild(checkbox);
                    }
                }
            }
        });
    };
}

// ========================================
// ROZ≈†√ç≈òEN√ç MONTH EVENT ITEMS PRO BULK SELECTION
// ========================================

// Roz≈°√≠≈ôen√≠ createMonthEventItem z Part 4B pro checkboxy
if (typeof window.createMonthEventItem_Part4C_Extended === 'undefined') {
    window.createMonthEventItem_Part4C_Extended = true;
    
    const originalCreateMonthEventItem = window.createMonthEventItem;
    window.createMonthEventItem = function(event) {
        let html = originalCreateMonthEventItem(event);
        
        // P≈ôidat checkbox do month event item
        const checkboxHtml = `
            <div class="month-event-checkbox">
                <input type="checkbox" class="event-checkbox" data-event-id="${event.id}" 
                       ${bulkOperations.selectedEvents.has(event.id) ? 'checked' : ''}
                       onchange="event.stopPropagation(); bulkOperations.toggleEventSelection('${event.id}')"
                       onclick="event.stopPropagation()">
            </div>
        `;
        
        // Vlo≈æit checkbox p≈ôed event-stats
        html = html.replace('<div class="event-stats">', checkboxHtml + '<div class="event-stats">');
        
        return html;
    };
}

// ========================================
// HELPER FUNKCE PRO PART 4C
// ========================================

// Helper pro escapov√°n√≠ CSV hodnot (pro p≈ô√≠pad ≈æe nen√≠ v Part 4B)
if (typeof escapeCSVValue === 'undefined') {
    function escapeCSVValue(value) {
        if (!value) return '';
        
        const stringValue = value.toString();
        
        // Pokud obsahuje ƒç√°rku, uvozovky nebo nov√Ω ≈ô√°dek, obalit uvozovkami
        if (stringValue.includes(',') || stringValue.includes('"') || stringValue.includes('\n')) {
            // Escapovat uvozovky zdvojen√≠m
            return '"' + stringValue.replace(/"/g, '""') + '"';
        }
        
        return stringValue;
    }
}

// Helper pro smaz√°n√≠ predikce z localStorage (pro p≈ô√≠pad ≈æe nen√≠ v Part 4A)
if (typeof deletePredictionFromStorage === 'undefined') {
    function deletePredictionFromStorage(predictionId) {
        try {
            const savedPredictions = JSON.parse(localStorage.getItem('donuland_predictions') || '[]');
            const predictionIndex = parseInt(predictionId.replace('prediction_', ''));
            
            if (savedPredictions[predictionIndex]) {
                savedPredictions.splice(predictionIndex, 1);
                localStorage.setItem('donuland_predictions', JSON.stringify(savedPredictions));
            }
        } catch (error) {
            console.error('Error deleting prediction from storage:', error);
        }
    }
}

// ========================================
// GLOB√ÅLN√ç EXPORT PRO PART 4C
// ========================================

// Export funkc√≠ pro HTML onclick handlers
if (typeof window !== 'undefined') {
    window.showQuickAddModal = showQuickAddModal;
    window.saveQuickEvent = saveQuickEvent;
    window.showMonthSelector = showMonthSelector;
    window.applyMonthSelection = applyMonthSelection;
    window.bulkOperations = bulkOperations;
    
    // Roz≈°√≠≈ôen√≠ debug objektu
    if (window.calendarDebug) {
        window.calendarDebug.bulkOperations = bulkOperations;
        window.calendarDebug.quickAdd = {
            addEvent: (name, category, city, date) => {
                showQuickAddModal(date ? new Date(date) : new Date());
                setTimeout(() => {
                    if (name) document.getElementById('quickEventName').value = name;
                    if (category) document.getElementById('quickCategory').value = category;
                    if (city) document.getElementById('quickCity').value = city;
                }, 100);
            }
        };
        window.calendarDebug.getSelectedEvents = () => {
            return calendarState.events.filter(event => 
                bulkOperations.selectedEvents.has(event.id)
            );
        };
    }
}

console.log('‚úÖ Donuland Part 4C loaded successfully');
console.log('üóìÔ∏è Advanced Calendar Features:');
console.log('  ‚úÖ Bulk Operations (select multiple events with enhanced info)');
console.log('  ‚úÖ Quick Add Event with smart duplicate detection');
console.log('  ‚úÖ Month/Year Selector');
console.log('  ‚úÖ Enhanced UI with action bars and bulk selection');
console.log('  ‚úÖ Special export for Google Sheets predictions');
console.log('  ‚úÖ Smart integration with Part 4A blacklist and Part 4B filters');
console.log('‚ö° Features: Quick add, Bulk ops, Month selector, Enhanced UI');

// Emit completion event
if (typeof eventBus !== 'undefined') {
    eventBus.emit('part4CLoaded', { 
        timestamp: Date.now(),
        version: '1.0.0',
        features: [
            'bulk-operations-with-merge-info',
            'quick-add-with-duplicate-detection', 
            'month-year-selector',
            'enhanced-ui-injection',
            'special-sheets-export',
            'smart-bulk-selection',
            'integration-with-blacklist-and-filters'
        ]
    });
}
