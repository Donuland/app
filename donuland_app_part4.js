/* ========================================
   DONULAND PART 4A - KRITICK√â OPRAVY
   Datum parsing a kategorie podle skuteƒçn√Ωch dat ze Sheets
   ======================================== */

console.log('üîß Loading Donuland Part 4A - CRITICAL FIXES...');

// ========================================
// KRITICK√Å OPRAVA 1: DATUM PARSING
// ========================================

// KOMPLETNƒö P≈òEPSAN√Å funkce pro parsing ƒçesk√Ωch dat ze Sheets
function parseSheetDate(dateStr) {
    if (!dateStr || !dateStr.trim()) return null;
    
    console.log(`üìÖ Parsing date: "${dateStr}"`);
    
    // KL√çƒåOV√Å OPRAVA: Rozpozn√°n√≠ form√°t≈Ø ze Sheets
    // Form√°ty ze Sheets: "18.1.2025", "28.6.2025", "8.2.2025"
    const czechDatePattern = /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/;
    const match = dateStr.trim().match(czechDatePattern);
    
    if (match) {
        const day = match[1].padStart(2, '0');
        const month = match[2].padStart(2, '0'); 
        const year = match[3];
        const isoDate = `${year}-${month}-${day}`;
        
        // KRITICK√Å OPRAVA: Validace data s poledn√≠m ƒçasem (eliminuje timezone probl√©my)
        const testDate = new Date(isoDate + 'T12:00:00');
        if (!isNaN(testDate.getTime())) {
            console.log(`‚úÖ Czech date converted: "${dateStr}" ‚Üí "${isoDate}"`);
            return isoDate;
        } else {
            console.warn(`‚ö†Ô∏è Invalid date created: "${isoDate}"`);
            return null;
        }
    }
    
    // Fallback - mo≈æn√° u≈æ je v ISO form√°tu
    const isoPattern = /^\d{4}-\d{2}-\d{2}$/;
    if (isoPattern.test(dateStr.trim())) {
        console.log(`‚úÖ Already ISO format: "${dateStr}"`);
        return dateStr.trim();
    }
    
    console.warn(`‚ö†Ô∏è Could not parse date: "${dateStr}"`);
    return null;
}

// ========================================
// KRITICK√Å OPRAVA 2: KATEGORIE ZE SHEETS
// ========================================

// NOV√Å funkce - p≈ôesn√© kategorie podle skuteƒçn√Ωch dat ze Sheets sloupce F
function normalizeCategory(category) {
    if (!category || !category.trim()) return 'Ostatn√≠';
    
    const original = category.trim();
    console.log(`üè∑Ô∏è Processing category: "${original}"`);
    
    // P≈òESN√â mapov√°n√≠ podle Google Sheets sloupce F:
    // Skuteƒçn√© hodnoty ze Sheets: "Sportovn√≠ akce (dospƒõl√≠)", "veletrh", "food festival"
    const categoryMap = {
        // Sportovn√≠ akce varianty
        'Sportovn√≠ akce (dospƒõl√≠)': 'Sportovn√≠ akce',
        'sportovn√≠ akce (dospƒõl√≠)': 'Sportovn√≠ akce',
        'SPORTOVN√ç AKCE (DOSPƒöL√ç)': 'Sportovn√≠ akce',
        'sportovn√≠ akce': 'Sportovn√≠ akce',
        'sportovn√≠': 'Sportovn√≠ akce',
        
        // Veletrh varianty  
        'veletrh': 'Veletrh',
        'Veletrh': 'Veletrh',
        'VELETRH': 'Veletrh',
        
        // Food festival varianty
        'food festival': 'Food Festival',
        'Food festival': 'Food Festival', 
        'FOOD FESTIVAL': 'Food Festival',
        'food': 'Food Festival',
        'Food': 'Food Festival',
        
        // Dal≈°√≠ mo≈æn√© kategorie
        'koncert': 'Koncert',
        'Koncert': 'Koncert',
        'KONCERT': 'Koncert',
        
        'kulturn√≠ akce': 'Kulturn√≠ akce',
        'Kulturn√≠ akce': 'Kulturn√≠ akce',
        'kulturn√≠': 'Kulturn√≠ akce',
        
        // Ostatn√≠
        'ostatn√≠': 'Ostatn√≠',
        'Ostatn√≠': 'Ostatn√≠'
    };
    
    // Zkus naj√≠t p≈ôesnou shodu
    if (categoryMap[original]) {
        const normalized = categoryMap[original];
        console.log(`üè∑Ô∏è Category mapped: "${original}" ‚Üí "${normalized}"`);
        return normalized;
    }
    
    // Pokud nenajde p≈ôesnou shodu, vra≈• origin√°l (ale s velk√Ωm p√≠smenem)
    const capitalized = original.charAt(0).toUpperCase() + original.slice(1).toLowerCase();
    console.log(`üè∑Ô∏è Category kept as-is: "${original}" ‚Üí "${capitalized}"`);
    return capitalized;
}

// ========================================
// KRITICK√Å OPRAVA 3: DATUM RANGE CHECK
// ========================================

// OPRAVEN√Å funkce pro kontrolu zda datum pat≈ô√≠ do rozsahu ud√°losti
function isDateInEventRange(checkDateISO, eventDateFrom, eventDateTo) {
    if (!eventDateFrom) return false;
    
    // Parse event dates pomoc√≠ OPRAVEN√â funkce
    const parsedFrom = parseSheetDate(eventDateFrom);
    if (!parsedFrom) {
        if (globalState.debugMode) {
            console.warn(`‚ö†Ô∏è Cannot parse dateFrom: "${eventDateFrom}"`);
        }
        return false;
    }
    
    // Pro dateTo - pokud nen√≠ nebo je pr√°zdn√©, pou≈æij dateFrom (jednodenn√≠ akce)
    let parsedTo = parsedFrom;
    if (eventDateTo && eventDateTo.trim() && eventDateTo !== eventDateFrom) {
        const parsed = parseSheetDate(eventDateTo);
        if (parsed) {
            parsedTo = parsed;
        }
    }
    
    // KL√çƒåOV√Å OPRAVA: P≈ô√≠m√© porovn√°n√≠ ISO string≈Ø (nejbezpeƒçnƒõj≈°√≠ zp≈Øsob)
    const inRange = checkDateISO >= parsedFrom && checkDateISO <= parsedTo;
    
    if (globalState.debugMode && inRange) {
        console.log(`‚úÖ Date "${checkDateISO}" is in range ${parsedFrom} - ${parsedTo}`);
    }
    
    return inRange;
}

// ========================================
// KRITICK√Å OPRAVA 4: STATUS DETERMINATION
// ========================================

// OPRAVEN√Å funkce pro urƒçen√≠ statusu ud√°losti podle dne≈°n√≠ho data
function determineEventStatus(dateFrom, dateTo) {
    try {
        const today = new Date();
        today.setHours(0, 0, 0, 0); // P≈Ølnoc pro p≈ôesn√© porovn√°n√≠
        
        // Parse start date
        const parsedDateFrom = parseSheetDate(dateFrom);
        if (!parsedDateFrom) {
            console.warn('‚ö†Ô∏è Invalid dateFrom for status:', dateFrom);
            return 'unknown';
        }
        
        const eventStart = new Date(parsedDateFrom + 'T00:00:00');
        
        // Parse end date (m≈Ø≈æe b√Ωt pr√°zdn√© pro jednodenn√≠ akce)
        let eventEnd = new Date(eventStart);
        if (dateTo && dateTo.trim() && dateTo !== dateFrom) {
            const parsedDateTo = parseSheetDate(dateTo);
            if (parsedDateTo) {
                eventEnd = new Date(parsedDateTo + 'T23:59:59');
            } else {
                eventEnd.setHours(23, 59, 59, 999);
            }
        } else {
            eventEnd.setHours(23, 59, 59, 999);
        }
        
        // Kontrola validity
        if (isNaN(eventStart.getTime()) || isNaN(eventEnd.getTime())) {
            console.warn('‚ö†Ô∏è Invalid dates for status determination:', { dateFrom, dateTo });
            return 'unknown';
        }
        
        // KL√çƒåOV√Å LOGIKA: Urƒçen√≠ statusu
        if (eventEnd < today) {
            return 'completed';  // Akce u≈æ skonƒçila
        } else if (eventStart <= today && today <= eventEnd) {
            return 'ongoing';    // Akce pr√°vƒõ prob√≠h√°
        } else if (eventStart > today) {
            return 'planned';    // Akce je v budoucnosti
        } else {
            return 'unknown';
        }
        
    } catch (error) {
        console.error('‚ùå Error determining event status:', error);
        return 'unknown';
    }
}

// ========================================
// OPRAVA 5: Z√çSK√ÅN√ç UNIK√ÅTN√çCH KATEGORI√ç
// ========================================

// NOV√Å funkce - spr√°vn√© kategorie ze Sheets
function getUniqueCategories() {
    const categories = new Set();
    
    if (globalState.historicalData && globalState.historicalData.length > 0) {
        globalState.historicalData.forEach(record => {
            if (record.category && record.category.trim()) {
                // Pou≈æij OPRAVENOU normalizaci
                const normalized = normalizeCategory(record.category);
                categories.add(normalized);
            }
        });
    }
    
    // P≈ôidej kategorie z predikc√≠
    try {
        const savedPredictions = JSON.parse(localStorage.getItem('donuland_predictions') || '[]');
        savedPredictions.forEach(prediction => {
            if (prediction.formData && prediction.formData.category) {
                categories.add(prediction.formData.category);
            }
        });
    } catch (error) {
        console.warn('‚ö†Ô∏è Error loading prediction categories:', error);
    }
    
    // P≈ôidej kategorie z manu√°ln√≠ch ud√°lost√≠
    try {
        const manualEvents = JSON.parse(localStorage.getItem('donuland_manual_events') || '[]');
        manualEvents.forEach(event => {
            if (event.category) {
                const normalized = normalizeCategory(event.category);
                categories.add(normalized);
            }
        });
    } catch (error) {
        console.warn('‚ö†Ô∏è Error loading manual event categories:', error);
    }
    
    const result = Array.from(categories).sort();
    console.log(`üìã Found ${result.length} unique categories:`, result);
    
    return result;
}

// ========================================
// OPRAVA 6: Z√çSK√ÅN√ç UNIK√ÅTN√çCH MƒöST
// ========================================

// NOV√Å funkce - mƒõsta ze Sheets
function getUniqueCities() {
    const cities = new Set();
    
    if (globalState.historicalData && globalState.historicalData.length > 0) {
        globalState.historicalData.forEach(record => {
            if (record.city && record.city.trim()) {
                cities.add(record.city.trim());
            }
        });
    }
    
    // P≈ôidej mƒõsta z predikc√≠
    try {
        const savedPredictions = JSON.parse(localStorage.getItem('donuland_predictions') || '[]');
        savedPredictions.forEach(prediction => {
            if (prediction.formData && prediction.formData.city) {
                cities.add(prediction.formData.city.trim());
            }
        });
    } catch (error) {
        console.warn('‚ö†Ô∏è Error loading prediction cities:', error);
    }
    
    // P≈ôidej mƒõsta z manu√°ln√≠ch ud√°lost√≠
    try {
        const manualEvents = JSON.parse(localStorage.getItem('donuland_manual_events') || '[]');
        manualEvents.forEach(event => {
            if (event.city) {
                cities.add(event.city.trim());
            }
        });
    } catch (error) {
        console.warn('‚ö†Ô∏è Error loading manual event cities:', error);
    }
    
    const result = Array.from(cities).sort();
    console.log(`üèôÔ∏è Found ${result.length} unique cities:`, result);
    
    return result;
}

// ========================================
// HELPER FUNKCE
// ========================================

// Helper funkce pro vytvo≈ôen√≠ event key
function createEventKey(eventName, city, dateFrom) {
    if (!eventName || !city || !dateFrom) {
        console.warn('‚ö†Ô∏è Incomplete data for event key:', { eventName, city, dateFrom });
        return `incomplete-${Date.now()}-${Math.random()}`;
    }
    
    // Normalizace pro deduplikaci
    const normalizedName = eventName.toLowerCase().trim().replace(/\s+/g, '-');
    const normalizedCity = city.toLowerCase().trim().replace(/\s+/g, '-');
    const normalizedDate = parseSheetDate(dateFrom) || dateFrom;
    
    const key = `${normalizedName}-${normalizedCity}-${normalizedDate}`.replace(/[^a-z0-9-]/g, '');
    
    if (globalState.debugMode) {
        console.log(`üîë Event key created: "${eventName}" + "${city}" + "${dateFrom}" ‚Üí "${key}"`);
    }
    
    return key;
}

// Helper funkce pro status text
function getStatusText(status) {
    const statusMap = {
        'completed': 'Dokonƒçeno',
        'ongoing': 'Prob√≠h√°',
        'planned': 'Pl√°nov√°no',
        'unknown': 'Nezn√°m√Ω'
    };
    return statusMap[status] || status;
}

// Helper funkce pro source text
function getSourceText(source) {
    const sourceMap = {
        'sheets': 'Google Sheets',
        'prediction': 'AI Predikce',
        'manual': 'Manu√°lnƒõ p≈ôid√°no'
    };
    return sourceMap[source] || source;
}

// ========================================
// DEBUG FUNKCE PRO TESTOV√ÅN√ç
// ========================================

// Debug funkce pro testov√°n√≠ Part 4A oprav
function debugPart4AFixes() {
    console.group('üîç DEBUG: Part 4A Fixes Test');
    
    // Test datum parsing
    console.group('üìÖ Date Parsing Test');
    const testDates = [
        '18.1.2025',   // Winter Run
        '25.1.2025',   // Winter Run ƒåesk√© Budƒõjovice
        '8.2.2025',    // Zabijaƒçkov√© hodov√°n√≠
        '9.2.2025',    // Vep≈ôov√© hody
        '14.2.2025'    // ƒåokoFest Ostrava
    ];
    
    testDates.forEach(dateStr => {
        const parsed = parseSheetDate(dateStr);
        const status = parsed ? '‚úÖ PASS' : '‚ùå FAIL';
        console.log(`${status} "${dateStr}" ‚Üí "${parsed}"`);
    });
    console.groupEnd();
    
    // Test kategorie normalizace
    console.group('üè∑Ô∏è Category Normalization Test');
    const testCategories = [
        'Sportovn√≠ akce (dospƒõl√≠)',
        'veletrh', 
        'food festival',
        'koncert',
        'ostatn√≠'
    ];
    
    testCategories.forEach(cat => {
        const normalized = normalizeCategory(cat);
        console.log(`"${cat}" ‚Üí "${normalized}"`);
    });
    console.groupEnd();
    
    // Test status determination
    console.group('üìä Status Test');
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    const today = new Date();
    const tomorrow = new Date(); 
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    const testStatusDates = [
        { name: 'Yesterday', date: yesterday.toISOString().split('T')[0].split('-').reverse().join('.') },
        { name: 'Today', date: today.toISOString().split('T')[0].split('-').reverse().join('.') },
        { name: 'Tomorrow', date: tomorrow.toISOString().split('T')[0].split('-').reverse().join('.') }
    ];
    
    testStatusDates.forEach(test => {
        const status = determineEventStatus(test.date, test.date);
        console.log(`${test.name} (${test.date}): ${status}`);
    });
    console.groupEnd();
    
    console.groupEnd();
    
    return {
        dateParsingOK: testDates.every(d => parseSheetDate(d) !== null),
        categoryMappingOK: testCategories.every(c => normalizeCategory(c) !== 'Ostatn√≠'),
        timestamp: new Date().toISOString()
    };
}

// ========================================
// EXPORT DEBUG FUNKC√ç
// ========================================

if (typeof window !== 'undefined') {
    window.donulandPart4ADebugFixed = {
        debugFixes: debugPart4AFixes,
        testDateParse: (dateStr) => parseSheetDate(dateStr),
        testCategoryNormalize: (category) => normalizeCategory(category),
        testStatus: (dateFrom, dateTo) => determineEventStatus(dateFrom, dateTo),
        testEventKey: (name, city, date) => createEventKey(name, city, date),
        testDateRange: (checkDate, fromDate, toDate) => isDateInEventRange(checkDate, fromDate, toDate),
        getCategories: getUniqueCategories,
        getCities: getUniqueCities
    };
}

console.log('‚úÖ Donuland Part 4A FIXES loaded successfully');
console.log('üîß CRITICAL FIXES: ‚úÖ Czech date parsing (DD.MM.YYYY) ‚úÖ Exact categories from Sheets ‚úÖ Proper status determination');
console.log('üìã Key improvements: Fixed timezone issues, accurate category mapping, working date ranges');
console.log('üß™ Debug: window.donulandPart4ADebugFixed.debugFixes() to test all fixes');
console.log('üìä Data source: Google Sheets columns D(city), E(event), F(category) - now correctly processed');

// Event pro signalizaci dokonƒçen√≠ Part 4A
if (typeof eventBus !== 'undefined') {
    eventBus.emit('part4aFixed', { 
        timestamp: Date.now(),
        version: '4A-FIXED',
        fixes: ['date-parsing', 'category-mapping', 'status-determination', 'data-ranges', 'unique-values']
    });
}
/* ========================================
   DONULAND PART 4B - OPRAVA BAREVN√âHO SYST√âMU
   Unik√°tn√≠ barvy pro ka≈ædou akci (ne podle kategorie!)
   ======================================== */

console.log('üîß Loading Donuland Part 4B - UNIQUE COLORS FOR EVENTS...');

// ========================================
// GLOB√ÅLN√ç KALEND√Å≈òN√ç STAV PRO BARVY
// ========================================

const calendarState = {
    isRendering: false,
    filters: {
        city: '',
        category: '',
        status: ''
    },
    eventColors: new Map(),
    colorPalette: [],
    currentView: 'month'
};

// ========================================
// KRITICK√Å OPRAVA: UNIK√ÅTN√ç BARVY PRO KA≈ΩDOU AKCI
// ========================================

// OPRAVEN√Å funkce pro barvy ud√°lost√≠ - ka≈æd√° akce m√° svou barvu
function getEventColor(eventName, status, category) {
    // PRIORITA 1: Status barvy pouze pro dokonƒçen√© a prob√≠haj√≠c√≠
    if (status === 'completed') {
        return {
            background: '#d4edda',
            border: '#28a745',
            textColor: '#155724',
            icon: '‚úÖ'
        };
    }
    
    if (status === 'ongoing') {
        return {
            background: '#fff3cd', 
            border: '#ffc107',
            textColor: '#856404',
            icon: 'üî•'
        };
    }
    
    // PRIORITA 2: UNIK√ÅTN√ç BARVY PRO KA≈ΩDOU AKCI (planned i ostatn√≠)
    // Kl√≠ƒç podle n√°zvu akce - stejn√° akce = stejn√° barva ve v≈°ech dnech
    const eventKey = eventName.toLowerCase().trim();
    
    if (!calendarState.eventColors.has(eventKey)) {
        // Ujisti se, ≈æe color palette existuje
        if (!calendarState.colorPalette || calendarState.colorPalette.length === 0) {
            calendarState.colorPalette = generateColorPalette();
        }
        
        const hash = hashString(eventKey);
        const colorIndex = hash % calendarState.colorPalette.length;
        const baseColor = calendarState.colorPalette[colorIndex];
        
        // Vytvo≈ô svƒõtlej≈°√≠ background a tmav≈°√≠ border pro lep≈°√≠ ƒçitelnost
        calendarState.eventColors.set(eventKey, {
            background: baseColor + '25', // 25% opacity pro background
            border: baseColor,
            textColor: '#ffffff',
            icon: getEventIcon(category)
        });
        
        console.log(`üé® Assigned unique color ${baseColor} to event: "${eventName}"`);
    }
    
    return calendarState.eventColors.get(eventKey);
}

// ========================================
// OPRAVA: IKONY PODLE KATEGORIE (ne barvy)
// ========================================

// Funkce pro ikony podle kategorie (barvy z≈Øst√°vaj√≠ unik√°tn√≠)
function getEventIcon(category) {
    const categoryIcons = {
        'Sportovn√≠ akce': 'üèÉ',
        'Veletrh': 'üç´',
        'Food Festival': 'üçî',
        'Koncert': 'üéµ',
        'Kulturn√≠ akce': 'üé≠',
        'Ostatn√≠': 'üìÖ'
    };
    
    return categoryIcons[category] || 'üîÆ';
}

// ========================================
// OPRAVA: VYLEP≈†EN√Å PALETA BAREV
// ========================================

// Vylep≈°en√° paleta s v√≠ce kontrastn√≠mi barvami
function generateColorPalette() {
    console.log('üé® Generating enhanced unique color palette...');
    
    const colors = [];
    
    // Z√°kladn√≠ syt√° paleta s dobr√Ωm kontrastem
    const baseColors = [
        // Modr√© odst√≠ny
        '#2196F3', '#3F51B5', '#1976D2', '#0288D1', '#0097A7',
        // Zelen√© odst√≠ny  
        '#4CAF50', '#8BC34A', '#388E3C', '#689F38', '#558B2F',
        // ƒåerven√©/oran≈æov√© odst√≠ny
        '#F44336', '#FF5722', '#FF9800', '#FF6F00', '#E65100',
        // Fialov√© odst√≠ny
        '#9C27B0', '#673AB7', '#8E24AA', '#7B1FA2', '#6A1B9A',
        // R≈Ø≈æov√© odst√≠ny
        '#E91E63', '#AD1457', '#C2185B', '#880E4F',
        // Hnƒõd√©/≈°ed√© odst√≠ny
        '#795548', '#5D4037', '#607D8B', '#455A64',
        // Tyrkysov√© odst√≠ny
        '#009688', '#00695C', '#26A69A', '#00ACC1',
        // ≈Ωlut√©/zlat√© odst√≠ny (pro lep≈°√≠ kontrast s b√≠l√Ωm textem)
        '#FFA000', '#FF8F00', '#F57C00', '#EF6C00'
    ];
    
    colors.push(...baseColors);
    
    // P≈ôidej HSL barvy s vysok√Ωm kontrastem
    for (let hue = 0; hue < 360; hue += 15) {
        // Vysok√° saturace a st≈ôedn√≠ svƒõtlost pro dobr√Ω kontrast
        colors.push(`hsl(${hue}, 80%, 50%)`);
        colors.push(`hsl(${hue}, 70%, 45%)`);
        colors.push(`hsl(${hue}, 90%, 55%)`);
    }
    
    console.log(`üé® Generated color palette with ${colors.length} unique colors`);
    return colors;
}

// ========================================
// OPRAVA: VYLEP≈†EN√Å HASH FUNKCE
// ========================================

// Vylep≈°en√° hash funkce pro lep≈°√≠ distribuci barev
function hashString(str) {
    let hash = 0;
    let char;
    
    if (str.length === 0) return hash;
    
    for (let i = 0; i < str.length; i++) {
        char = str.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash; // P≈ôev√©st na 32bit integer
    }
    
    // V√≠ce vrstev randomizace pro lep≈°√≠ distribuci
    hash = hash * 9301 + 49297;
    hash = hash % 233280;
    hash = Math.abs(hash);
    
    // P≈ôidej dal≈°√≠ randomizaci pro lep≈°√≠ rozlo≈æen√≠
    hash = (hash * 16807) % 2147483647;
    
    return hash;
}

// ========================================
// HLAVN√ç FUNKCE PRO Z√çSK√ÅN√ç UD√ÅLOST√ç PRO DATUM
// ========================================

// KL√çƒåOV√Å FUNKCE: Z√≠sk√°n√≠ v≈°ech ud√°lost√≠ pro konkr√©tn√≠ datum
function getEventsForDate(date) {
    // P≈ôeveƒè datum na ISO string pro porovn√°n√≠
    const dateStr = date.toISOString().split('T')[0]; // YYYY-MM-DD form√°t
    const eventMap = new Map();
    
    if (globalState.debugMode) {
        console.log(`üìÖ Getting events for date: ${dateStr}`);
    }
    
    try {
        // 1. HISTORICK√â AKCE z Google Sheets 
        if (globalState.historicalData && globalState.historicalData.length > 0) {
            globalState.historicalData.forEach(record => {
                // Pou≈æij novou funkce pro kontrolu rozsahu
                if (isDateInEventRange(dateStr, record.dateFrom, record.dateTo)) {
                    const eventKey = createEventKey(record.eventName, record.city, record.dateFrom);
                    
                    const status = determineEventStatus(record.dateFrom, record.dateTo);
                    const normalizedCategory = normalizeCategory(record.category);
                    
                    const event = {
                        id: `historical-${record.rowIndex || Date.now()}`,
                        type: 'historical',
                        status: status,
                        title: record.eventName,
                        city: record.city,
                        category: normalizedCategory,
                        sales: record.sales,
                        visitors: record.visitors,
                        rating: record.rating,
                        dateFrom: record.dateFrom,
                        dateTo: record.dateTo,
                        data: record,
                        eventKey: eventKey,
                        source: 'sheets'
                    };
                    
                    eventMap.set(eventKey, event);
                    
                    if (globalState.debugMode) {
                        console.log(`üìä Found historical event: ${event.title} for ${dateStr}`);
                    }
                }
            });
        }
        
        // 2. ULO≈ΩEN√â PREDIKCE z localStorage
        try {
            const savedPredictions = JSON.parse(localStorage.getItem('donuland_predictions') || '[]');
            savedPredictions.forEach(prediction => {
                if (prediction.formData && isDateInEventRange(dateStr, prediction.formData.eventDateFrom, prediction.formData.eventDateTo)) {
                    const eventKey = createEventKey(
                        prediction.formData.eventName, 
                        prediction.formData.city, 
                        prediction.formData.eventDateFrom
                    );
                    
                    if (eventMap.has(eventKey)) {
                        // Slouƒçen√≠ s existuj√≠c√≠ historickou akc√≠
                        const existingEvent = eventMap.get(eventKey);
                        existingEvent.hasPrediction = true;
                        existingEvent.predictionData = prediction;
                        existingEvent.predictedSales = prediction.prediction?.predictedSales;
                        existingEvent.confidence = prediction.prediction?.confidence;
                    } else {
                        // Nov√° predikƒçn√≠ akce
                        const status = determineEventStatus(
                            prediction.formData.eventDateFrom, 
                            prediction.formData.eventDateTo
                        );
                        
                        const event = {
                            id: `prediction-${prediction.id || Date.now()}`,
                            type: 'prediction',
                            status: status,
                            title: prediction.formData.eventName,
                            city: prediction.formData.city,
                            category: prediction.formData.category,
                            predictedSales: prediction.prediction?.predictedSales,
                            actualSales: prediction.actualSales,
                            confidence: prediction.prediction?.confidence,
                            visitors: prediction.formData.visitors,
                            dateFrom: prediction.formData.eventDateFrom,
                            dateTo: prediction.formData.eventDateTo || prediction.formData.eventDateFrom,
                            data: prediction,
                            eventKey: eventKey,
                            source: 'prediction'
                        };
                        
                        eventMap.set(eventKey, event);
                    }
                }
            });
        } catch (error) {
            console.warn('‚ö†Ô∏è Error processing predictions:', error);
        }
        
        // 3. MANU√ÅLNƒö P≈òIDAN√â UD√ÅLOSTI
        try {
            const manualEvents = JSON.parse(localStorage.getItem('donuland_manual_events') || '[]');
            manualEvents.forEach(event => {
                if (isDateInEventRange(dateStr, event.dateFrom, event.dateTo)) {
                    const eventKey = createEventKey(event.eventName, event.city, event.dateFrom);
                    
                    if (!eventMap.has(eventKey)) {
                        const status = determineEventStatus(event.dateFrom, event.dateTo);
                        
                        const newEvent = {
                            id: `manual-${event.id || Date.now()}`,
                            type: 'manual',
                            status: status,
                            title: event.eventName,
                            city: event.city,
                            category: event.category || 'ostatn√≠',
                            sales: event.sales,
                            visitors: event.visitors || 0,
                            dateFrom: event.dateFrom,
                            dateTo: event.dateTo || event.dateFrom,
                            data: event,
                            eventKey: eventKey,
                            source: 'manual'
                        };
                        
                        eventMap.set(eventKey, newEvent);
                    }
                }
            });
        } catch (error) {
            console.warn('‚ö†Ô∏è Error processing manual events:', error);
        }
        
    } catch (error) {
        console.warn('‚ö†Ô∏è Error getting events for date:', dateStr, error);
    }
    
    // APLIKACE FILTR≈Æ
    const filteredEvents = Array.from(eventMap.values()).filter(event => {
        // City filter
        if (calendarState.filters.city) {
            const filterCity = calendarState.filters.city.toLowerCase().trim();
            const eventCity = (event.city || '').toLowerCase().trim();
            if (eventCity !== filterCity) return false;
        }
        
        // Category filter
        if (calendarState.filters.category) {
            if (event.category !== calendarState.filters.category) return false;
        }
        
        // Status filter
        if (calendarState.filters.status) {
            if (calendarState.filters.status === 'planned') {
                if (event.status !== 'planned' && event.status !== 'ongoing') return false;
            } else if (calendarState.filters.status === 'completed') {
                if (event.status !== 'completed') return false;
            } else {
                if (event.status !== calendarState.filters.status) return false;
            }
        }
        
        return true;
    });
    
    if (globalState.debugMode && filteredEvents.length > 0) {
        console.log(`üìÖ Events for ${dateStr} after filtering:`, filteredEvents.map(e => e.title));
    }
    
    return filteredEvents;
}

// ========================================
// OPRAVA: EVENT ELEMENT S UNIK√ÅTN√çMI BARVAMI
// ========================================

// OPRAVEN√Å funkce pro vytvo≈ôen√≠ event elementu
function createEventElement(event, date) {
    const eventElement = document.createElement('div');
    eventElement.className = 'event-item';
    
    // KL√çƒåOV√Å OPRAVA: Pou≈æ√≠vej n√°zev akce pro unik√°tn√≠ barvy
    const colorInfo = getEventColor(event.title, event.status, event.category);
    
    if (globalState.debugMode) {
        console.log(`üé® Event "${event.title}" assigned color:`, colorInfo);
    }
    
    // Aplikace barev
    eventElement.style.background = colorInfo.background;
    eventElement.style.borderLeft = `4px solid ${colorInfo.border}`;
    eventElement.style.color = colorInfo.textColor;
    eventElement.style.fontWeight = '600';
    eventElement.style.fontSize = '0.75rem';
    eventElement.style.padding = '4px 6px';
    eventElement.style.marginBottom = '2px';
    eventElement.style.borderRadius = '4px';
    eventElement.style.cursor = 'pointer';
    eventElement.style.transition = 'all 0.2s ease';
    eventElement.style.boxShadow = '0 1px 3px rgba(0,0,0,0.1)';
    
    // Text ud√°losti s ikonou
    let eventText = event.title;
    let statusIcon = colorInfo.icon;
    
    // Speci√°ln√≠ oznaƒçen√≠ pro ud√°losti s predikc√≠
    if (event.hasPrediction) {
        statusIcon = 'üîÆ';
        eventElement.style.background = `linear-gradient(45deg, ${colorInfo.background}, rgba(33, 150, 243, 0.2))`;
        eventElement.classList.add('has-prediction');
    }
    
    // Zkr√°cen√≠ textu pro lep≈°√≠ zobrazen√≠
    const maxLength = 15;
    if (eventText.length > maxLength) {
        eventText = eventText.substring(0, maxLength - 3) + '...';
    }
    
    eventElement.textContent = `${statusIcon} ${eventText}`;
    
    // Vylep≈°en√Ω tooltip
    const tooltipInfo = createEventTooltip(event);
    eventElement.title = tooltipInfo;
    
    // CSS t≈ô√≠dy pro styling
    eventElement.classList.add(event.status || 'unknown');
    eventElement.classList.add(event.type || 'unknown');
    eventElement.setAttribute('data-category', event.category || 'Ostatn√≠');
    eventElement.setAttribute('data-event-name', event.title);
    
    // Hover efekty
    setupEventHoverEffects(eventElement);
    
    // Click handler pro editaci ud√°losti
    eventElement.addEventListener('click', (e) => {
        e.stopPropagation();
        console.log('üìÖ Event clicked:', event);
        if (typeof openEventModal === 'function') {
            openEventModal(event);
        }
    });
    
    return eventElement;
}

// ========================================
// TOOLTIP A HOVER EFEKTY
// ========================================

// Vytvo≈ôen√≠ tooltip textu pro ud√°lost
function createEventTooltip(event) {
    const tooltipParts = [
        `üìã ${event.title}`,
        `üìç ${event.city}`,
        `üè∑Ô∏è ${event.category}`,
        `üìä Status: ${getStatusText(event.status)}`
    ];
    
    if (event.sales) {
        tooltipParts.push(`üç© Prod√°no: ${formatNumber(event.sales)} ks`);
    }
    
    if (event.predictedSales) {
        tooltipParts.push(`üîÆ Predikce: ${formatNumber(event.predictedSales)} ks`);
    }
    
    if (event.confidence) {
        tooltipParts.push(`üéØ Confidence: ${event.confidence}%`);
    }
    
    if (event.visitors) {
        tooltipParts.push(`üë• N√°v≈°tƒõvnost: ${formatNumber(event.visitors)}`);
    }
    
    // Datum rozsah
    const dateRange = event.dateTo && event.dateTo !== event.dateFrom ? 
        `${formatDate(event.dateFrom)} - ${formatDate(event.dateTo)}` : 
        formatDate(event.dateFrom);
    tooltipParts.push(`üìÖ ${dateRange}`);
    
    if (event.source) {
        tooltipParts.push(`üìÇ Zdroj: ${getSourceText(event.source)}`);
    }
    
    return tooltipParts.filter(Boolean).join('\n');
}

// Vylep≈°en√© hover efekty
function setupEventHoverEffects(eventElement) {
    eventElement.addEventListener('mouseenter', () => {
        eventElement.style.transform = 'scale(1.05) translateY(-1px)';
        eventElement.style.zIndex = '10';
        eventElement.style.boxShadow = '0 4px 12px rgba(0,0,0,0.2)';
        eventElement.style.borderLeftWidth = '5px';
    });
    
    eventElement.addEventListener('mouseleave', () => {
        eventElement.style.transform = 'scale(1) translateY(0)';
        eventElement.style.zIndex = '1';
        eventElement.style.boxShadow = '0 1px 3px rgba(0,0,0,0.1)';
        eventElement.style.borderLeftWidth = '4px';
    });
}

// ========================================
// FILTRY KALEND√Å≈òE
// ========================================

// Naplnƒõn√≠ filter dropdown≈Ø s re√°ln√Ωmi daty
function populateFilterDropdowns() {
    console.log('üîß Populating filter dropdowns with real data...');
    
    try {
        // Mƒõsto filter
        const cityFilter = document.getElementById('cityFilter');
        if (cityFilter) {
            const cities = getUniqueCities();
            
            // Vymazat souƒçasn√© mo≈ænosti (kromƒõ prvn√≠)
            while (cityFilter.children.length > 1) {
                cityFilter.removeChild(cityFilter.lastChild);
            }
            
            // P≈ôidat mƒõsta
            cities.forEach(city => {
                const option = document.createElement('option');
                option.value = city;
                option.textContent = `üèôÔ∏è ${city}`;
                cityFilter.appendChild(option);
            });
            
            console.log(`üèôÔ∏è City filter populated with ${cities.length} cities`);
        }
        
        // Kategorie filter
        const categoryFilter = document.getElementById('categoryFilter');
        if (categoryFilter) {
            const categories = getUniqueCategories();
            
            // Vymazat souƒçasn√© mo≈ænosti (kromƒõ prvn√≠)
            while (categoryFilter.children.length > 1) {
                categoryFilter.removeChild(categoryFilter.lastChild);
            }
            
            // Mapov√°n√≠ ikon pro kategorie
            const categoryIcons = {
                'Food Festival': 'üçî',
                'Veletrh': 'üç´',
                'Koncert': 'üéµ',
                'Kulturn√≠ akce': 'üé≠',
                'Sportovn√≠ akce': 'üèÉ',
                'Ostatn√≠': 'üìÖ'
            };
            
            // P≈ôidat kategorie
            categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category;
                const icon = categoryIcons[category] || 'üìã';
                option.textContent = `${icon} ${category}`;
                categoryFilter.appendChild(option);
            });
            
            console.log(`üìã Category filter populated with ${categories.length} categories`);
        }
        
        console.log('‚úÖ Filter dropdowns populated successfully');
        
    } catch (error) {
        console.error('‚ùå Error populating filter dropdowns:', error);
    }
}

// Aplikace filtr≈Ø na kalend√°≈ô
function filterCalendar() {
    console.log('üîç Applying calendar filters...');
    
    try {
        // Z√≠skej hodnoty filtr≈Ø
        const cityFilter = document.getElementById('cityFilter');
        const categoryFilter = document.getElementById('categoryFilter');
        const statusFilter = document.getElementById('statusFilter');
        
        // Aktualizuj filtry v calendarState
        calendarState.filters = {
            city: cityFilter ? cityFilter.value : '',
            category: categoryFilter ? categoryFilter.value : '',
            status: statusFilter ? statusFilter.value : ''
        };
        
        console.log('üîç Applied filters:', calendarState.filters);
        
        // Re-render kalend√°≈ô s nov√Ωmi filtry
        if (typeof renderCalendar === 'function') {
            renderCalendar();
        }
        
        // Zobraz poƒçet filtrovan√Ωch ud√°lost√≠
        const totalEvents = getTotalFilteredEvents();
        if (typeof showNotification === 'function') {
            showNotification(`üîç Filtry aplikov√°ny - zobrazeno ${totalEvents} ud√°lost√≠`, 'info', 2000);
        }
        
    } catch (error) {
        console.error('‚ùå Error applying filters:', error);
        if (typeof showNotification === 'function') {
            showNotification('‚ùå Chyba p≈ôi aplikaci filtr≈Ø', 'error');
        }
    }
}

// Poƒç√≠t√°n√≠ filtrovan√Ωch ud√°lost√≠
function getTotalFilteredEvents() {
    if (!globalState.historicalData) return 0;
    
    let count = 0;
    const currentDate = new Date(globalState.currentYear, globalState.currentMonth, 1);
    const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
    const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
    
    // Projdi v≈°echny dny v mƒõs√≠ci
    for (let day = firstDay; day <= lastDay; day.setDate(day.getDate() + 1)) {
        const events = getEventsForDate(new Date(day));
        count += events.length;
    }
    
    return count;
}

// Vymaz√°n√≠ filtr≈Ø
function clearCalendarFilters() {
    console.log('üßπ Clearing calendar filters...');
    
    try {
        const cityFilter = document.getElementById('cityFilter');
        const categoryFilter = document.getElementById('categoryFilter');
        const statusFilter = document.getElementById('statusFilter');
        
        if (cityFilter) cityFilter.value = '';
        if (categoryFilter) categoryFilter.value = '';
        if (statusFilter) statusFilter.value = '';
        
        calendarState.filters = { city: '', category: '', status: '' };
        
        // Re-render kalend√°≈ô
        if (typeof renderCalendar === 'function') {
            renderCalendar();
        }
        
        if (typeof showNotification === 'function') {
            showNotification('üîÑ Filtry kalend√°≈ôe vymaz√°ny', 'info', 2000);
        }
        console.log('‚úÖ Calendar filters cleared');
        
    } catch (error) {
        console.error('‚ùå Error clearing filters:', error);
        if (typeof showNotification === 'function') {
            showNotification('‚ùå Chyba p≈ôi maz√°n√≠ filtr≈Ø', 'error');
        }
    }
}

// ========================================
// DEBUG FUNKCE PRO TESTOV√ÅN√ç
// ========================================

// Debug funkce pro testov√°n√≠ unik√°tn√≠ch barev
function debugUniqueColors() {
    console.group('üîç DEBUG: Unique Colors System Test');
    
    // Test r≈Øzn√Ωch akc√≠ - ka≈æd√° by mƒõla m√≠t jinou barvu
    const testEvents = [
        'Winter Run',
        'ƒåokoFest', 
        'Food Day Festival',
        'Street Food',
        'Burger Festival',
        'Maj√°les',
        'Night Run',
        'Pivn√≠ slavnosti'
    ];
    
    console.log('üé® Testing unique colors for events:');
    testEvents.forEach(eventName => {
        const colorInfo = getEventColor(eventName, 'planned', 'Food Festival');
        console.log(`"${eventName}": ${colorInfo.border} (${colorInfo.icon})`);
    });
    
    // Test stejn√Ωch akc√≠ - mƒõly by m√≠t stejnou barvu
    console.log('\nüîÑ Testing consistency (same event should have same color):');
    const sameEventColors = [
        getEventColor('Winter Run', 'planned', 'Sportovn√≠ akce'),
        getEventColor('Winter Run', 'planned', 'Sportovn√≠ akce'),
        getEventColor('Winter Run', 'ongoing', 'Sportovn√≠ akce')
    ];
    
    const colorsMatch = sameEventColors.every(color => 
        color.border === sameEventColors[0].border
    );
    
    console.log(`Same event consistency: ${colorsMatch ? '‚úÖ PASS' : '‚ùå FAIL'}`);
    
    console.groupEnd();
    
    return {
        paletteSize: calendarState.colorPalette?.length || 0,
        cachedColors: calendarState.eventColors?.size || 0,
        consistency: colorsMatch
    };
}

// ========================================
// EXPORT DEBUG FUNKC√ç
// ========================================

if (typeof window !== 'undefined') {
    window.donulandPart4BColorsFixed = {
        debugUniqueColors: debugUniqueColors,
        testEventColor: (name, status, category) => getEventColor(name, status, category),
        clearColorCache: () => {
            calendarState.eventColors.clear();
            console.log('üßπ Color cache cleared');
        },
        getColorStats: () => ({
            paletteSize: calendarState.colorPalette?.length || 0,
            cachedColors: calendarState.eventColors?.size || 0,
            colors: Array.from(calendarState.eventColors.entries())
        }),
        getEventsForDate: getEventsForDate,
        populateFilterDropdowns: populateFilterDropdowns,
        filterCalendar: filterCalendar
    };
}

console.log('‚úÖ Donuland Part 4B UNIQUE COLORS loaded successfully');
console.log('üé® SYSTEM: Each event gets unique color by name - same event = same color across all days');
console.log('üåà Status colors: Completed=Green ‚úÖ, Ongoing=Orange üî•, Others=Unique colors per event üîÆ');
console.log('üß™ Debug: window.donulandPart4BColorsFixed.debugUniqueColors() to test color system');
console.log('üìã This fixes the gray planned events issue - each event will have its own color!');

// Event pro signalizaci dokonƒçen√≠ Part 4B
if (typeof eventBus !== 'undefined') {
    eventBus.emit('part4bColorsFixed', { 
        timestamp: Date.now(),
        version: '4B-COLORS-FIXED',
        fixes: ['unique-event-colors', 'multi-day-consistency', 'enhanced-palette', 'better-contrast', 'event-loading', 'filtering-system']
    });
}
/* ========================================
   DONULAND PART 4C - KALEND√Å≈òN√ç RENDERING A UI
   Vykreslov√°n√≠ kalend√°≈ôe, barevn√Ω syst√©m, UI komponenty
   ======================================== */

console.log('üç© Donuland Part 4C loading...');

// ========================================
// HLAVN√ç FUNKCE PRO VYKRESLEN√ç KALEND√Å≈òE
// ========================================

// HLAVN√ç funkce pro vykreslen√≠ kalend√°≈ôe
function renderCalendar() {
    if (calendarState.isRendering) {
        console.log('‚ö†Ô∏è Calendar already rendering, skipping...');
        return;
    }
    
    console.log('üìÖ Rendering calendar...');
    calendarState.isRendering = true;
    
    try {
        const calendarGrid = document.getElementById('calendarGrid');
        if (!calendarGrid) {
            console.error('‚ùå Calendar grid not found');
            return;
        }
        
        // Vymaz√°n√≠ souƒçasn√©ho obsahu
        calendarGrid.innerHTML = '';
        
        // P≈ôid√°n√≠ hlaviƒçek dn≈Ø
        const dayHeaders = ['Po', '√öt', 'St', 'ƒåt', 'P√°', 'So', 'Ne'];
        dayHeaders.forEach(day => {
            const header = document.createElement('div');
            header.className = 'calendar-header';
            header.textContent = day;
            calendarGrid.appendChild(header);
        });
        
        // Z√≠sk√°n√≠ dn≈Ø v mƒõs√≠ci s ud√°lostmi
        const year = globalState.currentYear;
        const month = globalState.currentMonth;
        const daysInMonth = getDaysInMonth(year, month);
        
        // P≈ôid√°n√≠ dn≈Ø do kalend√°≈ôe
        daysInMonth.forEach(dayData => {
            const dayElement = createCalendarDay(dayData);
            calendarGrid.appendChild(dayElement);
        });
        
        console.log(`‚úÖ Calendar rendered for ${month + 1}/${year} with ${daysInMonth.length} days`);
        
        // Aktualizace month events list
        updateMonthEventsList();
        
        // Emit event o dokonƒçen√≠ renderingu
        if (typeof eventBus !== 'undefined') {
            eventBus.emit('calendarRendered', { 
                year, 
                month, 
                totalDays: daysInMonth.length,
                eventsCount: daysInMonth.reduce((sum, d) => sum + d.events.length, 0)
            });
        }
        
    } catch (error) {
        console.error('‚ùå Error rendering calendar:', error);
        if (typeof showNotification === 'function') {
            showNotification('‚ùå Chyba p≈ôi vykreslov√°n√≠ kalend√°≈ôe', 'error');
        }
    } finally {
        calendarState.isRendering = false;
    }
}

// ========================================
// GENEROV√ÅN√ç DN√ç V MƒöS√çCI
// ========================================

// Z√≠sk√°n√≠ dn≈Ø v mƒõs√≠ci s ud√°lostmi
function getDaysInMonth(year, month) {
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const daysFromPrevMonth = (firstDay.getDay() + 6) % 7; // Pondƒõl√≠ = 0
    
    const days = [];
    
    console.log(`üìÖ Generating calendar for ${month + 1}/${year}`);
    
    // Dny z p≈ôedchoz√≠ho mƒõs√≠ce
    const prevMonth = new Date(year, month, 0);
    for (let i = daysFromPrevMonth - 1; i >= 0; i--) {
        const date = new Date(prevMonth.getFullYear(), prevMonth.getMonth(), prevMonth.getDate() - i);
        days.push({
            date: date,
            isCurrentMonth: false,
            events: getEventsForDate(date)
        });
    }
    
    // Dny souƒçasn√©ho mƒõs√≠ce
    for (let day = 1; day <= lastDay.getDate(); day++) {
        const date = new Date(year, month, day);
        days.push({
            date: date,
            isCurrentMonth: true,
            events: getEventsForDate(date)
        });
    }
    
    // Dny z n√°sleduj√≠c√≠ho mƒõs√≠ce (do √∫pln√Ωch 42 dn≈Ø = 6 t√Ωdn≈Ø)
    const totalDays = 42;
    const remainingDays = totalDays - days.length;
    for (let day = 1; day <= remainingDays; day++) {
        const date = new Date(year, month + 1, day);
        days.push({
            date: date,
            isCurrentMonth: false,
            events: getEventsForDate(date)
        });
    }
    
    if (globalState.debugMode) {
        const currentMonthDays = days.filter(d => d.isCurrentMonth);
        const totalEvents = days.reduce((sum, d) => sum + d.events.length, 0);
        console.log(`üìä Calendar stats: ${currentMonthDays.length} days in month, ${totalEvents} total events`);
    }
    
    return days;
}

// ========================================
// VYTVO≈òEN√ç KALEND√Å≈òN√çHO DNE
// ========================================

// Vytvo≈ôen√≠ prvku kalend√°≈ôn√≠ho dne
function createCalendarDay(dayData) {
    const dayElement = document.createElement('div');
    dayElement.className = 'calendar-day';
    
    if (!dayData.isCurrentMonth) {
        dayElement.classList.add('other-month');
    }
    
    // Kontrola dne≈°n√≠ho dne
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const dayDate = new Date(dayData.date);
    dayDate.setHours(0, 0, 0, 0);
    
    if (dayDate.getTime() === today.getTime()) {
        dayElement.classList.add('today');
    }
    
    // Pokud m√° ud√°losti
    if (dayData.events.length > 0) {
        dayElement.classList.add('has-events');
    }
    
    // ƒå√≠slo dne
    const dayNumber = document.createElement('div');
    dayNumber.className = 'day-number';
    dayNumber.textContent = dayData.date.getDate();
    dayElement.appendChild(dayNumber);
    
    // Container pro ud√°losti
    const eventsContainer = document.createElement('div');
    eventsContainer.className = 'day-events';
    
    // Zobrazit maxim√°lnƒõ 4 ud√°losti na den
    const maxEventsToShow = 4;
    dayData.events.slice(0, maxEventsToShow).forEach(event => {
        const eventElement = createEventElement(event, dayData.date);
        eventsContainer.appendChild(eventElement);
    });
    
    // Indik√°tor dal≈°√≠ch ud√°lost√≠
    if (dayData.events.length > maxEventsToShow) {
        const moreIndicator = createMoreEventsIndicator(dayData);
        eventsContainer.appendChild(moreIndicator);
    }
    
    dayElement.appendChild(eventsContainer);
    
    // Click handler pro p≈ôid√°n√≠ nov√© ud√°losti
    dayElement.addEventListener('click', (e) => {
        // Pouze pokud se nekliklo na existuj√≠c√≠ ud√°lost
        if (!e.target.closest('.event-item') && dayData.isCurrentMonth) {
            console.log('üìÖ Day clicked for new event:', dayData.date);
            if (typeof openEventModal === 'function') {
                openEventModal(null, dayData.date);
            }
        }
    });
    
    return dayElement;
}

// ========================================
// VYLEP≈†EN√ù INDIK√ÅTOR DAL≈†√çCH UD√ÅLOST√ç
// ========================================

// Vylep≈°en√Ω indik√°tor pro v√≠ce ud√°lost√≠
function createMoreEventsIndicator(dayData) {
    const additionalEvents = dayData.events.length - 4;
    
    const moreIndicator = document.createElement('div');
    moreIndicator.className = 'event-item more-events';
    moreIndicator.textContent = `+${additionalEvents} dal≈°√≠ch`;
    
    // Styling pro "v√≠ce ud√°lost√≠"
    moreIndicator.style.background = 'linear-gradient(135deg, #6c757d, #495057)';
    moreIndicator.style.color = '#ffffff';
    moreIndicator.style.fontWeight = '600';
    moreIndicator.style.padding = '4px 6px';
    moreIndicator.style.borderRadius = '4px';
    moreIndicator.style.fontSize = '0.7rem';
    moreIndicator.style.cursor = 'pointer';
    moreIndicator.style.textAlign = 'center';
    moreIndicator.style.border = '2px solid #495057';
    moreIndicator.style.marginTop = '2px';
    moreIndicator.style.transition = 'all 0.2s ease';
    
    // Hover efekt
    moreIndicator.addEventListener('mouseenter', () => {
        moreIndicator.style.background = 'linear-gradient(135deg, #495057, #343a40)';
        moreIndicator.style.transform = 'scale(1.05)';
    });
    
    moreIndicator.addEventListener('mouseleave', () => {
        moreIndicator.style.background = 'linear-gradient(135deg, #6c757d, #495057)';
        moreIndicator.style.transform = 'scale(1)';
    });
    
    moreIndicator.addEventListener('click', (e) => {
        e.stopPropagation();
        showDayEventsPopup(dayData.date, dayData.events);
    });
    
    return moreIndicator;
}

// ========================================
// MONTH EVENTS LIST
// ========================================

// Aktualizace seznamu ud√°lost√≠ v mƒõs√≠ci
function updateMonthEventsList() {
    console.log('üìã Updating month events list...');
    
    const monthEventsContainer = document.getElementById('monthEvents');
    if (!monthEventsContainer) {
        console.warn('‚ö†Ô∏è Month events container not found');
        return;
    }
    
    try {
        // Z√≠skej v≈°echny ud√°losti pro aktu√°ln√≠ mƒõs√≠c
        const monthEvents = getEventsForCurrentMonth();
        
        if (monthEvents.length === 0) {
            displayNoEventsMessage(monthEventsContainer);
            return;
        }
        
        // Seskup ud√°losti podle data
        const eventsByDate = groupEventsByDate(monthEvents);
        
        // Vytvo≈ô HTML pro seznam
        const html = generateMonthEventsHTML(eventsByDate);
        monthEventsContainer.innerHTML = html;
        
        console.log(`üìã Month events list updated: ${monthEvents.length} events`);
        
    } catch (error) {
        console.error('‚ùå Error updating month events list:', error);
        monthEventsContainer.innerHTML = `
            <div class="error-message">
                <p>‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ ud√°lost√≠ mƒõs√≠ce</p>
            </div>
        `;
    }
}

// Z√≠sk√°n√≠ v≈°ech ud√°lost√≠ pro aktu√°ln√≠ mƒõs√≠c
function getEventsForCurrentMonth() {
    const year = globalState.currentYear;
    const month = globalState.currentMonth;
    const events = [];
    
    // Z√≠skej prvn√≠ a posledn√≠ den mƒõs√≠ce
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    
    // Projdi v≈°echny dny a sb√≠rej ud√°losti
    for (let date = new Date(firstDay); date <= lastDay; date.setDate(date.getDate() + 1)) {
        const dayEvents = getEventsForDate(new Date(date));
        events.push(...dayEvents);
    }
    
    // Odstra≈à duplicity (ud√°losti kter√© trvaj√≠ v√≠ce dn√≠)
    const uniqueEvents = removeDuplicateEvents(events);
    
    // Se≈ôaƒè podle data
    return uniqueEvents.sort((a, b) => {
        const dateA = parseSheetDate(a.dateFrom) || a.dateFrom;
        const dateB = parseSheetDate(b.dateFrom) || b.dateFrom;
        return dateA.localeCompare(dateB);
    });
}

// Odstranƒõn√≠ duplicitn√≠ch ud√°lost√≠
function removeDuplicateEvents(events) {
    const seen = new Set();
    return events.filter(event => {
        const key = `${event.eventKey}-${event.type}`;
        if (seen.has(key)) {
            return false;
        }
        seen.add(key);
        return true;
    });
}

// Seskupen√≠ ud√°lost√≠ podle data
function groupEventsByDate(events) {
    const groups = new Map();
    
    events.forEach(event => {
        const dateKey = parseSheetDate(event.dateFrom) || event.dateFrom;
        if (!groups.has(dateKey)) {
            groups.set(dateKey, []);
        }
        groups.get(dateKey).push(event);
    });
    
    return groups;
}

// Generov√°n√≠ HTML pro seznam mƒõs√≠ƒçn√≠ch ud√°lost√≠
function generateMonthEventsHTML(eventsByDate) {
    let html = '<div class="month-events-list">';
    
    // Statistiky na vrchu
    const totalEvents = Array.from(eventsByDate.values()).reduce((sum, events) => sum + events.length, 0);
    const completedEvents = Array.from(eventsByDate.values()).flat().filter(e => e.status === 'completed').length;
    const plannedEvents = totalEvents - completedEvents;
    
    html += `
        <div class="month-stats">
            <div class="stat-item">
                <span class="stat-number">${totalEvents}</span>
                <span class="stat-label">Celkem akc√≠</span>
            </div>
            <div class="stat-item">
                <span class="stat-number">${completedEvents}</span>
                <span class="stat-label">Dokonƒçeno</span>
            </div>
            <div class="stat-item">
                <span class="stat-number">${plannedEvents}</span>
                <span class="stat-label">Pl√°nov√°no</span>
            </div>
        </div>
    `;
    
    // Seznam ud√°lost√≠ podle data
    const sortedDates = Array.from(eventsByDate.keys()).sort();
    
    sortedDates.forEach(dateKey => {
        const events = eventsByDate.get(dateKey);
        const date = new Date(dateKey);
        const isToday = date.toDateString() === new Date().toDateString();
        
        html += `
            <div class="date-group ${isToday ? 'today' : ''}">
                <h4 class="date-header">
                    ${isToday ? 'üìç ' : ''}${formatDate(date)} 
                    <span class="events-count">(${events.length})</span>
                </h4>
                <div class="date-events">
        `;
        
        events.forEach(event => {
            const colorInfo = getEventColor(event.title, event.status, event.category);
            const statusText = getStatusText(event.status);
            
            html += `
                <div class="month-event-item" 
                     style="border-left: 4px solid ${colorInfo.border}; background: ${colorInfo.background};"
                     onclick="openEventModal(${JSON.stringify(event).replace(/"/g, '&quot;')})" >
                    <div class="event-header">
                        <span class="event-title">${colorInfo.icon} ${escapeHtml(event.title)}</span>
                        <span class="event-status ${event.status}">${statusText}</span>
                    </div>
                    <div class="event-details">
                        <span class="event-city">üìç ${escapeHtml(event.city)}</span>
                        <span class="event-category">üè∑Ô∏è ${escapeHtml(event.category)}</span>
                        ${event.sales ? `<span class="event-sales">üç© ${formatNumber(event.sales)} ks</span>` : ''}
                        ${event.predictedSales ? `<span class="event-prediction">üîÆ ${formatNumber(event.predictedSales)} ks</span>` : ''}
                    </div>
                </div>
            `;
        });
        
        html += `
                </div>
            </div>
        `;
    });
    
    html += '</div>';
    return html;
}

// Zobrazen√≠ zpr√°vy o chybƒõj√≠c√≠ch ud√°lostech
function displayNoEventsMessage(container) {
    const monthName = new Date(globalState.currentYear, globalState.currentMonth).toLocaleDateString('cs-CZ', { month: 'long', year: 'numeric' });
    
    container.innerHTML = `
        <div class="no-events-message">
            <div class="no-events-icon">üìÖ</div>
            <h4>≈Ω√°dn√© ud√°losti v ${monthName}</h4>
            <p>V tomto mƒõs√≠ci nejsou napl√°novan√© ≈æ√°dn√© akce.</p>
            <button class="btn btn-primary" onclick="openEventModal()">
                ‚ûï P≈ôidat novou akci
            </button>
        </div>
    `;
}

// ========================================
// DAY EVENTS POPUP
// ========================================

// Zobrazen√≠ popup s ud√°lostmi pro den
function showDayEventsPopup(date, events) {
    const popup = document.createElement('div');
    popup.className = 'day-events-popup';
    popup.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: white;
        border-radius: 12px;
        padding: 25px;
        box-shadow: 0 8px 30px rgba(0,0,0,0.2);
        max-width: 600px;
        max-height: 80vh;
        overflow-y: auto;
        z-index: 9999;
        border: 1px solid #e9ecef;
    `;
    
    const dateStr = date.toLocaleDateString('cs-CZ', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
    });
    
    let html = `
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
            <h3 style="margin: 0; color: #667eea;">üìÖ ${dateStr}</h3>
            <button onclick="this.parentElement.parentElement.remove(); document.querySelector('.popup-backdrop')?.remove();" 
                    style="background: none; border: none; font-size: 1.5rem; cursor: pointer;">&times;</button>
        </div>
    `;
    
    if (events.length === 0) {
        html += `
            <div style="text-align: center; padding: 40px;">
                <div style="font-size: 3rem; margin-bottom: 15px;">üìÖ</div>
                <h4>≈Ω√°dn√© ud√°losti v tento den</h4>
                <p>Kliknƒõte na den v kalend√°≈ôi pro p≈ôid√°n√≠ nov√© akce</p>
            </div>
        `;
    } else {
        events.forEach(event => {
            const colorInfo = getEventColor(event.title, event.status, event.category);
            html += `
                <div style="background: ${colorInfo.background}; padding: 15px; border-radius: 8px; margin-bottom: 10px; border-left: 4px solid ${colorInfo.border};">
                    <h4>${colorInfo.icon} ${escapeHtml(event.title)}</h4>
                    <p>üìç ${escapeHtml(event.city)} ‚Ä¢ üè∑Ô∏è ${escapeHtml(event.category)}</p>
                    <p><strong>Status:</strong> ${getStatusText(event.status)}</p>
                    ${event.sales ? `<p>üç© <strong>Prod√°no:</strong> ${formatNumber(event.sales)} ks</p>` : ''}
                    ${event.predictedSales ? `<p>üîÆ <strong>Predikce:</strong> ${formatNumber(event.predictedSales)} ks</p>` : ''}
                </div>
            `;
        });
    }
    
    popup.innerHTML = html;
    
    // Backdrop
    const backdrop = document.createElement('div');
    backdrop.className = 'popup-backdrop';
    backdrop.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        z-index: 9998;
    `;
    backdrop.addEventListener('click', () => {
        popup.remove();
        backdrop.remove();
    });
    
    document.body.appendChild(backdrop);
    document.body.appendChild(popup);
}

// ========================================
// KALEND√Å≈òN√ç NAVIGACE
// ========================================

// Zmƒõna mƒõs√≠ce v kalend√°≈ôi
function changeMonth(direction) {
    globalState.currentMonth += direction;
    
    if (globalState.currentMonth > 11) {
        globalState.currentMonth = 0;
        globalState.currentYear++;
    } else if (globalState.currentMonth < 0) {
        globalState.currentMonth = 11;
        globalState.currentYear--;
    }
    
    updateCurrentMonthDisplay();
    
    // Emit event o zmƒõnƒõ mƒõs√≠ce
    if (typeof eventBus !== 'undefined') {
        eventBus.emit('calendarMonthChanged', { 
            month: globalState.currentMonth, 
            year: globalState.currentYear 
        });
    }
    
    console.log(`üìÖ Calendar changed to: ${globalState.currentMonth + 1}/${globalState.currentYear}`);
    
    // Re-render kalend√°≈ô
    renderCalendar();
}

// P≈ôechod na dne≈°n√≠ mƒõs√≠c
function goToToday() {
    const today = new Date();
    globalState.currentMonth = today.getMonth();
    globalState.currentYear = today.getFullYear();
    
    updateCurrentMonthDisplay();
    
    if (typeof eventBus !== 'undefined') {
        eventBus.emit('calendarTodayRequested');
    }
    
    if (typeof showNotification === 'function') {
        showNotification('üìÖ P≈ôe≈°li jste na aktu√°ln√≠ mƒõs√≠c', 'info', 2000);
    }
    
    // Re-render kalend√°≈ô
    renderCalendar();
}

// Aktualizace zobrazen√≠ aktu√°ln√≠ho mƒõs√≠ce
function updateCurrentMonthDisplay() {
    const currentMonthElement = document.getElementById('currentMonth');
    if (currentMonthElement) {
        const monthNames = [
            'Leden', '√önor', 'B≈ôezen', 'Duben', 'Kvƒõten', 'ƒåerven',
            'ƒåervenec', 'Srpen', 'Z√°≈ô√≠', '≈ò√≠jen', 'Listopad', 'Prosinec'
        ];
        
        const monthName = monthNames[globalState.currentMonth];
        currentMonthElement.textContent = `${monthName} ${globalState.currentYear}`;
    }
}

// ========================================
// CSS STYLY PRO KALEND√Å≈ò
// ========================================

// P≈ôid√°n√≠ CSS styl≈Ø pro kalend√°≈ô
function addCalendarStyles() {
    const style = document.createElement('style');
    style.textContent = `
        /* Calendar specific styles */
        .month-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
            padding: 15px;
            background: linear-gradient(135deg, #e3f2fd, #f0f9ff);
            border-radius: 8px;
        }
        
        .stat-item {
            text-align: center;
        }
        
        .stat-number {
            display: block;
            font-size: 1.5rem;
            font-weight: 700;
            color: #1976d2;
            margin-bottom: 5px;
        }
        
        .stat-label {
            font-size: 0.85rem;
            color: #666;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .date-group {
            margin-bottom: 20px;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .date-group.today {
            box-shadow: 0 4px 12px rgba(255, 193, 7, 0.3);
            border: 2px solid #ffc107;
        }
        
        .date-header {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 12px 15px;
            margin: 0;
            font-size: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .events-count {
            background: rgba(255,255,255,0.2);
            padding: 2px 8px;
            border-radius: 10px;
            font-size: 0.8rem;
        }
        
        .date-events {
            background: white;
            padding: 10px;
        }
        
        .month-event-item {
            padding: 12px;
            margin-bottom: 8px;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .month-event-item:hover {
            transform: translateX(5px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .event-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }
        
        .event-title {
            font-weight: 600;
            font-size: 0.95rem;
        }
        
        .event-status {
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }
        
        .event-status.completed {
            background: #d4edda;
            color: #155724;
        }
        
        .event-status.ongoing {
            background: #fff3cd;
            color: #856404;
        }
        
        .event-status.planned {
            background: #e3f2fd;
            color: #1976d2;
        }
        
        .event-details {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            font-size: 0.85rem;
            color: #666;
        }
        
        .event-details span {
            display: flex;
            align-items: center;
            gap: 3px;
        }
        
        .no-events-message {
            text-align: center;
            padding: 40px;
            color: #666;
        }
        
        .no-events-icon {
            font-size: 4rem;
            margin-bottom: 15px;
            opacity: 0.7;
        }
        
        .more-events {
            background: linear-gradient(135deg, #6c757d, #495057) !important;
            border: 2px solid #495057 !important;
        }
        
        .more-events:hover {
            background: linear-gradient(135deg, #495057, #343a40) !important;
            transform: scale(1.05) !important;
        }
        
        /* Responsive kalend√°≈ô */
        @media (max-width: 768px) {
            .month-stats {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .event-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 5px;
            }
            
            .event-details {
                flex-direction: column;
                gap: 5px;
            }
        }
    `;
    
    document.head.appendChild(style);
    console.log('üé® Calendar styles added');
}

// ========================================
// INICIALIZACE KALEND√Å≈òE
// ========================================

// Inicializace kalend√°≈ôe p≈ôi naƒçten√≠
function initializeCalendar() {
    console.log('üìÖ Initializing calendar system...');
    
    try {
        // P≈ôid√°n√≠ CSS styl≈Ø
        addCalendarStyles();
        
        // Nastaven√≠ event listener≈Ø pro filtry
        if (typeof setupFilterEventListeners === 'function') {
            setupFilterEventListeners();
        }
        
        // Inicializace color palette
        if (!calendarState.colorPalette || calendarState.colorPalette.length === 0) {
            calendarState.colorPalette = generateColorPalette();
        }
        
        // Aktualizace mƒõs√≠ce display
        updateCurrentMonthDisplay();
        
        console.log('‚úÖ Calendar system initialized');
        
    } catch (error) {
        console.error('‚ùå Error initializing calendar:', error);
        if (typeof showNotification === 'function') {
            showNotification('‚ùå Chyba p≈ôi inicializaci kalend√°≈ôe', 'error');
        }
    }
}

// ========================================
// EVENT LISTENERS PRO KALEND√Å≈ò
// ========================================

// Event listeners pro kalend√°≈ô
if (typeof eventBus !== 'undefined') {
    eventBus.on('dataLoaded', () => {
        console.log('üìä Data loaded - updating calendar');
        setTimeout(() => {
            populateFilterDropdowns();
            renderCalendar();
        }, 500);
    });
    
    eventBus.on('sectionChanged', (data) => {
        if (data.section === 'calendar') {
            console.log('üìÖ Calendar section opened');
            setTimeout(() => {
                if (!calendarState.isRendering) {
                    renderCalendar();
                }
            }, 300);
        }
    });
}

// ========================================
// EXPORT PRO GLOB√ÅLN√ç POU≈ΩIT√ç
// ========================================

// Export funkc√≠ pro pou≈æit√≠ v HTML
if (typeof window !== 'undefined') {
    // Glob√°ln√≠ funkce pro HTML onclick handlers
    window.changeMonth = changeMonth;
    window.goToToday = goToToday;
    window.filterCalendar = filterCalendar;
    window.clearFilters = clearCalendarFilters;
    window.renderCalendar = renderCalendar;
    
    // Debug funkce
    window.donulandPart4CDebug = {
        renderCalendar: renderCalendar,
        getDaysInMonth: getDaysInMonth,
        getEventsForCurrentMonth: getEventsForCurrentMonth,
        updateMonthEventsList: updateMonthEventsList,
        showDayEventsPopup: showDayEventsPopup,
        initializeCalendar: initializeCalendar,
        calendarState: () => calendarState
    };
}

// ========================================
// AUTO-INICIALIZACE
// ========================================

// Automatick√° inicializace p≈ôi naƒçten√≠
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìÖ DOM loaded - initializing calendar...');
    
    // Poƒçkat na globalState
    setTimeout(() => {
        if (typeof globalState !== 'undefined') {
            initializeCalendar();
            
            // Pokud jsou u≈æ data naƒçtena, vykresli kalend√°≈ô
            if (globalState.historicalData && globalState.historicalData.length > 0) {
                setTimeout(() => {
                    populateFilterDropdowns();
                    renderCalendar();
                }, 1000);
            }
        }
    }, 500);
});

console.log('‚úÖ Donuland Part 4C loaded successfully');
console.log('üé® Features: ‚úÖ Calendar rendering ‚úÖ Month events list ‚úÖ Day popup ‚úÖ Navigation ‚úÖ Responsive UI');
console.log('üìÖ Calendar grid with unique event colors, hover effects, and mobile-friendly design');
console.log('üîß Functions: renderCalendar(), changeMonth(), goToToday(), filterCalendar()');
console.log('üß™ Debug: window.donulandPart4CDebug for testing calendar functions');

// Event pro signalizaci dokonƒçen√≠ ƒç√°sti 4C
if (typeof eventBus !== 'undefined') {
    eventBus.emit('part4cLoaded', { 
        timestamp: Date.now(),
        version: '4C-RENDERING',
        features: ['calendar-rendering', 'month-events-list', 'day-popup', 'navigation', 'responsive-ui', 'auto-initialization']
    });
}
/* ========================================
   DONULAND PART 4D - FINANƒåN√ç ANALYTICS
   Analytics s p≈ôesn√Ωm v√Ωpoƒçtem podle business model≈Ø ze Sheets
   ======================================== */

console.log('üç© Donuland Part 4D loading...');

// ========================================
// AKTUALIZACE CONFIG PRO NOV√â SLOUPCE
// ========================================

// Roz≈°√≠≈ôen√≠ CONFIG o nov√© sloupce ze Sheets
if (typeof CONFIG !== 'undefined') {
    CONFIG.SHEETS_COLUMNS = {
        ...CONFIG.SHEETS_COLUMNS,
        BUSINESS_MODEL: 'I',        // Business model
        PRICE: 'L',                 // Cena donutu
        RENT: 'O',                  // N√°jem
        EMPLOYEES: 'R',             // Poƒçet zamƒõstnanc≈Ø
        TRANSPORT: 'U',             // Doprava
        OTHER_COSTS: 'V'            // Ostatn√≠ n√°klady
    };
}

// ========================================
// HLAVN√ç FUNKCE PRO FINANƒåN√ç V√ùPOƒåTY
// ========================================

// P≈òESN√ù v√Ωpoƒçet finanƒçn√≠ch dat podle business modelu
function calculateFinancials(record) {
    console.log('üíº Calculating financials for record:', record);
    
    const businessModel = record.businessModel || 'majitel';
    const sales = parseFloat(record.sales) || 0;
    const price = parseFloat(record.price) || 50;  // fallback na 50 Kƒç (ze Sheets)
    const employees = parseInt(record.employees) || 2;
    const transport = parseFloat(record.transport) || 0;
    const otherCosts = parseFloat(record.otherCosts) || 0;
    const rent = parseRentValue(record.rent) || 0;
    
    const revenue = sales * price;
    
    let financials = {
        revenue: revenue,
        productionCost: 0,
        laborCost: 0,
        transportCost: transport,
        rentCost: rent,
        otherCosts: otherCosts,
        totalCosts: 0,
        profit: 0,
        margin: 0,
        businessModel: businessModel
    };
    
    // V√ùPOƒåET PODLE BUSINESS MODELU
    switch(businessModel.toLowerCase()) {
        case 'fran≈°√≠zant':
        case 'franchise':
            // Fran≈°√≠zant - jen v√Ωrobn√≠ n√°klad 32 Kƒç, ≈æ√°dn√© mzdy
            financials.productionCost = sales * 32;  // jen v√Ωrobn√≠ n√°klad
            financials.laborCost = 0;                // ‚ùå ≈æ√°dn√© mzdy
            break;
            
        case 'zamƒõstnanec':
        case 'employee':
            // Zamƒõstnanec - z√°kladn√≠ mzdy + 5% z obratu
            const baseLaborCost = employees * 10 * 150;  // z√°kladn√≠ mzdy
            const bonusFromRevenue = revenue * 0.05;     // + 5% z obratu
            financials.productionCost = sales * 32;
            financials.laborCost = baseLaborCost + bonusFromRevenue;
            break;
            
        case 'majitel':
        case 'owner':
        default:
            // Majitel - standardn√≠ n√°klady
            financials.productionCost = sales * 32;
            financials.laborCost = employees * 10 * 150;  // jen z√°kladn√≠ mzdy
            break;
    }
    
    // Celkov√© n√°klady
    financials.totalCosts = financials.productionCost + financials.laborCost + 
                           financials.transportCost + financials.rentCost + financials.otherCosts;
    
    // Zisk a mar≈æe
    financials.profit = financials.revenue - financials.totalCosts;
    financials.margin = financials.revenue > 0 ? (financials.profit / financials.revenue) * 100 : 0;
    
    if (globalState.debugMode) {
        console.log('üí∞ Financial calculation result:', financials);
    }
    
    return financials;
}

// ========================================
// PARSING N√ÅJMU Z R≈ÆZN√ùCH FORM√ÅT≈Æ
// ========================================

// Parser pro sloupec O (n√°jem) - r≈Øzn√© form√°ty
function parseRentValue(rentStr) {
    if (!rentStr || !rentStr.toString().trim()) return 0;
    
    const rent = rentStr.toString().trim().toLowerCase();
    
    // Zdarma varianty
    if (rent === 'zdarma' || rent === 'free' || rent === '0' || rent === '-') {
        return 0;
    }
    
    // Pokus o extrakci ƒç√≠seln√© hodnoty
    const numberMatch = rent.match(/(\d+(?:[.,]\d+)?)/);
    if (numberMatch) {
        return parseFloat(numberMatch[1].replace(',', '.'));
    }
    
    // Procenta z obratu - vr√°t√≠ 0, bude poƒç√≠t√°no jinde
    if (rent.includes('%') || rent.includes('procent')) {
        console.log('‚ö†Ô∏è Percentage rent detected, needs special handling:', rent);
        return 0; // Procenta se poƒç√≠taj√≠ zvl√°≈°≈•
    }
    
    console.warn('‚ö†Ô∏è Could not parse rent value:', rent);
    return 0;
}

// ========================================
// HLAVN√ç FUNKCE PRO ANALYTICS DISPLAY
// ========================================

// HLAVN√ç funkce pro zobrazen√≠ finanƒçn√≠ho p≈ôehledu
function displayFinancialOverview() {
    console.log('üìä Displaying financial overview...');
    
    try {
        // Z√≠skej data pro finanƒçn√≠ p≈ôehled
        const financialData = calculateOverallFinancials();
        const topEvents = getTopPerformingEvents(5);
        const businessModelStats = getBusinessModelStats();
        
        // Zobrazen√≠ jednotliv√Ωch sekc√≠
        displayOverallFinancialStats(financialData);
        displayTopPerformingEvents(topEvents);
        displayBusinessModelBreakdown(businessModelStats);
        displayMonthlyTrends(); // Zachov√°no z p≈Øvodn√≠ho
        
        console.log('‚úÖ Financial overview displayed successfully');
        
    } catch (error) {
        console.error('‚ùå Error displaying financial overview:', error);
        if (typeof showNotification === 'function') {
            showNotification('‚ùå Chyba p≈ôi zobrazen√≠ finanƒçn√≠ho p≈ôehledu', 'error');
        }
    }
}

// ========================================
// V√ùPOƒåET CELKOV√ùCH FINANƒåN√çCH STATISTIK
// ========================================

// V√Ωpoƒçet celkov√Ωch finanƒçn√≠ch dat
function calculateOverallFinancials() {
    console.log('üí∞ Calculating overall financials...');
    
    if (!globalState.historicalData || globalState.historicalData.length === 0) {
        return {
            totalEvents: 0,
            totalRevenue: 0,
            totalCosts: 0,
            totalProfit: 0,
            averageMargin: 0,
            profitableEvents: 0
        };
    }
    
    // Filtruj pouze ud√°losti s validn√≠mi sales daty
    const validEvents = globalState.historicalData.filter(record => {
        return record.sales > 0 && record.eventName && record.city;
    });
    
    if (validEvents.length === 0) {
        return {
            totalEvents: globalState.historicalData.length,
            validEvents: 0,
            totalRevenue: 0,
            totalCosts: 0,
            totalProfit: 0,
            averageMargin: 0,
            profitableEvents: 0
        };
    }
    
    let totalRevenue = 0;
    let totalCosts = 0;
    let totalProfit = 0;
    let profitableEvents = 0;
    const margins = [];
    
    // Projdi v≈°echny validn√≠ ud√°losti a vypoƒç√≠tej finansy
    validEvents.forEach(record => {
        const financials = calculateFinancials(record);
        
        totalRevenue += financials.revenue;
        totalCosts += financials.totalCosts;
        totalProfit += financials.profit;
        
        if (financials.profit > 0) {
            profitableEvents++;
        }
        
        if (financials.margin !== undefined) {
            margins.push(financials.margin);
        }
        
        if (globalState.debugMode) {
            console.log(`üìà Event "${record.eventName}": Revenue ${financials.revenue}, Profit ${financials.profit}`);
        }
    });
    
    const averageMargin = margins.length > 0 ? 
        margins.reduce((sum, margin) => sum + margin, 0) / margins.length : 0;
    
    const result = {
        totalEvents: globalState.historicalData.length,
        validEvents: validEvents.length,
        totalRevenue: totalRevenue,
        totalCosts: totalCosts,
        totalProfit: totalProfit,
        averageMargin: averageMargin,
        profitableEvents: profitableEvents,
        profitabilityRate: (profitableEvents / validEvents.length) * 100
    };
    
    console.log('üí∞ Overall financials calculated:', result);
    return result;
}

// ========================================
// TOP PERFORMING EVENTS
// ========================================

// Z√≠sk√°n√≠ nej√∫spƒõ≈°nƒõj≈°√≠ch akc√≠ podle zisku
function getTopPerformingEvents(limit = 5) {
    console.log('üèÜ Getting top performing events...');
    
    if (!globalState.historicalData || globalState.historicalData.length === 0) {
        return [];
    }
    
    const eventsWithFinancials = globalState.historicalData
        .filter(record => record.sales > 0 && record.eventName && record.city)
        .map(record => {
            const financials = calculateFinancials(record);
            return {
                name: record.eventName,
                city: record.city,
                category: normalizeCategory(record.category),
                dateFrom: record.dateFrom,
                businessModel: record.businessModel || 'majitel',
                ...financials
            };
        })
        .sort((a, b) => b.profit - a.profit) // Se≈ôaƒè podle zisku sestupnƒõ
        .slice(0, limit);
    
    console.log(`üèÜ Found ${eventsWithFinancials.length} top events:`, eventsWithFinancials);
    return eventsWithFinancials;
}

// ========================================
// BUSINESS MODEL STATISTIKY
// ========================================

// Statistiky podle business model≈Ø
function getBusinessModelStats() {
    console.log('üíº Calculating business model stats...');
    
    if (!globalState.historicalData || globalState.historicalData.length === 0) {
        return {};
    }
    
    const modelStats = new Map();
    
    globalState.historicalData
        .filter(record => record.sales > 0)
        .forEach(record => {
            const businessModel = record.businessModel || 'majitel';
            const financials = calculateFinancials(record);
            
            if (!modelStats.has(businessModel)) {
                modelStats.set(businessModel, {
                    name: businessModel,
                    eventsCount: 0,
                    totalRevenue: 0,
                    totalCosts: 0,
                    totalProfit: 0,
                    profitableEvents: 0,
                    margins: []
                });
            }
            
            const stats = modelStats.get(businessModel);
            stats.eventsCount++;
            stats.totalRevenue += financials.revenue;
            stats.totalCosts += financials.totalCosts;
            stats.totalProfit += financials.profit;
            stats.margins.push(financials.margin);
            
            if (financials.profit > 0) {
                stats.profitableEvents++;
            }
        });
    
    // P≈ôeveƒè na array a vypoƒç√≠taj pr≈Ømƒõry
    const result = Array.from(modelStats.values()).map(stats => ({
        ...stats,
        averageRevenue: stats.eventsCount > 0 ? stats.totalRevenue / stats.eventsCount : 0,
        averageProfit: stats.eventsCount > 0 ? stats.totalProfit / stats.eventsCount : 0,
        averageMargin: stats.margins.length > 0 ? 
            stats.margins.reduce((sum, m) => sum + m, 0) / stats.margins.length : 0,
        profitabilityRate: stats.eventsCount > 0 ? 
            (stats.profitableEvents / stats.eventsCount) * 100 : 0
    }));
    
    console.log('üíº Business model stats:', result);
    return result;
}

// ========================================
// UI DISPLAY FUNKCE
// ========================================

// Zobrazen√≠ celkov√Ωch finanƒçn√≠ch statistik
function displayOverallFinancialStats(financialData) {
    const container = document.getElementById('overallStats');
    if (!container) return;
    
    container.innerHTML = `
        <div class="financial-stats-grid">
            <div class="stat-item revenue">
                <div class="stat-icon">üí∞</div>
                <div class="stat-value">${formatCurrency(financialData.totalRevenue)}</div>
                <div class="stat-label">Celkov√Ω obrat</div>
            </div>
            
            <div class="stat-item costs">
                <div class="stat-icon">üí∏</div>
                <div class="stat-value">${formatCurrency(financialData.totalCosts)}</div>
                <div class="stat-label">Celkov√© n√°klady</div>
            </div>
            
            <div class="stat-item profit ${financialData.totalProfit > 0 ? 'positive' : 'negative'}">
                <div class="stat-icon">${financialData.totalProfit > 0 ? '‚úÖ' : '‚ùå'}</div>
                <div class="stat-value">${formatCurrency(financialData.totalProfit)}</div>
                <div class="stat-label">Celkov√Ω zisk</div>
            </div>
            
            <div class="stat-item margin">
                <div class="stat-icon">üìä</div>
                <div class="stat-value">${financialData.averageMargin.toFixed(1)}%</div>
                <div class="stat-label">Pr≈Ømƒõrn√° mar≈æe</div>
            </div>
            
            <div class="stat-item events">
                <div class="stat-icon">üìÖ</div>
                <div class="stat-value">${financialData.validEvents}</div>
                <div class="stat-label">Akc√≠ s daty</div>
            </div>
            
            <div class="stat-item profitability">
                <div class="stat-icon">üéØ</div>
                <div class="stat-value">${financialData.profitabilityRate.toFixed(1)}%</div>
                <div class="stat-label">Ziskovost</div>
            </div>
        </div>
    `;
}

// Zobrazen√≠ top performing events
function displayTopPerformingEvents(topEvents) {
    const container = document.getElementById('topEvents');
    if (!container) return;
    
    if (topEvents.length === 0) {
        container.innerHTML = `
            <div class="analytics-placeholder">
                <p>üìä ≈Ω√°dn√© akce s finanƒçn√≠mi daty k anal√Ωze</p>
            </div>
        `;
        return;
    }
    
    let html = '';
    topEvents.forEach((event, index) => {
        const rankIcon = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
        const profitClass = event.profit > 0 ? 'positive' : 'negative';
        
        html += `
            <div class="top-item financial-item">
                <div class="top-info">
                    <h4>${rankIcon} ${escapeHtml(event.name)}</h4>
                    <p>üìç ${escapeHtml(event.city)} ‚Ä¢ üìã ${escapeHtml(event.category)}</p>
                    <p><small>üíº ${escapeHtml(event.businessModel)} ‚Ä¢ üìÖ ${formatDate(event.dateFrom)}</small></p>
                </div>
                <div class="top-stats financial-stats">
                    <div class="top-value ${profitClass}">${formatCurrency(event.profit)}</div>
                    <div class="top-subvalue">Obrat: ${formatCurrency(event.revenue)}</div>
                    <div class="top-subvalue">Mar≈æe: ${event.margin.toFixed(1)}%</div>
                </div>
            </div>
        `;
    });
    
    container.innerHTML = html;
}

// Zobrazen√≠ business model breakdown
function displayBusinessModelBreakdown(businessModelStats) {
    const container = document.getElementById('businessModelStats');
    if (!container) {
        // Vytvo≈ô container pokud neexistuje
        const analyticsGrid = document.querySelector('.analytics-grid');
        if (analyticsGrid) {
            const newCard = document.createElement('div');
            newCard.className = 'card';
            newCard.innerHTML = `
                <h3>üíº Podle business model≈Ø</h3>
                <div id="businessModelStats"></div>
            `;
            analyticsGrid.appendChild(newCard);
            return displayBusinessModelBreakdown(businessModelStats);
        }
        return;
    }
    
    if (businessModelStats.length === 0) {
        container.innerHTML = `
            <div class="analytics-placeholder">
                <p>üíº ≈Ω√°dn√° data podle business model≈Ø</p>
            </div>
        `;
        return;
    }
    
    let html = '';
    businessModelStats.forEach(model => {
        const modelIcon = {
            'majitel': 'üè™',
            'zamƒõstnanec': 'üë®‚Äçüíº',
            'fran≈°√≠zant': 'ü§ù'
        }[model.name] || 'üíº';
        
        const profitClass = model.totalProfit > 0 ? 'positive' : 'negative';
        
        html += `
            <div class="business-model-item">
                <div class="model-header">
                    <h4>${modelIcon} ${model.name}</h4>
                    <span class="events-count">${model.eventsCount} akc√≠</span>
                </div>
                <div class="model-stats">
                    <div class="model-stat">
                        <span class="stat-label">Celkov√Ω zisk:</span>
                        <span class="stat-value ${profitClass}">${formatCurrency(model.totalProfit)}</span>
                    </div>
                    <div class="model-stat">
                        <span class="stat-label">Pr≈Ømƒõrn√Ω zisk:</span>
                        <span class="stat-value">${formatCurrency(model.averageProfit)}</span>
                    </div>
                    <div class="model-stat">
                        <span class="stat-label">Pr≈Ømƒõrn√° mar≈æe:</span>
                        <span class="stat-value">${model.averageMargin.toFixed(1)}%</span>
                    </div>
                    <div class="model-stat">
                        <span class="stat-label">Ziskovost:</span>
                        <span class="stat-value">${model.profitabilityRate.toFixed(1)}%</span>
                    </div>
                </div>
            </div>
        `;
    });
    
    container.innerHTML = html;
}

// PLACEHOLDER - zachov√°no z p≈Øvodn√≠ho Part 4
function displayMonthlyTrends() {
    const container = document.getElementById('monthlyTrends');
    if (!container) return;
    
    container.innerHTML = `
        <div class="chart-placeholder">
            <p>üìà Mƒõs√≠ƒçn√≠ trendy finanƒçn√≠ch v√Ωsledk≈Ø</p>
            <p><small>Tato funkce bude implementov√°na v budouc√≠ verzi</small></p>
        </div>
    `;
}

// ========================================
// CSS STYLY PRO FINANƒåN√ç ANALYTICS
// ========================================

// P≈ôid√°n√≠ CSS styl≈Ø pro finanƒçn√≠ analytics
function addFinancialAnalyticsStyles() {
    const style = document.createElement('style');
    style.textContent = `
        /* Financial Analytics Styles */
        .financial-stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }
        
        .financial-stats-grid .stat-item {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 20px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }
        
        .financial-stats-grid .stat-item:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.15);
        }
        
        .financial-stats-grid .stat-icon {
            font-size: 2.5rem;
            opacity: 0.8;
        }
        
        .financial-stats-grid .stat-value {
            font-size: 1.8rem;
            font-weight: 700;
            margin-bottom: 5px;
            line-height: 1;
        }
        
        .financial-stats-grid .stat-label {
            font-size: 0.9rem;
            color: var(--gray-600);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            font-weight: 500;
        }
        
        .stat-item.positive .stat-value {
            color: #28a745;
        }
        
        .stat-item.negative .stat-value {
            color: #dc3545;
        }
        
        .financial-item {
            border-left: 4px solid #667eea;
        }
        
        .financial-stats {
            text-align: right;
        }
        
        .top-value.positive {
            color: #28a745;
        }
        
        .top-value.negative {
            color: #dc3545;
        }
        
        .business-model-item {
            background: white;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 15px;
            border-left: 4px solid var(--primary-color);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .model-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .model-header h4 {
            margin: 0;
            color: var(--gray-800);
        }
        
        .events-count {
            background: var(--primary-color);
            color: white;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 600;
        }
        
        .model-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 10px;
        }
        
        .model-stat {
            display: flex;
            justify-content: space-between;
            padding: 5px 0;
        }
        
        .model-stat .stat-label {
            color: var(--gray-600);
            font-size: 0.9rem;
        }
        
        .model-stat .stat-value {
            font-weight: 600;
            color: var(--gray-800);
        }
        
        .model-stat .stat-value.positive {
            color: var(--success-color);
        }
        
        .model-stat .stat-value.negative {
            color: var(--error-color);
        }
        
        /* Responsive design */
        @media (max-width: 768px) {
            .financial-stats-grid {
                grid-template-columns: 1fr;
            }
            
            .model-stats {
                grid-template-columns: 1fr;
            }
        }
    `;
    
    document.head.appendChild(style);
    console.log('üé® Financial analytics styles added');
}

// ========================================
// EVENT LISTENERS PRO ANALYTICS
// ========================================

// Event listeners pro finanƒçn√≠ p≈ôehled
if (typeof eventBus !== 'undefined') {
    eventBus.on('dataLoaded', () => {
        console.log('üìä Data loaded - updating financial overview');
        setTimeout(() => {
            displayFinancialOverview();
        }, 1000);
    });
    
    eventBus.on('sectionChanged', (data) => {
        if (data.section === 'analytics') {
            console.log('üìä Analytics section opened - refreshing financial data');
            setTimeout(() => {
                displayFinancialOverview();
            }, 500);
        }
    });
    
    eventBus.on('analyticsRequested', () => {
        console.log('üìä Financial analytics requested');
        displayFinancialOverview();
    });
}

// ========================================
// INICIALIZACE
// ========================================

// Inicializace finanƒçn√≠ch analytics
function initializeFinancialAnalytics() {
    console.log('üí∞ Initializing financial analytics...');
    
    try {
        // P≈ôid√°n√≠ CSS styl≈Ø
        addFinancialAnalyticsStyles();
        
        // Pokud jsou data u≈æ naƒçtena, zobraz p≈ôehled
        if (globalState.historicalData && globalState.historicalData.length > 0) {
            setTimeout(() => {
                displayFinancialOverview();
            }, 500);
        }
        
        console.log('‚úÖ Financial analytics initialized');
        
    } catch (error) {
        console.error('‚ùå Error initializing financial analytics:', error);
    }
}

// Auto-inicializace p≈ôi naƒçten√≠
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
        if (typeof globalState !== 'undefined') {
            initializeFinancialAnalytics();
        }
    }, 1000);
});

// ========================================
// EXPORT DEBUG FUNKC√ç
// ========================================

if (typeof window !== 'undefined') {
    window.donulandPart4DDebug = {
        calculateFinancials: calculateFinancials,
        calculateOverallFinancials: calculateOverallFinancials,
        getTopPerformingEvents: getTopPerformingEvents,
        getBusinessModelStats: getBusinessModelStats,
        displayFinancialOverview: displayFinancialOverview,
        parseRentValue: parseRentValue
    };
}

console.log('‚úÖ Donuland Part 4D loaded successfully');
console.log('üí∞ Features: ‚úÖ Business model calculations ‚úÖ Financial overview ‚úÖ Top events by profit ‚úÖ Model breakdown');
console.log('üîß Business models: fran≈°√≠zant (no labor), zamƒõstnanec (+5% revenue), majitel (standard)');
console.log('üìä Analytics: Revenue, costs, profit, margin with real Sheets data');
console.log('üß™ Debug: window.donulandPart4DDebug for testing financial calculations');

// Event pro signalizaci dokonƒçen√≠ ƒç√°sti 4D
if (typeof eventBus !== 'undefined') {
    eventBus.emit('part4dLoaded', { 
        timestamp: Date.now(),
        version: '4D-FINANCIAL',
        features: ['business-model-calculations', 'financial-overview', 'top-events-profit', 'model-breakdown', 'rent-parsing']
    });
}
